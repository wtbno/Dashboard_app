import { GenerateConfigOptions } from './commands/generate-config';
import { UNKNOWN_OBJ } from './types';
interface ConfigFileOptions {
    __configFile?: {
        options?: UNKNOWN_OBJ;
        scripts?: UNKNOWN_OBJ;
        filePath: string;
    };
}
export declare type GlobalOptions = {
    appDataDir?: string;
    workingDir?: string;
    ci?: boolean;
    verbose?: boolean;
    printOptions?: boolean;
    config?: string;
    src?: string;
} & ConfigFileOptions;
export declare const loadCosmiConfig: (configFile?: string | undefined) => Partial<ConfigFileOptions>;
interface CommandObj {
    parent?: CommandObj;
    opts: () => GenerateConfigOptions;
}
export declare const extractCommandOptions: <T extends GenerateConfigOptions>(cmd: CommandObj) => Partial<T>;
export declare const getOptions: <T extends Partial<GenerateConfigOptions>>(cmd: CommandObj, defaultOptions?: Partial<T>) => Partial<T>;
export {};
//# sourceMappingURL=get-options.d.ts.map