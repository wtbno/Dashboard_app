"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.cookieToString = exports.jarFromCookies = exports.cookiesFromJar = void 0;
const tough_cookie_1 = require("tough-cookie");
/**
 * Get a list of cookie objects from a request.jar()
 */
const cookiesFromJar = (cookieJar) => {
    return new Promise(resolve => {
        cookieJar.store.getAllCookies((err, cookies) => {
            if (err) {
                console.warn('Failed to get cookies form jar', err);
                resolve([]);
            }
            else {
                // NOTE: Perform toJSON so we have a plain JS object instead of Cookie instance
                resolve(cookies.map(cookie => cookie.toJSON()));
            }
        });
    });
};
exports.cookiesFromJar = cookiesFromJar;
/**
 * Get a request.jar() from a list of cookie objects
 */
const jarFromCookies = (cookies) => {
    let jar;
    try {
        // For some reason, fromJSON modifies `cookies`.
        // Create a copy first just to be sure.
        const copy = JSON.stringify({ cookies });
        jar = tough_cookie_1.CookieJar.fromJSON(copy);
    }
    catch (e) {
        console.log('[cookies] Failed to initialize cookie jar', e);
        jar = new tough_cookie_1.CookieJar();
    }
    jar.rejectPublicSuffixes = false;
    jar.looseMode = true;
    return jar;
};
exports.jarFromCookies = jarFromCookies;
const cookieToString = (cookie) => {
    // Cookie can either be a plain JS object or Cookie instance
    if (!(cookie instanceof tough_cookie_1.Cookie)) {
        cookie = tough_cookie_1.Cookie.fromJSON(cookie);
        if (cookie === null) {
            throw new Error(`Unable to read cookie: ${cookie}`);
        }
    }
    let str = cookie.toString();
    // tough-cookie toString() doesn't put domain on all the time.
    // This hack adds when tough-cookie won't
    if (cookie.domain && cookie.hostOnly) {
        str += `; Domain=${cookie.domain}`;
    }
    return str;
};
exports.cookieToString = cookieToString;
//# sourceMappingURL=cookies.js.map