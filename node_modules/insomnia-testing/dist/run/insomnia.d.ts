export declare type SendRequestCallback<TResponse> = (requestId: string) => Promise<TResponse>;
export interface InsomniaOptions<TResponse> {
    sendRequest: SendRequestCallback<TResponse>;
    bail?: boolean;
    keepFile?: boolean;
    testFilter?: string;
}
/**
 * An instance of Insomnia will be exposed as a global variable during
 * tests, and will provide a bunch of utility functions for sending
 * requests, etc.
 */
export declare class Insomnia<TResponse = {}> {
    activeRequestId: string | null;
    activeEnvironmentId: string | null;
    sendRequest: SendRequestCallback<TResponse>;
    constructor(options: InsomniaOptions<TResponse>);
    setActiveRequestId(id: string): void;
    clearActiveRequest(): void;
    /**
     *
     * @param reqId - request ID to send. Specifying nothing will send the active request
     */
    send(reqId?: string | null): Promise<TResponse>;
}
//# sourceMappingURL=insomnia.d.ts.map