{"version":3,"sources":["webpack://insomniatesting/webpack/bootstrap","webpack://insomniatesting/./node_modules/chai/lib/chai/utils/flag.js","webpack://insomniatesting/./node_modules/chai/lib/chai.js","webpack://insomniatesting/./node_modules/chai/lib/chai/utils/transferFlags.js","webpack://insomniatesting/./node_modules/chai/lib/chai/config.js","webpack://insomniatesting/external \"path\"","webpack://insomniatesting/external \"fs\"","webpack://insomniatesting/./node_modules/type-detect/type-detect.js","webpack://insomniatesting/./node_modules/chai/lib/chai/utils/isProxyEnabled.js","webpack://insomniatesting/./node_modules/chai/lib/chai/utils/addLengthGuard.js","webpack://insomniatesting/./node_modules/chai/lib/chai/utils/proxify.js","webpack://insomniatesting/./node_modules/chai/lib/chai/utils/inspect.js","webpack://insomniatesting/./node_modules/assertion-error/index.js","webpack://insomniatesting/./node_modules/chai/lib/chai/utils/getActual.js","webpack://insomniatesting/./node_modules/chai/lib/chai/utils/objDisplay.js","webpack://insomniatesting/./node_modules/get-func-name/index.js","webpack://insomniatesting/./node_modules/chai/lib/chai/utils/getProperties.js","webpack://insomniatesting/./node_modules/chai/lib/chai/utils/getOwnEnumerablePropertySymbols.js","webpack://insomniatesting/./node_modules/mkdirp/lib/mkdirp-manual.js","webpack://insomniatesting/external \"mocha\"","webpack://insomniatesting/./src/index.ts","webpack://insomniatesting/./src/generate/index.ts","webpack://insomniatesting/./src/generate/generate.ts","webpack://insomniatesting/./src/generate/util.ts","webpack://insomniatesting/./src/run/index.ts","webpack://insomniatesting/./src/run/run.ts","webpack://insomniatesting/./node_modules/chai/index.js","webpack://insomniatesting/./node_modules/chai/lib/chai/utils/index.js","webpack://insomniatesting/./node_modules/pathval/index.js","webpack://insomniatesting/./node_modules/chai/lib/chai/utils/test.js","webpack://insomniatesting/./node_modules/chai/lib/chai/utils/expectTypes.js","webpack://insomniatesting/./node_modules/chai/lib/chai/utils/getMessage.js","webpack://insomniatesting/./node_modules/chai/lib/chai/utils/getEnumerableProperties.js","webpack://insomniatesting/./node_modules/deep-eql/index.js","webpack://insomniatesting/./node_modules/chai/lib/chai/utils/addProperty.js","webpack://insomniatesting/./node_modules/chai/lib/chai/utils/addMethod.js","webpack://insomniatesting/./node_modules/chai/lib/chai/utils/overwriteProperty.js","webpack://insomniatesting/./node_modules/chai/lib/chai/utils/overwriteMethod.js","webpack://insomniatesting/./node_modules/chai/lib/chai/utils/addChainableMethod.js","webpack://insomniatesting/./node_modules/chai/lib/chai/utils/overwriteChainableMethod.js","webpack://insomniatesting/./node_modules/chai/lib/chai/utils/compareByInspect.js","webpack://insomniatesting/./node_modules/chai/lib/chai/utils/getOwnEnumerableProperties.js","webpack://insomniatesting/./node_modules/check-error/index.js","webpack://insomniatesting/./node_modules/chai/lib/chai/utils/isNaN.js","webpack://insomniatesting/./node_modules/chai/lib/chai/utils/getOperator.js","webpack://insomniatesting/./node_modules/chai/lib/chai/assertion.js","webpack://insomniatesting/./node_modules/chai/lib/chai/core/assertions.js","webpack://insomniatesting/./node_modules/chai/lib/chai/interface/expect.js","webpack://insomniatesting/./node_modules/chai/lib/chai/interface/should.js","webpack://insomniatesting/./node_modules/chai/lib/chai/interface/assert.js","webpack://insomniatesting/./node_modules/mkdirp/index.js","webpack://insomniatesting/./node_modules/mkdirp/lib/opts-arg.js","webpack://insomniatesting/external \"util\"","webpack://insomniatesting/./node_modules/mkdirp/lib/path-arg.js","webpack://insomniatesting/./node_modules/mkdirp/lib/mkdirp-native.js","webpack://insomniatesting/./node_modules/mkdirp/lib/find-made.js","webpack://insomniatesting/./node_modules/mkdirp/lib/use-native.js","webpack://insomniatesting/external \"os\"","webpack://insomniatesting/./src/run/insomnia.ts","webpack://insomniatesting/./src/run/javascript-reporter.ts"],"names":["installedModules","__webpack_require__","moduleId","exports","module","i","l","modules","call","m","c","d","name","getter","o","Object","defineProperty","enumerable","get","r","Symbol","toStringTag","value","t","mode","__esModule","ns","create","key","bind","n","object","property","prototype","hasOwnProperty","p","s","obj","flags","__flags","arguments","length","used","version","AssertionError","util","use","fn","indexOf","push","config","assertion","core","expect","should","assert","includeAll","flag","includeStack","showDiff","truncateThreshold","useProxy","proxyExcludedKeys","require","factory","promiseExists","Promise","globalObject","self","global","symbolExists","mapExists","Map","setExists","Set","weakMapExists","WeakMap","weakSetExists","WeakSet","dataViewExists","DataView","symbolIteratorExists","iterator","symbolToStringTagExists","setEntriesExists","entries","mapEntriesExists","setIteratorPrototype","getPrototypeOf","mapIteratorPrototype","arrayIteratorExists","Array","arrayIteratorPrototype","stringIteratorExists","String","stringIteratorPrototype","typeofObj","isArray","window","location","document","navigator","mimeTypes","plugins","HTMLElement","tagName","stringTag","objPrototype","RegExp","Date","toString","slice","Proxy","Reflect","fnLengthDesc","getOwnPropertyDescriptor","assertionName","isChainable","configurable","Error","getProperties","isProxyEnabled","builtins","nonChainableMethodName","proxyGetter","target","has","suggestion","suggestionDistance","forEach","prop","dist","strA","strB","cap","Math","abs","memo","fill","j","ch","charCodeAt","min","stringDistanceCapped","getName","getEnumerableProperties","showHidden","depth","colors","formatValue","seen","stylize","str","ctx","recurseTimes","inspect","constructor","ret","primitive","simple","JSON","stringify","replace","Infinity","formatPrimitive","nodeType","nodeName","outerHTML","xmlVersion","XMLSerializer","serializeToString","container","createElementNS","appendChild","cloneNode","html","innerHTML","err","nameSuffix","visibleKeys","keys","isError","isRegExp","isDate","toUTCString","formatError","ar","output","base","array","typedArray","braces","test","objectToString","formatProperty","match","formatArray","formatTypedArray","map","pop","reduce","prev","cur","join","reduceToSingleString","propDescriptor","set","split","line","substr","re","e","exclude","excludes","excludeProps","res","args","message","_props","ssf","props","extend","this","captureStackTrace","stack","toJSON","_obj","type","splice","Function","functionNameMatch","aFunc","result","getOwnPropertyNames","addProperty","proto","getOwnPropertySymbols","filter","sym","dirname","mkdirpManual","path","opts","made","recursive","parent","mkdirAsync","catch","er","code","then","statAsync","st","isDirectory","mkdirpManualSync","mkdirSync","statSync","_","generate","generateToFile","runTests","runTestsCli","suites","lines","generateSuiteLines","async","filepath","resolve","reject","js","writeFile","suite","indent","escapeJsStr","tests","generateTestLines","defaultRequestId","level","prefix","runInternal","testSrc","options","reporter","extractResult","bail","keepFile","testFilter","insomnia","Insomnia","chai","mocha","timeout","globals","fgrep","source","addFile","writeTempFile","runner","run","files","console","log","file","unlink","sourceCode","root","tmpdir","sync","random","writeFileSync","Boolean","stats","failures","JavaScriptReporter","testResults","pathval","expectTypes","getMessage","getActual","objDisplay","transferFlags","eql","getPathInfo","hasProperty","addMethod","overwriteProperty","overwriteMethod","addChainableMethod","overwriteChainableMethod","compareByInspect","getOwnEnumerablePropertySymbols","getOwnEnumerableProperties","checkError","proxify","addLengthGuard","isNaN","getOperator","parsePath","mArr","exec","parseFloat","internalGetPathValue","parsed","pathDepth","temporaryValue","part","last","info","exists","getPathValue","setPathValue","val","tempObj","propName","propVal","next","internalSetPathValue","negate","expr","types","flagMsg","ssfi","toLowerCase","sort","index","art","charAt","objType","some","expected","undefined","actual","msg","FakeMap","_key","now","isExtensible","MemoizeMap","memoizeCompare","leftHandOperand","rightHandOperand","memoizeMap","isPrimitive","leftHandMap","memoizeSet","deepEqual","comparator","extensiveDeepEqual","simpleResult","simpleEqual","memoize","memoizeResultLeft","memoizeResultRight","comparatorResult","leftHandType","valueOf","iterableEqual","regexpEqual","getGeneratorEntries","generatorEqual","Uint8Array","buffer","entriesEqual","leftHandKeys","getEnumerableKeys","rightHandKeys","keysEqual","leftHandEntries","getIteratorEntries","rightHandEntries","objectEqual","extensiveDeepEqualByType","size","leftHandItems","rightHandItems","hasIteratorFunction","iteratorError","generator","generatorResult","accumulator","done","propertyGetter","newAssertion","Assertion","method","methodWrapper","apply","_get","_super","overwritingPropertyGetter","origLockSsfi","_method","overwritingMethodWrapper","canSetPrototype","setPrototypeOf","testFn","excludeNames","propDesc","chainingBehavior","chainableBehavior","__methods","chainableMethodWrapper","asserterName","pd","_chainingBehavior","a","b","concat","getFunctionName","constructorFn","compatibleInstance","thrown","errorLike","compatibleConstructor","compatibleMessage","errMatcher","comparisonString","getConstructorName","constructorName","trim","Number","operator","isObject","objectType","isObjectType","_chai","lockSsfi","warn","negateMsg","_actual","ok","assertionErrorObjectProperties","an","article","SameValueZero","includeChainingBehavior","include","isDeep","descriptor","included","isEql","item","firstErr","numErrs","propAssertion","assertExist","checkArguments","assertEqual","prevLockSsfi","assertEql","assertAbove","errorMessage","doLength","msgPrefix","nType","shouldThrow","to","have","itemsCount","assertLeast","assertBelow","assertMost","assertInstanceOf","isInstanceOf","TypeError","assertProperty","isNested","isOwn","nameType","pathInfo","assertOwnProperty","assertOwnPropertyDescriptor","actualDescriptor","assertLengthChain","assertLength","assertMatch","assertKeys","keysType","deepStr","mixedArgsMsg","len","any","all","expectedKey","actualKey","every","assertThrows","errMsgMatcher","caughtErr","is","everyArgIsUndefined","everyArgIsDefined","errorLikeFail","errMsgMatcherFail","errorLikeString","placeholder","respondTo","itself","context","satisfy","matcher","closeTo","delta","assertChanges","subject","initial","final","msgObj","assertIncreases","assertDecreases","chain","start","finish","startType","finishType","range","subset","be","failMsg","failNegateMsg","contains","ordered","cmp","superset","elem","idx","matchIdx","elem2","isSubsetOf","list","possibility","expression","behavior","realDelta","isSealed","isFrozen","isFinite","fail","loadShould","writable","shouldGetter","BigInt","val1","val2","equal","errt","errs","Throw","exist","not","Should","express","errmsg","isOk","isNotOk","act","exp","notEqual","strictEqual","notStrictEqual","deepStrictEqual","notDeepEqual","isAbove","abv","above","isAtLeast","atlst","least","isBelow","blw","below","isAtMost","atmst","most","isTrue","isNotTrue","isFalse","isNotFalse","isNull","isNotNull","NaN","isNotNaN","notExists","isUndefined","isDefined","isFunction","isNotFunction","isNotObject","isNotArray","isString","isNotString","isNumber","isNotNumber","finite","isBoolean","isNotBoolean","typeOf","notTypeOf","instanceOf","notInstanceOf","inc","notInclude","deepInclude","deep","notDeepInclude","nestedInclude","nested","notNestedInclude","deepNestedInclude","notDeepNestedInclude","ownInclude","own","notOwnInclude","deepOwnInclude","notDeepOwnInclude","notMatch","notProperty","propertyVal","notPropertyVal","deepPropertyVal","notDeepPropertyVal","ownProperty","notOwnProperty","ownPropertyVal","notOwnPropertyVal","deepOwnPropertyVal","notDeepOwnPropertyVal","nestedProperty","notNestedProperty","nestedPropertyVal","notNestedPropertyVal","deepNestedPropertyVal","notDeepNestedPropertyVal","lengthOf","hasAnyKeys","hasAllKeys","containsAllKeys","contain","doesNotHaveAnyKeys","doesNotHaveAllKeys","hasAnyDeepKeys","hasAllDeepKeys","containsAllDeepKeys","doesNotHaveAnyDeepKeys","doesNotHaveAllDeepKeys","throws","assertErr","throw","doesNotThrow","approximately","sameMembers","set1","set2","same","members","notSameMembers","sameDeepMembers","notSameDeepMembers","sameOrderedMembers","notSameOrderedMembers","sameDeepOrderedMembers","notSameDeepOrderedMembers","includeMembers","notIncludeMembers","includeDeepMembers","notIncludeDeepMembers","includeOrderedMembers","notIncludeOrderedMembers","includeDeepOrderedMembers","notIncludeDeepOrderedMembers","oneOf","inList","changes","change","changesBy","tmpMsg","by","doesNotChange","changesButNotBy","but","increases","increase","increasesBy","doesNotIncrease","increasesButNotBy","decreases","decrease","decreasesBy","doesNotDecrease","doesNotDecreaseBy","decreasesButNotBy","ifError","extensible","isNotExtensible","sealed","isNotSealed","frozen","isNotFrozen","isEmpty","empty","isNotEmpty","alias","as","optsArg","pathArg","mkdirpNative","mkdirpNativeSync","useNative","useNativeSync","mkdirp","native","manual","nativeSync","manualSync","promisify","fs","parseInt","mkdir","stat","platform","process","env","__TESTING_MKDIRP_PLATFORM__","parse","assign","badWinChars","findMade","findMadeSync","versArr","__TESTING_MKDIRP_NODE_VERSION__","hasNative","activeEnvironmentId","sendRequest","activeRequestId","id","reqId","requestId","reporters","Base","super","description","pending","passes","on","Runner","constants","EVENT_TEST_END","EVENT_TEST_PASS","EVENT_TEST_FAIL","EVENT_TEST_PENDING","once","EVENT_RUN_END","clean","runnable","errorJSON","title","fullTitle","duration","currentRetry","cleanCycles","cache","error"],"mappings":"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","file":"index.js","sourcesContent":[" \t// The module cache\n \tvar installedModules = {};\n\n \t// The require function\n \tfunction __webpack_require__(moduleId) {\n\n \t\t// Check if module is in cache\n \t\tif(installedModules[moduleId]) {\n \t\t\treturn installedModules[moduleId].exports;\n \t\t}\n \t\t// Create a new module (and put it into the cache)\n \t\tvar module = installedModules[moduleId] = {\n \t\t\ti: moduleId,\n \t\t\tl: false,\n \t\t\texports: {}\n \t\t};\n\n \t\t// Execute the module function\n \t\tmodules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\n \t\t// Flag the module as loaded\n \t\tmodule.l = true;\n\n \t\t// Return the exports of the module\n \t\treturn module.exports;\n \t}\n\n\n \t// expose the modules object (__webpack_modules__)\n \t__webpack_require__.m = modules;\n\n \t// expose the module cache\n \t__webpack_require__.c = installedModules;\n\n \t// define getter function for harmony exports\n \t__webpack_require__.d = function(exports, name, getter) {\n \t\tif(!__webpack_require__.o(exports, name)) {\n \t\t\tObject.defineProperty(exports, name, { enumerable: true, get: getter });\n \t\t}\n \t};\n\n \t// define __esModule on exports\n \t__webpack_require__.r = function(exports) {\n \t\tif(typeof Symbol !== 'undefined' && Symbol.toStringTag) {\n \t\t\tObject.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });\n \t\t}\n \t\tObject.defineProperty(exports, '__esModule', { value: true });\n \t};\n\n \t// create a fake namespace object\n \t// mode & 1: value is a module id, require it\n \t// mode & 2: merge all properties of value into the ns\n \t// mode & 4: return value when already ns object\n \t// mode & 8|1: behave like require\n \t__webpack_require__.t = function(value, mode) {\n \t\tif(mode & 1) value = __webpack_require__(value);\n \t\tif(mode & 8) return value;\n \t\tif((mode & 4) && typeof value === 'object' && value && value.__esModule) return value;\n \t\tvar ns = Object.create(null);\n \t\t__webpack_require__.r(ns);\n \t\tObject.defineProperty(ns, 'default', { enumerable: true, value: value });\n \t\tif(mode & 2 && typeof value != 'string') for(var key in value) __webpack_require__.d(ns, key, function(key) { return value[key]; }.bind(null, key));\n \t\treturn ns;\n \t};\n\n \t// getDefaultExport function for compatibility with non-harmony modules\n \t__webpack_require__.n = function(module) {\n \t\tvar getter = module && module.__esModule ?\n \t\t\tfunction getDefault() { return module['default']; } :\n \t\t\tfunction getModuleExports() { return module; };\n \t\t__webpack_require__.d(getter, 'a', getter);\n \t\treturn getter;\n \t};\n\n \t// Object.prototype.hasOwnProperty.call\n \t__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };\n\n \t// __webpack_public_path__\n \t__webpack_require__.p = \"\";\n\n\n \t// Load entry module and return exports\n \treturn __webpack_require__(__webpack_require__.s = 19);\n","/*!\n * Chai - flag utility\n * Copyright(c) 2012-2014 Jake Luer <jake@alogicalparadox.com>\n * MIT Licensed\n */\n\n/**\n * ### .flag(object, key, [value])\n *\n * Get or set a flag value on an object. If a\n * value is provided it will be set, else it will\n * return the currently set value or `undefined` if\n * the value is not set.\n *\n *     utils.flag(this, 'foo', 'bar'); // setter\n *     utils.flag(this, 'foo'); // getter, returns `bar`\n *\n * @param {Object} object constructed Assertion\n * @param {String} key\n * @param {Mixed} value (optional)\n * @namespace Utils\n * @name flag\n * @api private\n */\n\nmodule.exports = function flag(obj, key, value) {\n  var flags = obj.__flags || (obj.__flags = Object.create(null));\n  if (arguments.length === 3) {\n    flags[key] = value;\n  } else {\n    return flags[key];\n  }\n};\n","/*!\n * chai\n * Copyright(c) 2011-2014 Jake Luer <jake@alogicalparadox.com>\n * MIT Licensed\n */\n\nvar used = [];\n\n/*!\n * Chai version\n */\n\nexports.version = '4.3.3';\n\n/*!\n * Assertion Error\n */\n\nexports.AssertionError = require('assertion-error');\n\n/*!\n * Utils for plugins (not exported)\n */\n\nvar util = require('./chai/utils');\n\n/**\n * # .use(function)\n *\n * Provides a way to extend the internals of Chai.\n *\n * @param {Function}\n * @returns {this} for chaining\n * @api public\n */\n\nexports.use = function (fn) {\n  if (!~used.indexOf(fn)) {\n    fn(exports, util);\n    used.push(fn);\n  }\n\n  return exports;\n};\n\n/*!\n * Utility Functions\n */\n\nexports.util = util;\n\n/*!\n * Configuration\n */\n\nvar config = require('./chai/config');\nexports.config = config;\n\n/*!\n * Primary `Assertion` prototype\n */\n\nvar assertion = require('./chai/assertion');\nexports.use(assertion);\n\n/*!\n * Core Assertions\n */\n\nvar core = require('./chai/core/assertions');\nexports.use(core);\n\n/*!\n * Expect interface\n */\n\nvar expect = require('./chai/interface/expect');\nexports.use(expect);\n\n/*!\n * Should interface\n */\n\nvar should = require('./chai/interface/should');\nexports.use(should);\n\n/*!\n * Assert interface\n */\n\nvar assert = require('./chai/interface/assert');\nexports.use(assert);\n","/*!\n * Chai - transferFlags utility\n * Copyright(c) 2012-2014 Jake Luer <jake@alogicalparadox.com>\n * MIT Licensed\n */\n\n/**\n * ### .transferFlags(assertion, object, includeAll = true)\n *\n * Transfer all the flags for `assertion` to `object`. If\n * `includeAll` is set to `false`, then the base Chai\n * assertion flags (namely `object`, `ssfi`, `lockSsfi`,\n * and `message`) will not be transferred.\n *\n *\n *     var newAssertion = new Assertion();\n *     utils.transferFlags(assertion, newAssertion);\n *\n *     var anotherAssertion = new Assertion(myObj);\n *     utils.transferFlags(assertion, anotherAssertion, false);\n *\n * @param {Assertion} assertion the assertion to transfer the flags from\n * @param {Object} object the object to transfer the flags to; usually a new assertion\n * @param {Boolean} includeAll\n * @namespace Utils\n * @name transferFlags\n * @api private\n */\n\nmodule.exports = function transferFlags(assertion, object, includeAll) {\n  var flags = assertion.__flags || (assertion.__flags = Object.create(null));\n\n  if (!object.__flags) {\n    object.__flags = Object.create(null);\n  }\n\n  includeAll = arguments.length === 3 ? includeAll : true;\n\n  for (var flag in flags) {\n    if (includeAll ||\n        (flag !== 'object' && flag !== 'ssfi' && flag !== 'lockSsfi' && flag != 'message')) {\n      object.__flags[flag] = flags[flag];\n    }\n  }\n};\n","module.exports = {\n\n  /**\n   * ### config.includeStack\n   *\n   * User configurable property, influences whether stack trace\n   * is included in Assertion error message. Default of false\n   * suppresses stack trace in the error message.\n   *\n   *     chai.config.includeStack = true;  // enable stack on error\n   *\n   * @param {Boolean}\n   * @api public\n   */\n\n  includeStack: false,\n\n  /**\n   * ### config.showDiff\n   *\n   * User configurable property, influences whether or not\n   * the `showDiff` flag should be included in the thrown\n   * AssertionErrors. `false` will always be `false`; `true`\n   * will be true when the assertion has requested a diff\n   * be shown.\n   *\n   * @param {Boolean}\n   * @api public\n   */\n\n  showDiff: true,\n\n  /**\n   * ### config.truncateThreshold\n   *\n   * User configurable property, sets length threshold for actual and\n   * expected values in assertion errors. If this threshold is exceeded, for\n   * example for large data structures, the value is replaced with something\n   * like `[ Array(3) ]` or `{ Object (prop1, prop2) }`.\n   *\n   * Set it to zero if you want to disable truncating altogether.\n   *\n   * This is especially userful when doing assertions on arrays: having this\n   * set to a reasonable large value makes the failure messages readily\n   * inspectable.\n   *\n   *     chai.config.truncateThreshold = 0;  // disable truncating\n   *\n   * @param {Number}\n   * @api public\n   */\n\n  truncateThreshold: 40,\n\n  /**\n   * ### config.useProxy\n   *\n   * User configurable property, defines if chai will use a Proxy to throw\n   * an error when a non-existent property is read, which protects users\n   * from typos when using property-based assertions.\n   *\n   * Set it to false if you want to disable this feature.\n   *\n   *     chai.config.useProxy = false;  // disable use of Proxy\n   *\n   * This feature is automatically disabled regardless of this config value\n   * in environments that don't support proxies.\n   *\n   * @param {Boolean}\n   * @api public\n   */\n\n  useProxy: true,\n\n  /**\n   * ### config.proxyExcludedKeys\n   *\n   * User configurable property, defines which properties should be ignored\n   * instead of throwing an error if they do not exist on the assertion.\n   * This is only applied if the environment Chai is running in supports proxies and\n   * if the `useProxy` configuration setting is enabled.\n   * By default, `then` and `inspect` will not throw an error if they do not exist on the\n   * assertion object because the `.inspect` property is read by `util.inspect` (for example, when\n   * using `console.log` on the assertion object) and `.then` is necessary for promise type-checking.\n   *\n   *     // By default these keys will not throw an error if they do not exist on the assertion object\n   *     chai.config.proxyExcludedKeys = ['then', 'inspect'];\n   *\n   * @param {Array}\n   * @api public\n   */\n\n  proxyExcludedKeys: ['then', 'catch', 'inspect', 'toJSON']\n};\n","module.exports = require(\"path\");","module.exports = require(\"fs\");","(function (global, factory) {\n\ttypeof exports === 'object' && typeof module !== 'undefined' ? module.exports = factory() :\n\ttypeof define === 'function' && define.amd ? define(factory) :\n\t(global.typeDetect = factory());\n}(this, (function () { 'use strict';\n\n/* !\n * type-detect\n * Copyright(c) 2013 jake luer <jake@alogicalparadox.com>\n * MIT Licensed\n */\nvar promiseExists = typeof Promise === 'function';\n\n/* eslint-disable no-undef */\nvar globalObject = typeof self === 'object' ? self : global; // eslint-disable-line id-blacklist\n\nvar symbolExists = typeof Symbol !== 'undefined';\nvar mapExists = typeof Map !== 'undefined';\nvar setExists = typeof Set !== 'undefined';\nvar weakMapExists = typeof WeakMap !== 'undefined';\nvar weakSetExists = typeof WeakSet !== 'undefined';\nvar dataViewExists = typeof DataView !== 'undefined';\nvar symbolIteratorExists = symbolExists && typeof Symbol.iterator !== 'undefined';\nvar symbolToStringTagExists = symbolExists && typeof Symbol.toStringTag !== 'undefined';\nvar setEntriesExists = setExists && typeof Set.prototype.entries === 'function';\nvar mapEntriesExists = mapExists && typeof Map.prototype.entries === 'function';\nvar setIteratorPrototype = setEntriesExists && Object.getPrototypeOf(new Set().entries());\nvar mapIteratorPrototype = mapEntriesExists && Object.getPrototypeOf(new Map().entries());\nvar arrayIteratorExists = symbolIteratorExists && typeof Array.prototype[Symbol.iterator] === 'function';\nvar arrayIteratorPrototype = arrayIteratorExists && Object.getPrototypeOf([][Symbol.iterator]());\nvar stringIteratorExists = symbolIteratorExists && typeof String.prototype[Symbol.iterator] === 'function';\nvar stringIteratorPrototype = stringIteratorExists && Object.getPrototypeOf(''[Symbol.iterator]());\nvar toStringLeftSliceLength = 8;\nvar toStringRightSliceLength = -1;\n/**\n * ### typeOf (obj)\n *\n * Uses `Object.prototype.toString` to determine the type of an object,\n * normalising behaviour across engine versions & well optimised.\n *\n * @param {Mixed} object\n * @return {String} object type\n * @api public\n */\nfunction typeDetect(obj) {\n  /* ! Speed optimisation\n   * Pre:\n   *   string literal     x 3,039,035 ops/sec ±1.62% (78 runs sampled)\n   *   boolean literal    x 1,424,138 ops/sec ±4.54% (75 runs sampled)\n   *   number literal     x 1,653,153 ops/sec ±1.91% (82 runs sampled)\n   *   undefined          x 9,978,660 ops/sec ±1.92% (75 runs sampled)\n   *   function           x 2,556,769 ops/sec ±1.73% (77 runs sampled)\n   * Post:\n   *   string literal     x 38,564,796 ops/sec ±1.15% (79 runs sampled)\n   *   boolean literal    x 31,148,940 ops/sec ±1.10% (79 runs sampled)\n   *   number literal     x 32,679,330 ops/sec ±1.90% (78 runs sampled)\n   *   undefined          x 32,363,368 ops/sec ±1.07% (82 runs sampled)\n   *   function           x 31,296,870 ops/sec ±0.96% (83 runs sampled)\n   */\n  var typeofObj = typeof obj;\n  if (typeofObj !== 'object') {\n    return typeofObj;\n  }\n\n  /* ! Speed optimisation\n   * Pre:\n   *   null               x 28,645,765 ops/sec ±1.17% (82 runs sampled)\n   * Post:\n   *   null               x 36,428,962 ops/sec ±1.37% (84 runs sampled)\n   */\n  if (obj === null) {\n    return 'null';\n  }\n\n  /* ! Spec Conformance\n   * Test: `Object.prototype.toString.call(window)``\n   *  - Node === \"[object global]\"\n   *  - Chrome === \"[object global]\"\n   *  - Firefox === \"[object Window]\"\n   *  - PhantomJS === \"[object Window]\"\n   *  - Safari === \"[object Window]\"\n   *  - IE 11 === \"[object Window]\"\n   *  - IE Edge === \"[object Window]\"\n   * Test: `Object.prototype.toString.call(this)``\n   *  - Chrome Worker === \"[object global]\"\n   *  - Firefox Worker === \"[object DedicatedWorkerGlobalScope]\"\n   *  - Safari Worker === \"[object DedicatedWorkerGlobalScope]\"\n   *  - IE 11 Worker === \"[object WorkerGlobalScope]\"\n   *  - IE Edge Worker === \"[object WorkerGlobalScope]\"\n   */\n  if (obj === globalObject) {\n    return 'global';\n  }\n\n  /* ! Speed optimisation\n   * Pre:\n   *   array literal      x 2,888,352 ops/sec ±0.67% (82 runs sampled)\n   * Post:\n   *   array literal      x 22,479,650 ops/sec ±0.96% (81 runs sampled)\n   */\n  if (\n    Array.isArray(obj) &&\n    (symbolToStringTagExists === false || !(Symbol.toStringTag in obj))\n  ) {\n    return 'Array';\n  }\n\n  // Not caching existence of `window` and related properties due to potential\n  // for `window` to be unset before tests in quasi-browser environments.\n  if (typeof window === 'object' && window !== null) {\n    /* ! Spec Conformance\n     * (https://html.spec.whatwg.org/multipage/browsers.html#location)\n     * WhatWG HTML$7.7.3 - The `Location` interface\n     * Test: `Object.prototype.toString.call(window.location)``\n     *  - IE <=11 === \"[object Object]\"\n     *  - IE Edge <=13 === \"[object Object]\"\n     */\n    if (typeof window.location === 'object' && obj === window.location) {\n      return 'Location';\n    }\n\n    /* ! Spec Conformance\n     * (https://html.spec.whatwg.org/#document)\n     * WhatWG HTML$3.1.1 - The `Document` object\n     * Note: Most browsers currently adher to the W3C DOM Level 2 spec\n     *       (https://www.w3.org/TR/DOM-Level-2-HTML/html.html#ID-26809268)\n     *       which suggests that browsers should use HTMLTableCellElement for\n     *       both TD and TH elements. WhatWG separates these.\n     *       WhatWG HTML states:\n     *         > For historical reasons, Window objects must also have a\n     *         > writable, configurable, non-enumerable property named\n     *         > HTMLDocument whose value is the Document interface object.\n     * Test: `Object.prototype.toString.call(document)``\n     *  - Chrome === \"[object HTMLDocument]\"\n     *  - Firefox === \"[object HTMLDocument]\"\n     *  - Safari === \"[object HTMLDocument]\"\n     *  - IE <=10 === \"[object Document]\"\n     *  - IE 11 === \"[object HTMLDocument]\"\n     *  - IE Edge <=13 === \"[object HTMLDocument]\"\n     */\n    if (typeof window.document === 'object' && obj === window.document) {\n      return 'Document';\n    }\n\n    if (typeof window.navigator === 'object') {\n      /* ! Spec Conformance\n       * (https://html.spec.whatwg.org/multipage/webappapis.html#mimetypearray)\n       * WhatWG HTML$8.6.1.5 - Plugins - Interface MimeTypeArray\n       * Test: `Object.prototype.toString.call(navigator.mimeTypes)``\n       *  - IE <=10 === \"[object MSMimeTypesCollection]\"\n       */\n      if (typeof window.navigator.mimeTypes === 'object' &&\n          obj === window.navigator.mimeTypes) {\n        return 'MimeTypeArray';\n      }\n\n      /* ! Spec Conformance\n       * (https://html.spec.whatwg.org/multipage/webappapis.html#pluginarray)\n       * WhatWG HTML$8.6.1.5 - Plugins - Interface PluginArray\n       * Test: `Object.prototype.toString.call(navigator.plugins)``\n       *  - IE <=10 === \"[object MSPluginsCollection]\"\n       */\n      if (typeof window.navigator.plugins === 'object' &&\n          obj === window.navigator.plugins) {\n        return 'PluginArray';\n      }\n    }\n\n    if ((typeof window.HTMLElement === 'function' ||\n        typeof window.HTMLElement === 'object') &&\n        obj instanceof window.HTMLElement) {\n      /* ! Spec Conformance\n      * (https://html.spec.whatwg.org/multipage/webappapis.html#pluginarray)\n      * WhatWG HTML$4.4.4 - The `blockquote` element - Interface `HTMLQuoteElement`\n      * Test: `Object.prototype.toString.call(document.createElement('blockquote'))``\n      *  - IE <=10 === \"[object HTMLBlockElement]\"\n      */\n      if (obj.tagName === 'BLOCKQUOTE') {\n        return 'HTMLQuoteElement';\n      }\n\n      /* ! Spec Conformance\n       * (https://html.spec.whatwg.org/#htmltabledatacellelement)\n       * WhatWG HTML$4.9.9 - The `td` element - Interface `HTMLTableDataCellElement`\n       * Note: Most browsers currently adher to the W3C DOM Level 2 spec\n       *       (https://www.w3.org/TR/DOM-Level-2-HTML/html.html#ID-82915075)\n       *       which suggests that browsers should use HTMLTableCellElement for\n       *       both TD and TH elements. WhatWG separates these.\n       * Test: Object.prototype.toString.call(document.createElement('td'))\n       *  - Chrome === \"[object HTMLTableCellElement]\"\n       *  - Firefox === \"[object HTMLTableCellElement]\"\n       *  - Safari === \"[object HTMLTableCellElement]\"\n       */\n      if (obj.tagName === 'TD') {\n        return 'HTMLTableDataCellElement';\n      }\n\n      /* ! Spec Conformance\n       * (https://html.spec.whatwg.org/#htmltableheadercellelement)\n       * WhatWG HTML$4.9.9 - The `td` element - Interface `HTMLTableHeaderCellElement`\n       * Note: Most browsers currently adher to the W3C DOM Level 2 spec\n       *       (https://www.w3.org/TR/DOM-Level-2-HTML/html.html#ID-82915075)\n       *       which suggests that browsers should use HTMLTableCellElement for\n       *       both TD and TH elements. WhatWG separates these.\n       * Test: Object.prototype.toString.call(document.createElement('th'))\n       *  - Chrome === \"[object HTMLTableCellElement]\"\n       *  - Firefox === \"[object HTMLTableCellElement]\"\n       *  - Safari === \"[object HTMLTableCellElement]\"\n       */\n      if (obj.tagName === 'TH') {\n        return 'HTMLTableHeaderCellElement';\n      }\n    }\n  }\n\n  /* ! Speed optimisation\n  * Pre:\n  *   Float64Array       x 625,644 ops/sec ±1.58% (80 runs sampled)\n  *   Float32Array       x 1,279,852 ops/sec ±2.91% (77 runs sampled)\n  *   Uint32Array        x 1,178,185 ops/sec ±1.95% (83 runs sampled)\n  *   Uint16Array        x 1,008,380 ops/sec ±2.25% (80 runs sampled)\n  *   Uint8Array         x 1,128,040 ops/sec ±2.11% (81 runs sampled)\n  *   Int32Array         x 1,170,119 ops/sec ±2.88% (80 runs sampled)\n  *   Int16Array         x 1,176,348 ops/sec ±5.79% (86 runs sampled)\n  *   Int8Array          x 1,058,707 ops/sec ±4.94% (77 runs sampled)\n  *   Uint8ClampedArray  x 1,110,633 ops/sec ±4.20% (80 runs sampled)\n  * Post:\n  *   Float64Array       x 7,105,671 ops/sec ±13.47% (64 runs sampled)\n  *   Float32Array       x 5,887,912 ops/sec ±1.46% (82 runs sampled)\n  *   Uint32Array        x 6,491,661 ops/sec ±1.76% (79 runs sampled)\n  *   Uint16Array        x 6,559,795 ops/sec ±1.67% (82 runs sampled)\n  *   Uint8Array         x 6,463,966 ops/sec ±1.43% (85 runs sampled)\n  *   Int32Array         x 5,641,841 ops/sec ±3.49% (81 runs sampled)\n  *   Int16Array         x 6,583,511 ops/sec ±1.98% (80 runs sampled)\n  *   Int8Array          x 6,606,078 ops/sec ±1.74% (81 runs sampled)\n  *   Uint8ClampedArray  x 6,602,224 ops/sec ±1.77% (83 runs sampled)\n  */\n  var stringTag = (symbolToStringTagExists && obj[Symbol.toStringTag]);\n  if (typeof stringTag === 'string') {\n    return stringTag;\n  }\n\n  var objPrototype = Object.getPrototypeOf(obj);\n  /* ! Speed optimisation\n  * Pre:\n  *   regex literal      x 1,772,385 ops/sec ±1.85% (77 runs sampled)\n  *   regex constructor  x 2,143,634 ops/sec ±2.46% (78 runs sampled)\n  * Post:\n  *   regex literal      x 3,928,009 ops/sec ±0.65% (78 runs sampled)\n  *   regex constructor  x 3,931,108 ops/sec ±0.58% (84 runs sampled)\n  */\n  if (objPrototype === RegExp.prototype) {\n    return 'RegExp';\n  }\n\n  /* ! Speed optimisation\n  * Pre:\n  *   date               x 2,130,074 ops/sec ±4.42% (68 runs sampled)\n  * Post:\n  *   date               x 3,953,779 ops/sec ±1.35% (77 runs sampled)\n  */\n  if (objPrototype === Date.prototype) {\n    return 'Date';\n  }\n\n  /* ! Spec Conformance\n   * (http://www.ecma-international.org/ecma-262/6.0/index.html#sec-promise.prototype-@@tostringtag)\n   * ES6$25.4.5.4 - Promise.prototype[@@toStringTag] should be \"Promise\":\n   * Test: `Object.prototype.toString.call(Promise.resolve())``\n   *  - Chrome <=47 === \"[object Object]\"\n   *  - Edge <=20 === \"[object Object]\"\n   *  - Firefox 29-Latest === \"[object Promise]\"\n   *  - Safari 7.1-Latest === \"[object Promise]\"\n   */\n  if (promiseExists && objPrototype === Promise.prototype) {\n    return 'Promise';\n  }\n\n  /* ! Speed optimisation\n  * Pre:\n  *   set                x 2,222,186 ops/sec ±1.31% (82 runs sampled)\n  * Post:\n  *   set                x 4,545,879 ops/sec ±1.13% (83 runs sampled)\n  */\n  if (setExists && objPrototype === Set.prototype) {\n    return 'Set';\n  }\n\n  /* ! Speed optimisation\n  * Pre:\n  *   map                x 2,396,842 ops/sec ±1.59% (81 runs sampled)\n  * Post:\n  *   map                x 4,183,945 ops/sec ±6.59% (82 runs sampled)\n  */\n  if (mapExists && objPrototype === Map.prototype) {\n    return 'Map';\n  }\n\n  /* ! Speed optimisation\n  * Pre:\n  *   weakset            x 1,323,220 ops/sec ±2.17% (76 runs sampled)\n  * Post:\n  *   weakset            x 4,237,510 ops/sec ±2.01% (77 runs sampled)\n  */\n  if (weakSetExists && objPrototype === WeakSet.prototype) {\n    return 'WeakSet';\n  }\n\n  /* ! Speed optimisation\n  * Pre:\n  *   weakmap            x 1,500,260 ops/sec ±2.02% (78 runs sampled)\n  * Post:\n  *   weakmap            x 3,881,384 ops/sec ±1.45% (82 runs sampled)\n  */\n  if (weakMapExists && objPrototype === WeakMap.prototype) {\n    return 'WeakMap';\n  }\n\n  /* ! Spec Conformance\n   * (http://www.ecma-international.org/ecma-262/6.0/index.html#sec-dataview.prototype-@@tostringtag)\n   * ES6$24.2.4.21 - DataView.prototype[@@toStringTag] should be \"DataView\":\n   * Test: `Object.prototype.toString.call(new DataView(new ArrayBuffer(1)))``\n   *  - Edge <=13 === \"[object Object]\"\n   */\n  if (dataViewExists && objPrototype === DataView.prototype) {\n    return 'DataView';\n  }\n\n  /* ! Spec Conformance\n   * (http://www.ecma-international.org/ecma-262/6.0/index.html#sec-%mapiteratorprototype%-@@tostringtag)\n   * ES6$23.1.5.2.2 - %MapIteratorPrototype%[@@toStringTag] should be \"Map Iterator\":\n   * Test: `Object.prototype.toString.call(new Map().entries())``\n   *  - Edge <=13 === \"[object Object]\"\n   */\n  if (mapExists && objPrototype === mapIteratorPrototype) {\n    return 'Map Iterator';\n  }\n\n  /* ! Spec Conformance\n   * (http://www.ecma-international.org/ecma-262/6.0/index.html#sec-%setiteratorprototype%-@@tostringtag)\n   * ES6$23.2.5.2.2 - %SetIteratorPrototype%[@@toStringTag] should be \"Set Iterator\":\n   * Test: `Object.prototype.toString.call(new Set().entries())``\n   *  - Edge <=13 === \"[object Object]\"\n   */\n  if (setExists && objPrototype === setIteratorPrototype) {\n    return 'Set Iterator';\n  }\n\n  /* ! Spec Conformance\n   * (http://www.ecma-international.org/ecma-262/6.0/index.html#sec-%arrayiteratorprototype%-@@tostringtag)\n   * ES6$22.1.5.2.2 - %ArrayIteratorPrototype%[@@toStringTag] should be \"Array Iterator\":\n   * Test: `Object.prototype.toString.call([][Symbol.iterator]())``\n   *  - Edge <=13 === \"[object Object]\"\n   */\n  if (arrayIteratorExists && objPrototype === arrayIteratorPrototype) {\n    return 'Array Iterator';\n  }\n\n  /* ! Spec Conformance\n   * (http://www.ecma-international.org/ecma-262/6.0/index.html#sec-%stringiteratorprototype%-@@tostringtag)\n   * ES6$21.1.5.2.2 - %StringIteratorPrototype%[@@toStringTag] should be \"String Iterator\":\n   * Test: `Object.prototype.toString.call(''[Symbol.iterator]())``\n   *  - Edge <=13 === \"[object Object]\"\n   */\n  if (stringIteratorExists && objPrototype === stringIteratorPrototype) {\n    return 'String Iterator';\n  }\n\n  /* ! Speed optimisation\n  * Pre:\n  *   object from null   x 2,424,320 ops/sec ±1.67% (76 runs sampled)\n  * Post:\n  *   object from null   x 5,838,000 ops/sec ±0.99% (84 runs sampled)\n  */\n  if (objPrototype === null) {\n    return 'Object';\n  }\n\n  return Object\n    .prototype\n    .toString\n    .call(obj)\n    .slice(toStringLeftSliceLength, toStringRightSliceLength);\n}\n\nreturn typeDetect;\n\n})));\n","var config = require('../config');\n\n/*!\n * Chai - isProxyEnabled helper\n * Copyright(c) 2012-2014 Jake Luer <jake@alogicalparadox.com>\n * MIT Licensed\n */\n\n/**\n * ### .isProxyEnabled()\n *\n * Helper function to check if Chai's proxy protection feature is enabled. If\n * proxies are unsupported or disabled via the user's Chai config, then return\n * false. Otherwise, return true.\n *\n * @namespace Utils\n * @name isProxyEnabled\n */\n\nmodule.exports = function isProxyEnabled() {\n  return config.useProxy &&\n    typeof Proxy !== 'undefined' &&\n    typeof Reflect !== 'undefined';\n};\n","var fnLengthDesc = Object.getOwnPropertyDescriptor(function () {}, 'length');\n\n/*!\n * Chai - addLengthGuard utility\n * Copyright(c) 2012-2014 Jake Luer <jake@alogicalparadox.com>\n * MIT Licensed\n */\n\n/**\n * ### .addLengthGuard(fn, assertionName, isChainable)\n *\n * Define `length` as a getter on the given uninvoked method assertion. The\n * getter acts as a guard against chaining `length` directly off of an uninvoked\n * method assertion, which is a problem because it references `function`'s\n * built-in `length` property instead of Chai's `length` assertion. When the\n * getter catches the user making this mistake, it throws an error with a\n * helpful message.\n *\n * There are two ways in which this mistake can be made. The first way is by\n * chaining the `length` assertion directly off of an uninvoked chainable\n * method. In this case, Chai suggests that the user use `lengthOf` instead. The\n * second way is by chaining the `length` assertion directly off of an uninvoked\n * non-chainable method. Non-chainable methods must be invoked prior to\n * chaining. In this case, Chai suggests that the user consult the docs for the\n * given assertion.\n *\n * If the `length` property of functions is unconfigurable, then return `fn`\n * without modification.\n *\n * Note that in ES6, the function's `length` property is configurable, so once\n * support for legacy environments is dropped, Chai's `length` property can\n * replace the built-in function's `length` property, and this length guard will\n * no longer be necessary. In the mean time, maintaining consistency across all\n * environments is the priority.\n *\n * @param {Function} fn\n * @param {String} assertionName\n * @param {Boolean} isChainable\n * @namespace Utils\n * @name addLengthGuard\n */\n\nmodule.exports = function addLengthGuard (fn, assertionName, isChainable) {\n  if (!fnLengthDesc.configurable) return fn;\n\n  Object.defineProperty(fn, 'length', {\n    get: function () {\n      if (isChainable) {\n        throw Error('Invalid Chai property: ' + assertionName + '.length. Due' +\n          ' to a compatibility issue, \"length\" cannot directly follow \"' +\n          assertionName + '\". Use \"' + assertionName + '.lengthOf\" instead.');\n      }\n\n      throw Error('Invalid Chai property: ' + assertionName + '.length. See' +\n        ' docs for proper usage of \"' + assertionName + '\".');\n    }\n  });\n\n  return fn;\n};\n","var config = require('../config');\nvar flag = require('./flag');\nvar getProperties = require('./getProperties');\nvar isProxyEnabled = require('./isProxyEnabled');\n\n/*!\n * Chai - proxify utility\n * Copyright(c) 2012-2014 Jake Luer <jake@alogicalparadox.com>\n * MIT Licensed\n */\n\n/**\n * ### .proxify(object)\n *\n * Return a proxy of given object that throws an error when a non-existent\n * property is read. By default, the root cause is assumed to be a misspelled\n * property, and thus an attempt is made to offer a reasonable suggestion from\n * the list of existing properties. However, if a nonChainableMethodName is\n * provided, then the root cause is instead a failure to invoke a non-chainable\n * method prior to reading the non-existent property.\n *\n * If proxies are unsupported or disabled via the user's Chai config, then\n * return object without modification.\n *\n * @param {Object} obj\n * @param {String} nonChainableMethodName\n * @namespace Utils\n * @name proxify\n */\n\nvar builtins = ['__flags', '__methods', '_obj', 'assert'];\n\nmodule.exports = function proxify(obj, nonChainableMethodName) {\n  if (!isProxyEnabled()) return obj;\n\n  return new Proxy(obj, {\n    get: function proxyGetter(target, property) {\n      // This check is here because we should not throw errors on Symbol properties\n      // such as `Symbol.toStringTag`.\n      // The values for which an error should be thrown can be configured using\n      // the `config.proxyExcludedKeys` setting.\n      if (typeof property === 'string' &&\n          config.proxyExcludedKeys.indexOf(property) === -1 &&\n          !Reflect.has(target, property)) {\n        // Special message for invalid property access of non-chainable methods.\n        if (nonChainableMethodName) {\n          throw Error('Invalid Chai property: ' + nonChainableMethodName + '.' +\n            property + '. See docs for proper usage of \"' +\n            nonChainableMethodName + '\".');\n        }\n\n        // If the property is reasonably close to an existing Chai property,\n        // suggest that property to the user. Only suggest properties with a\n        // distance less than 4.\n        var suggestion = null;\n        var suggestionDistance = 4;\n        getProperties(target).forEach(function(prop) {\n          if (\n            !Object.prototype.hasOwnProperty(prop) &&\n            builtins.indexOf(prop) === -1\n          ) {\n            var dist = stringDistanceCapped(\n              property,\n              prop,\n              suggestionDistance\n            );\n            if (dist < suggestionDistance) {\n              suggestion = prop;\n              suggestionDistance = dist;\n            }\n          }\n        });\n\n        if (suggestion !== null) {\n          throw Error('Invalid Chai property: ' + property +\n            '. Did you mean \"' + suggestion + '\"?');\n        } else {\n          throw Error('Invalid Chai property: ' + property);\n        }\n      }\n\n      // Use this proxy getter as the starting point for removing implementation\n      // frames from the stack trace of a failed assertion. For property\n      // assertions, this prevents the proxy getter from showing up in the stack\n      // trace since it's invoked before the property getter. For method and\n      // chainable method assertions, this flag will end up getting changed to\n      // the method wrapper, which is good since this frame will no longer be in\n      // the stack once the method is invoked. Note that Chai builtin assertion\n      // properties such as `__flags` are skipped since this is only meant to\n      // capture the starting point of an assertion. This step is also skipped\n      // if the `lockSsfi` flag is set, thus indicating that this assertion is\n      // being called from within another assertion. In that case, the `ssfi`\n      // flag is already set to the outer assertion's starting point.\n      if (builtins.indexOf(property) === -1 && !flag(target, 'lockSsfi')) {\n        flag(target, 'ssfi', proxyGetter);\n      }\n\n      return Reflect.get(target, property);\n    }\n  });\n};\n\n/**\n * # stringDistanceCapped(strA, strB, cap)\n * Return the Levenshtein distance between two strings, but no more than cap.\n * @param {string} strA\n * @param {string} strB\n * @param {number} number\n * @return {number} min(string distance between strA and strB, cap)\n * @api private\n */\n\nfunction stringDistanceCapped(strA, strB, cap) {\n  if (Math.abs(strA.length - strB.length) >= cap) {\n    return cap;\n  }\n\n  var memo = [];\n  // `memo` is a two-dimensional array containing distances.\n  // memo[i][j] is the distance between strA.slice(0, i) and\n  // strB.slice(0, j).\n  for (var i = 0; i <= strA.length; i++) {\n    memo[i] = Array(strB.length + 1).fill(0);\n    memo[i][0] = i;\n  }\n  for (var j = 0; j < strB.length; j++) {\n    memo[0][j] = j;\n  }\n\n  for (var i = 1; i <= strA.length; i++) {\n    var ch = strA.charCodeAt(i - 1);\n    for (var j = 1; j <= strB.length; j++) {\n      if (Math.abs(i - j) >= cap) {\n        memo[i][j] = cap;\n        continue;\n      }\n      memo[i][j] = Math.min(\n        memo[i - 1][j] + 1,\n        memo[i][j - 1] + 1,\n        memo[i - 1][j - 1] +\n          (ch === strB.charCodeAt(j - 1) ? 0 : 1)\n      );\n    }\n  }\n\n  return memo[strA.length][strB.length];\n}\n","// This is (almost) directly from Node.js utils\n// https://github.com/joyent/node/blob/f8c335d0caf47f16d31413f89aa28eda3878e3aa/lib/util.js\n\nvar getName = require('get-func-name');\nvar getProperties = require('./getProperties');\nvar getEnumerableProperties = require('./getEnumerableProperties');\nvar config = require('../config');\n\nmodule.exports = inspect;\n\n/**\n * ### .inspect(obj, [showHidden], [depth], [colors])\n *\n * Echoes the value of a value. Tries to print the value out\n * in the best way possible given the different types.\n *\n * @param {Object} obj The object to print out.\n * @param {Boolean} showHidden Flag that shows hidden (not enumerable)\n *    properties of objects. Default is false.\n * @param {Number} depth Depth in which to descend in object. Default is 2.\n * @param {Boolean} colors Flag to turn on ANSI escape codes to color the\n *    output. Default is false (no coloring).\n * @namespace Utils\n * @name inspect\n */\nfunction inspect(obj, showHidden, depth, colors) {\n  var ctx = {\n    showHidden: showHidden,\n    seen: [],\n    stylize: function (str) { return str; }\n  };\n  return formatValue(ctx, obj, (typeof depth === 'undefined' ? 2 : depth));\n}\n\n// Returns true if object is a DOM element.\nvar isDOMElement = function (object) {\n  if (typeof HTMLElement === 'object') {\n    return object instanceof HTMLElement;\n  } else {\n    return object &&\n      typeof object === 'object' &&\n      'nodeType' in object &&\n      object.nodeType === 1 &&\n      typeof object.nodeName === 'string';\n  }\n};\n\nfunction formatValue(ctx, value, recurseTimes) {\n  // Provide a hook for user-specified inspect functions.\n  // Check that value is an object with an inspect function on it\n  if (value && typeof value.inspect === 'function' &&\n      // Filter out the util module, it's inspect function is special\n      value.inspect !== exports.inspect &&\n      // Also filter out any prototype objects using the circular check.\n      !(value.constructor && value.constructor.prototype === value)) {\n    var ret = value.inspect(recurseTimes, ctx);\n    if (typeof ret !== 'string') {\n      ret = formatValue(ctx, ret, recurseTimes);\n    }\n    return ret;\n  }\n\n  // Primitive types cannot have properties\n  var primitive = formatPrimitive(ctx, value);\n  if (primitive) {\n    return primitive;\n  }\n\n  // If this is a DOM element, try to get the outer HTML.\n  if (isDOMElement(value)) {\n    if ('outerHTML' in value) {\n      return value.outerHTML;\n      // This value does not have an outerHTML attribute,\n      //   it could still be an XML element\n    } else {\n      // Attempt to serialize it\n      try {\n        if (document.xmlVersion) {\n          var xmlSerializer = new XMLSerializer();\n          return xmlSerializer.serializeToString(value);\n        } else {\n          // Firefox 11- do not support outerHTML\n          //   It does, however, support innerHTML\n          //   Use the following to render the element\n          var ns = \"http://www.w3.org/1999/xhtml\";\n          var container = document.createElementNS(ns, '_');\n\n          container.appendChild(value.cloneNode(false));\n          var html = container.innerHTML\n            .replace('><', '>' + value.innerHTML + '<');\n          container.innerHTML = '';\n          return html;\n        }\n      } catch (err) {\n        // This could be a non-native DOM implementation,\n        //   continue with the normal flow:\n        //   printing the element as if it is an object.\n      }\n    }\n  }\n\n  // Look up the keys of the object.\n  var visibleKeys = getEnumerableProperties(value);\n  var keys = ctx.showHidden ? getProperties(value) : visibleKeys;\n\n  var name, nameSuffix;\n\n  // Some type of object without properties can be shortcut.\n  // In IE, errors have a single `stack` property, or if they are vanilla `Error`,\n  // a `stack` plus `description` property; ignore those for consistency.\n  if (keys.length === 0 || (isError(value) && (\n      (keys.length === 1 && keys[0] === 'stack') ||\n      (keys.length === 2 && keys[0] === 'description' && keys[1] === 'stack')\n     ))) {\n    if (typeof value === 'function') {\n      name = getName(value);\n      nameSuffix = name ? ': ' + name : '';\n      return ctx.stylize('[Function' + nameSuffix + ']', 'special');\n    }\n    if (isRegExp(value)) {\n      return ctx.stylize(RegExp.prototype.toString.call(value), 'regexp');\n    }\n    if (isDate(value)) {\n      return ctx.stylize(Date.prototype.toUTCString.call(value), 'date');\n    }\n    if (isError(value)) {\n      return formatError(value);\n    }\n  }\n\n  var base = ''\n    , array = false\n    , typedArray = false\n    , braces = ['{', '}'];\n\n  if (isTypedArray(value)) {\n    typedArray = true;\n    braces = ['[', ']'];\n  }\n\n  // Make Array say that they are Array\n  if (isArray(value)) {\n    array = true;\n    braces = ['[', ']'];\n  }\n\n  // Make functions say that they are functions\n  if (typeof value === 'function') {\n    name = getName(value);\n    nameSuffix = name ? ': ' + name : '';\n    base = ' [Function' + nameSuffix + ']';\n  }\n\n  // Make RegExps say that they are RegExps\n  if (isRegExp(value)) {\n    base = ' ' + RegExp.prototype.toString.call(value);\n  }\n\n  // Make dates with properties first say the date\n  if (isDate(value)) {\n    base = ' ' + Date.prototype.toUTCString.call(value);\n  }\n\n  // Make error with message first say the error\n  if (isError(value)) {\n    return formatError(value);\n  }\n\n  if (keys.length === 0 && (!array || value.length == 0)) {\n    return braces[0] + base + braces[1];\n  }\n\n  if (recurseTimes < 0) {\n    if (isRegExp(value)) {\n      return ctx.stylize(RegExp.prototype.toString.call(value), 'regexp');\n    } else {\n      return ctx.stylize('[Object]', 'special');\n    }\n  }\n\n  ctx.seen.push(value);\n\n  var output;\n  if (array) {\n    output = formatArray(ctx, value, recurseTimes, visibleKeys, keys);\n  } else if (typedArray) {\n    return formatTypedArray(value);\n  } else {\n    output = keys.map(function(key) {\n      return formatProperty(ctx, value, recurseTimes, visibleKeys, key, array);\n    });\n  }\n\n  ctx.seen.pop();\n\n  return reduceToSingleString(output, base, braces);\n}\n\nfunction formatPrimitive(ctx, value) {\n  switch (typeof value) {\n    case 'undefined':\n      return ctx.stylize('undefined', 'undefined');\n\n    case 'string':\n      var simple = '\\'' + JSON.stringify(value).replace(/^\"|\"$/g, '')\n                                               .replace(/'/g, \"\\\\'\")\n                                               .replace(/\\\\\"/g, '\"') + '\\'';\n      return ctx.stylize(simple, 'string');\n\n    case 'number':\n      if (value === 0 && (1/value) === -Infinity) {\n        return ctx.stylize('-0', 'number');\n      }\n      return ctx.stylize('' + value, 'number');\n\n    case 'boolean':\n      return ctx.stylize('' + value, 'boolean');\n\n    case 'symbol':\n      return ctx.stylize(value.toString(), 'symbol');\n\n    case 'bigint':\n      return ctx.stylize(value.toString() + 'n', 'bigint');\n  }\n  // For some reason typeof null is \"object\", so special case here.\n  if (value === null) {\n    return ctx.stylize('null', 'null');\n  }\n}\n\nfunction formatError(value) {\n  return '[' + Error.prototype.toString.call(value) + ']';\n}\n\nfunction formatArray(ctx, value, recurseTimes, visibleKeys, keys) {\n  var output = [];\n  for (var i = 0, l = value.length; i < l; ++i) {\n    if (Object.prototype.hasOwnProperty.call(value, String(i))) {\n      output.push(formatProperty(ctx, value, recurseTimes, visibleKeys,\n          String(i), true));\n    } else {\n      output.push('');\n    }\n  }\n\n  keys.forEach(function(key) {\n    if (!key.match(/^\\d+$/)) {\n      output.push(formatProperty(ctx, value, recurseTimes, visibleKeys,\n          key, true));\n    }\n  });\n  return output;\n}\n\nfunction formatTypedArray(value) {\n  var str = '[ ';\n\n  for (var i = 0; i < value.length; ++i) {\n    if (str.length >= config.truncateThreshold - 7) {\n      str += '...';\n      break;\n    }\n    str += value[i] + ', ';\n  }\n  str += ' ]';\n\n  // Removing trailing `, ` if the array was not truncated\n  if (str.indexOf(',  ]') !== -1) {\n    str = str.replace(',  ]', ' ]');\n  }\n\n  return str;\n}\n\nfunction formatProperty(ctx, value, recurseTimes, visibleKeys, key, array) {\n  var name;\n  var propDescriptor = Object.getOwnPropertyDescriptor(value, key);\n  var str;\n\n  if (propDescriptor) {\n    if (propDescriptor.get) {\n      if (propDescriptor.set) {\n        str = ctx.stylize('[Getter/Setter]', 'special');\n      } else {\n        str = ctx.stylize('[Getter]', 'special');\n      }\n    } else {\n      if (propDescriptor.set) {\n        str = ctx.stylize('[Setter]', 'special');\n      }\n    }\n  }\n  if (visibleKeys.indexOf(key) < 0) {\n    name = '[' + key + ']';\n  }\n  if (!str) {\n    if (ctx.seen.indexOf(value[key]) < 0) {\n      if (recurseTimes === null) {\n        str = formatValue(ctx, value[key], null);\n      } else {\n        str = formatValue(ctx, value[key], recurseTimes - 1);\n      }\n      if (str.indexOf('\\n') > -1) {\n        if (array) {\n          str = str.split('\\n').map(function(line) {\n            return '  ' + line;\n          }).join('\\n').substr(2);\n        } else {\n          str = '\\n' + str.split('\\n').map(function(line) {\n            return '   ' + line;\n          }).join('\\n');\n        }\n      }\n    } else {\n      str = ctx.stylize('[Circular]', 'special');\n    }\n  }\n  if (typeof name === 'undefined') {\n    if (array && key.match(/^\\d+$/)) {\n      return str;\n    }\n    name = JSON.stringify('' + key);\n    if (name.match(/^\"([a-zA-Z_][a-zA-Z_0-9]*)\"$/)) {\n      name = name.substr(1, name.length - 2);\n      name = ctx.stylize(name, 'name');\n    } else {\n      name = name.replace(/'/g, \"\\\\'\")\n                 .replace(/\\\\\"/g, '\"')\n                 .replace(/(^\"|\"$)/g, \"'\");\n      name = ctx.stylize(name, 'string');\n    }\n  }\n\n  return name + ': ' + str;\n}\n\nfunction reduceToSingleString(output, base, braces) {\n  var length = output.reduce(function(prev, cur) {\n    return prev + cur.length + 1;\n  }, 0);\n\n  if (length > 60) {\n    return braces[0] +\n           (base === '' ? '' : base + '\\n ') +\n           ' ' +\n           output.join(',\\n  ') +\n           ' ' +\n           braces[1];\n  }\n\n  return braces[0] + base + ' ' + output.join(', ') + ' ' + braces[1];\n}\n\nfunction isTypedArray(ar) {\n  // Unfortunately there's no way to check if an object is a TypedArray\n  // We have to check if it's one of these types\n  return (typeof ar === 'object' && /\\w+Array]$/.test(objectToString(ar)));\n}\n\nfunction isArray(ar) {\n  return Array.isArray(ar) ||\n         (typeof ar === 'object' && objectToString(ar) === '[object Array]');\n}\n\nfunction isRegExp(re) {\n  return typeof re === 'object' && objectToString(re) === '[object RegExp]';\n}\n\nfunction isDate(d) {\n  return typeof d === 'object' && objectToString(d) === '[object Date]';\n}\n\nfunction isError(e) {\n  return typeof e === 'object' && objectToString(e) === '[object Error]';\n}\n\nfunction objectToString(o) {\n  return Object.prototype.toString.call(o);\n}\n","/*!\n * assertion-error\n * Copyright(c) 2013 Jake Luer <jake@qualiancy.com>\n * MIT Licensed\n */\n\n/*!\n * Return a function that will copy properties from\n * one object to another excluding any originally\n * listed. Returned function will create a new `{}`.\n *\n * @param {String} excluded properties ...\n * @return {Function}\n */\n\nfunction exclude () {\n  var excludes = [].slice.call(arguments);\n\n  function excludeProps (res, obj) {\n    Object.keys(obj).forEach(function (key) {\n      if (!~excludes.indexOf(key)) res[key] = obj[key];\n    });\n  }\n\n  return function extendExclude () {\n    var args = [].slice.call(arguments)\n      , i = 0\n      , res = {};\n\n    for (; i < args.length; i++) {\n      excludeProps(res, args[i]);\n    }\n\n    return res;\n  };\n};\n\n/*!\n * Primary Exports\n */\n\nmodule.exports = AssertionError;\n\n/**\n * ### AssertionError\n *\n * An extension of the JavaScript `Error` constructor for\n * assertion and validation scenarios.\n *\n * @param {String} message\n * @param {Object} properties to include (optional)\n * @param {callee} start stack function (optional)\n */\n\nfunction AssertionError (message, _props, ssf) {\n  var extend = exclude('name', 'message', 'stack', 'constructor', 'toJSON')\n    , props = extend(_props || {});\n\n  // default values\n  this.message = message || 'Unspecified AssertionError';\n  this.showDiff = false;\n\n  // copy from properties\n  for (var key in props) {\n    this[key] = props[key];\n  }\n\n  // capture stack trace\n  ssf = ssf || AssertionError;\n  if (Error.captureStackTrace) {\n    Error.captureStackTrace(this, ssf);\n  } else {\n    try {\n      throw new Error();\n    } catch(e) {\n      this.stack = e.stack;\n    }\n  }\n}\n\n/*!\n * Inherit from Error.prototype\n */\n\nAssertionError.prototype = Object.create(Error.prototype);\n\n/*!\n * Statically set name\n */\n\nAssertionError.prototype.name = 'AssertionError';\n\n/*!\n * Ensure correct constructor\n */\n\nAssertionError.prototype.constructor = AssertionError;\n\n/**\n * Allow errors to be converted to JSON for static transfer.\n *\n * @param {Boolean} include stack (default: `true`)\n * @return {Object} object that can be `JSON.stringify`\n */\n\nAssertionError.prototype.toJSON = function (stack) {\n  var extend = exclude('constructor', 'toJSON', 'stack')\n    , props = extend({ name: this.name }, this);\n\n  // include stack if exists and not turned off\n  if (false !== stack && this.stack) {\n    props.stack = this.stack;\n  }\n\n  return props;\n};\n","/*!\n * Chai - getActual utility\n * Copyright(c) 2012-2014 Jake Luer <jake@alogicalparadox.com>\n * MIT Licensed\n */\n\n/**\n * ### .getActual(object, [actual])\n *\n * Returns the `actual` value for an Assertion.\n *\n * @param {Object} object (constructed Assertion)\n * @param {Arguments} chai.Assertion.prototype.assert arguments\n * @namespace Utils\n * @name getActual\n */\n\nmodule.exports = function getActual(obj, args) {\n  return args.length > 4 ? args[4] : obj._obj;\n};\n","/*!\n * Chai - flag utility\n * Copyright(c) 2012-2014 Jake Luer <jake@alogicalparadox.com>\n * MIT Licensed\n */\n\n/*!\n * Module dependencies\n */\n\nvar inspect = require('./inspect');\nvar config = require('../config');\n\n/**\n * ### .objDisplay(object)\n *\n * Determines if an object or an array matches\n * criteria to be inspected in-line for error\n * messages or should be truncated.\n *\n * @param {Mixed} javascript object to inspect\n * @name objDisplay\n * @namespace Utils\n * @api public\n */\n\nmodule.exports = function objDisplay(obj) {\n  var str = inspect(obj)\n    , type = Object.prototype.toString.call(obj);\n\n  if (config.truncateThreshold && str.length >= config.truncateThreshold) {\n    if (type === '[object Function]') {\n      return !obj.name || obj.name === ''\n        ? '[Function]'\n        : '[Function: ' + obj.name + ']';\n    } else if (type === '[object Array]') {\n      return '[ Array(' + obj.length + ') ]';\n    } else if (type === '[object Object]') {\n      var keys = Object.keys(obj)\n        , kstr = keys.length > 2\n          ? keys.splice(0, 2).join(', ') + ', ...'\n          : keys.join(', ');\n      return '{ Object (' + kstr + ') }';\n    } else {\n      return str;\n    }\n  } else {\n    return str;\n  }\n};\n","'use strict';\n\n/* !\n * Chai - getFuncName utility\n * Copyright(c) 2012-2016 Jake Luer <jake@alogicalparadox.com>\n * MIT Licensed\n */\n\n/**\n * ### .getFuncName(constructorFn)\n *\n * Returns the name of a function.\n * When a non-function instance is passed, returns `null`.\n * This also includes a polyfill function if `aFunc.name` is not defined.\n *\n * @name getFuncName\n * @param {Function} funct\n * @namespace Utils\n * @api public\n */\n\nvar toString = Function.prototype.toString;\nvar functionNameMatch = /\\s*function(?:\\s|\\s*\\/\\*[^(?:*\\/)]+\\*\\/\\s*)*([^\\s\\(\\/]+)/;\nfunction getFuncName(aFunc) {\n  if (typeof aFunc !== 'function') {\n    return null;\n  }\n\n  var name = '';\n  if (typeof Function.prototype.name === 'undefined' && typeof aFunc.name === 'undefined') {\n    // Here we run a polyfill if Function does not support the `name` property and if aFunc.name is not defined\n    var match = toString.call(aFunc).match(functionNameMatch);\n    if (match) {\n      name = match[1];\n    }\n  } else {\n    // If we've got a `name` property we just use it\n    name = aFunc.name;\n  }\n\n  return name;\n}\n\nmodule.exports = getFuncName;\n","/*!\n * Chai - getProperties utility\n * Copyright(c) 2012-2014 Jake Luer <jake@alogicalparadox.com>\n * MIT Licensed\n */\n\n/**\n * ### .getProperties(object)\n *\n * This allows the retrieval of property names of an object, enumerable or not,\n * inherited or not.\n *\n * @param {Object} object\n * @returns {Array}\n * @namespace Utils\n * @name getProperties\n * @api public\n */\n\nmodule.exports = function getProperties(object) {\n  var result = Object.getOwnPropertyNames(object);\n\n  function addProperty(property) {\n    if (result.indexOf(property) === -1) {\n      result.push(property);\n    }\n  }\n\n  var proto = Object.getPrototypeOf(object);\n  while (proto !== null) {\n    Object.getOwnPropertyNames(proto).forEach(addProperty);\n    proto = Object.getPrototypeOf(proto);\n  }\n\n  return result;\n};\n","/*!\n * Chai - getOwnEnumerablePropertySymbols utility\n * Copyright(c) 2011-2016 Jake Luer <jake@alogicalparadox.com>\n * MIT Licensed\n */\n\n/**\n * ### .getOwnEnumerablePropertySymbols(object)\n *\n * This allows the retrieval of directly-owned enumerable property symbols of an\n * object. This function is necessary because Object.getOwnPropertySymbols\n * returns both enumerable and non-enumerable property symbols.\n *\n * @param {Object} object\n * @returns {Array}\n * @namespace Utils\n * @name getOwnEnumerablePropertySymbols\n * @api public\n */\n\nmodule.exports = function getOwnEnumerablePropertySymbols(obj) {\n  if (typeof Object.getOwnPropertySymbols !== 'function') return [];\n\n  return Object.getOwnPropertySymbols(obj).filter(function (sym) {\n    return Object.getOwnPropertyDescriptor(obj, sym).enumerable;\n  });\n};\n","const {dirname} = require('path')\n\nconst mkdirpManual = (path, opts, made) => {\n  opts.recursive = false\n  const parent = dirname(path)\n  if (parent === path) {\n    return opts.mkdirAsync(path, opts).catch(er => {\n      // swallowed by recursive implementation on posix systems\n      // any other error is a failure\n      if (er.code !== 'EISDIR')\n        throw er\n    })\n  }\n\n  return opts.mkdirAsync(path, opts).then(() => made || path, er => {\n    if (er.code === 'ENOENT')\n      return mkdirpManual(parent, opts)\n        .then(made => mkdirpManual(path, opts, made))\n    if (er.code !== 'EEXIST' && er.code !== 'EROFS')\n      throw er\n    return opts.statAsync(path).then(st => {\n      if (st.isDirectory())\n        return made\n      else\n        throw er\n    }, () => { throw er })\n  })\n}\n\nconst mkdirpManualSync = (path, opts, made) => {\n  const parent = dirname(path)\n  opts.recursive = false\n\n  if (parent === path) {\n    try {\n      return opts.mkdirSync(path, opts)\n    } catch (er) {\n      // swallowed by recursive implementation on posix systems\n      // any other error is a failure\n      if (er.code !== 'EISDIR')\n        throw er\n      else\n        return\n    }\n  }\n\n  try {\n    opts.mkdirSync(path, opts)\n    return made || path\n  } catch (er) {\n    if (er.code === 'ENOENT')\n      return mkdirpManualSync(path, opts, mkdirpManualSync(parent, opts, made))\n    if (er.code !== 'EEXIST' && er.code !== 'EROFS')\n      throw er\n    try {\n      if (!opts.statSync(path).isDirectory())\n        throw er\n    } catch (_) {\n      throw er\n    }\n  }\n}\n\nmodule.exports = {mkdirpManual, mkdirpManualSync}\n","module.exports = require(\"mocha\");","export {\n  Test,\n  TestSuite,\n  generate,\n  generateToFile,\n} from './generate';\n\nexport {\n  runTests,\n  runTestsCli,\n  TestResults,\n} from './run';\n","export {\n  Test,\n  TestSuite,\n  generate,\n  generateToFile,\n} from './generate';\n","import { writeFile } from 'fs';\n\nimport { escapeJsStr, indent } from './util';\n\nexport interface Test {\n  name: string;\n  code: string;\n  defaultRequestId: string | null;\n}\n\nexport interface TestSuite {\n  name: string;\n  suites: TestSuite[];\n  tests?: Test[];\n}\n\nexport const generate = (suites: TestSuite[]) => {\n  const lines = [\n    'const { expect } = chai;',\n    '',\n    '// Clear active request before test starts (will be set inside test)',\n    'beforeEach(() => insomnia.clearActiveRequest());',\n    '',\n  ];\n\n  for (const s of suites || []) {\n    lines.push(...generateSuiteLines(0, s));\n  }\n\n  return lines.join('\\n');\n};\n\nexport const generateToFile = async (\n  filepath: string,\n  suites: TestSuite[],\n) => {\n  return new Promise<void>((resolve, reject) => {\n    const js = generate(suites);\n    return writeFile(filepath, js, err => {\n      if (err) {\n        reject(err);\n      } else {\n        resolve();\n      }\n    });\n  });\n};\n\nconst generateSuiteLines = (\n  n: number,\n  suite?: TestSuite | null,\n) => {\n  if (!suite) {\n    return [];\n  }\n\n  const lines: string[] = [];\n  lines.push(indent(n, `describe('${escapeJsStr(suite.name)}', () => {`));\n  const suites = suite.suites || [];\n\n  for (let i = 0; i < suites.length; i++) {\n    if (i !== 0) {\n      lines.push('');\n    }\n\n    lines.push(...generateSuiteLines(n + 1, suites[i]));\n  }\n\n  const tests = suite.tests || [];\n\n  for (let i = 0; i < tests.length; i++) {\n    // Add blank like if\n    // - it's the first test\n    // - we've outputted suites above\n    if (suites.length > 0 || i !== 0) {\n      lines.push('');\n    }\n\n    lines.push(...generateTestLines(n + 1, tests[i]));\n  }\n\n  lines.push(indent(n, '});'));\n  return lines;\n};\n\nconst generateTestLines = (n: number, test?: Test | null) => {\n  if (!test) {\n    return [];\n  }\n\n  const lines: string[] = [];\n\n  // Define test it() block (all test cases are async by default)\n  lines.push(indent(n, `it('${escapeJsStr(test.name)}', async () => {`));\n\n  // Add helper variables that are necessary\n  const { defaultRequestId } = test;\n\n  if (typeof defaultRequestId === 'string') {\n    lines.push(indent(n, '// Set active request on global insomnia object'));\n    lines.push(\n      indent(n, `insomnia.setActiveRequestId('${defaultRequestId}');`),\n    );\n  }\n\n  // Add user-defined test source\n  test.code && lines.push(indent(n + 1, test.code));\n\n  // Close the it() block\n  lines.push(indent(n, '});'));\n  return lines;\n};\n","export const escapeJsStr = (s: string) => {\n  return s.replace(/'/g, '\\\\\\'');\n};\n\nexport const indent = (level: number, code: string) => {\n  if (!level || level < 0) {\n    return code;\n  }\n\n  const prefix = new Array(level + 1).join('  ');\n  return code\n    .split('\\n')\n    .map(line => prefix + line)\n    .join('\\n');\n};\n","export {\n  runTests,\n  runTestsCli,\n} from './run';\n\nexport {\n  TestResults,\n} from './entities';\n","import chai from 'chai';\nimport { unlink, writeFileSync } from 'fs';\nimport { sync } from 'mkdirp';\nimport Mocha, { Reporter, ReporterConstructor } from 'mocha';\nimport { tmpdir } from 'os';\nimport { join } from 'path';\n\nimport { TestResults } from './entities';\nimport { Insomnia, InsomniaOptions } from './insomnia';\nimport { JavaScriptReporter } from './javascript-reporter';\n\ndeclare global {\n  namespace NodeJS {\n    interface Global {\n      insomnia?: Insomnia;\n      chai?: typeof chai;\n    }\n  }\n}\n\nconst runInternal = async <TReturn, TNetworkResponse>(\n  testSrc: string | string[],\n  options: InsomniaOptions<TNetworkResponse>,\n  reporter: Reporter | ReporterConstructor = 'spec',\n  extractResult: (runner: Mocha.Runner) => TReturn,\n) => new Promise<TReturn>((resolve, reject) => {\n  const { bail, keepFile, testFilter } = options;\n\n  // Add global `insomnia` helper.\n  // This is the only way to add new globals to the Mocha environment as far as I can tell\n  global.insomnia = new Insomnia(options);\n  global.chai = chai;\n\n  const mocha: Mocha = new Mocha({\n    //       ms   * sec * min\n    timeout: 1000 * 60  * 1,\n    globals: ['insomnia', 'chai'],\n    bail,\n    reporter,\n    // @ts-expect-error https://github.com/DefinitelyTyped/DefinitelyTyped/pull/51770\n    fgrep: testFilter,\n  });\n\n  const sources = Array.isArray(testSrc) ? testSrc : [testSrc];\n  sources.forEach(source => {\n    mocha.addFile(writeTempFile(source));\n  });\n\n  try {\n    const runner = mocha.run(() => {\n      resolve(extractResult(runner));\n\n      // Remove global since we don't need it anymore\n      delete global.insomnia;\n      delete global.chai;\n\n      if (keepFile && mocha.files.length) {\n        console.log(`Test files: ${JSON.stringify(mocha.files)}.`);\n        return;\n      }\n\n      // Clean up temp files\n      mocha.files.forEach(file => {\n        unlink(file, err => {\n          if (err) {\n            console.log('Failed to clean up test file', file, err);\n          }\n        });\n      });\n    });\n  } catch (err) {\n    reject(err);\n  }\n});\n\n/**\n * Copy test to tmp dir and return the file path\n */\nconst writeTempFile = (sourceCode: string) => {\n  const root = join(tmpdir(), 'insomnia-testing');\n  sync(root);\n  const path = join(root, `${Math.random()}-test.ts`);\n  writeFileSync(path, sourceCode);\n  return path;\n};\n\ntype CliOptions<TNetworkResponse> = InsomniaOptions<TNetworkResponse> & {\n  reporter?: Reporter;\n};\n\n/**\n * Run a test file using Mocha\n */\nexport const runTestsCli = async <TNetworkResponse>(\n  testSrc: string | string[],\n  { reporter, ...options }: CliOptions<TNetworkResponse>,\n) => runInternal(\n  testSrc,\n  options,\n  reporter,\n  runner => !Boolean(runner.stats?.failures),\n);\n\n/**\n * Run a test file using Mocha and returns JS results\n */\nexport const runTests = async <TNetworkResponse>(\n  testSrc: string | string[],\n  options: InsomniaOptions<TNetworkResponse>,\n) => runInternal(\n  testSrc,\n  options,\n  JavaScriptReporter,\n  // @ts-expect-error the `testResults` property is added onto the runner by the JavascriptReporter\n  runner => runner.testResults as TestResults,\n);\n","module.exports = require('./lib/chai');\n","/*!\n * chai\n * Copyright(c) 2011 Jake Luer <jake@alogicalparadox.com>\n * MIT Licensed\n */\n\n/*!\n * Dependencies that are used for multiple exports are required here only once\n */\n\nvar pathval = require('pathval');\n\n/*!\n * test utility\n */\n\nexports.test = require('./test');\n\n/*!\n * type utility\n */\n\nexports.type = require('type-detect');\n\n/*!\n * expectTypes utility\n */\nexports.expectTypes = require('./expectTypes');\n\n/*!\n * message utility\n */\n\nexports.getMessage = require('./getMessage');\n\n/*!\n * actual utility\n */\n\nexports.getActual = require('./getActual');\n\n/*!\n * Inspect util\n */\n\nexports.inspect = require('./inspect');\n\n/*!\n * Object Display util\n */\n\nexports.objDisplay = require('./objDisplay');\n\n/*!\n * Flag utility\n */\n\nexports.flag = require('./flag');\n\n/*!\n * Flag transferring utility\n */\n\nexports.transferFlags = require('./transferFlags');\n\n/*!\n * Deep equal utility\n */\n\nexports.eql = require('deep-eql');\n\n/*!\n * Deep path info\n */\n\nexports.getPathInfo = pathval.getPathInfo;\n\n/*!\n * Check if a property exists\n */\n\nexports.hasProperty = pathval.hasProperty;\n\n/*!\n * Function name\n */\n\nexports.getName = require('get-func-name');\n\n/*!\n * add Property\n */\n\nexports.addProperty = require('./addProperty');\n\n/*!\n * add Method\n */\n\nexports.addMethod = require('./addMethod');\n\n/*!\n * overwrite Property\n */\n\nexports.overwriteProperty = require('./overwriteProperty');\n\n/*!\n * overwrite Method\n */\n\nexports.overwriteMethod = require('./overwriteMethod');\n\n/*!\n * Add a chainable method\n */\n\nexports.addChainableMethod = require('./addChainableMethod');\n\n/*!\n * Overwrite chainable method\n */\n\nexports.overwriteChainableMethod = require('./overwriteChainableMethod');\n\n/*!\n * Compare by inspect method\n */\n\nexports.compareByInspect = require('./compareByInspect');\n\n/*!\n * Get own enumerable property symbols method\n */\n\nexports.getOwnEnumerablePropertySymbols = require('./getOwnEnumerablePropertySymbols');\n\n/*!\n * Get own enumerable properties method\n */\n\nexports.getOwnEnumerableProperties = require('./getOwnEnumerableProperties');\n\n/*!\n * Checks error against a given set of criteria\n */\n\nexports.checkError = require('check-error');\n\n/*!\n * Proxify util\n */\n\nexports.proxify = require('./proxify');\n\n/*!\n * addLengthGuard util\n */\n\nexports.addLengthGuard = require('./addLengthGuard');\n\n/*!\n * isProxyEnabled helper\n */\n\nexports.isProxyEnabled = require('./isProxyEnabled');\n\n/*!\n * isNaN method\n */\n\nexports.isNaN = require('./isNaN');\n\n/*!\n * getOperator method\n */\n\nexports.getOperator = require('./getOperator');","'use strict';\n\n/* !\n * Chai - pathval utility\n * Copyright(c) 2012-2014 Jake Luer <jake@alogicalparadox.com>\n * @see https://github.com/logicalparadox/filtr\n * MIT Licensed\n */\n\n/**\n * ### .hasProperty(object, name)\n *\n * This allows checking whether an object has own\n * or inherited from prototype chain named property.\n *\n * Basically does the same thing as the `in`\n * operator but works properly with null/undefined values\n * and other primitives.\n *\n *     var obj = {\n *         arr: ['a', 'b', 'c']\n *       , str: 'Hello'\n *     }\n *\n * The following would be the results.\n *\n *     hasProperty(obj, 'str');  // true\n *     hasProperty(obj, 'constructor');  // true\n *     hasProperty(obj, 'bar');  // false\n *\n *     hasProperty(obj.str, 'length'); // true\n *     hasProperty(obj.str, 1);  // true\n *     hasProperty(obj.str, 5);  // false\n *\n *     hasProperty(obj.arr, 'length');  // true\n *     hasProperty(obj.arr, 2);  // true\n *     hasProperty(obj.arr, 3);  // false\n *\n * @param {Object} object\n * @param {String|Symbol} name\n * @returns {Boolean} whether it exists\n * @namespace Utils\n * @name hasProperty\n * @api public\n */\n\nfunction hasProperty(obj, name) {\n  if (typeof obj === 'undefined' || obj === null) {\n    return false;\n  }\n\n  // The `in` operator does not work with primitives.\n  return name in Object(obj);\n}\n\n/* !\n * ## parsePath(path)\n *\n * Helper function used to parse string object\n * paths. Use in conjunction with `internalGetPathValue`.\n *\n *      var parsed = parsePath('myobject.property.subprop');\n *\n * ### Paths:\n *\n * * Can be infinitely deep and nested.\n * * Arrays are also valid using the formal `myobject.document[3].property`.\n * * Literal dots and brackets (not delimiter) must be backslash-escaped.\n *\n * @param {String} path\n * @returns {Object} parsed\n * @api private\n */\n\nfunction parsePath(path) {\n  var str = path.replace(/([^\\\\])\\[/g, '$1.[');\n  var parts = str.match(/(\\\\\\.|[^.]+?)+/g);\n  return parts.map(function mapMatches(value) {\n    if (\n      value === 'constructor' ||\n      value === '__proto__' ||\n      value === 'prototype'\n    ) {\n      return {};\n    }\n    var regexp = /^\\[(\\d+)\\]$/;\n    var mArr = regexp.exec(value);\n    var parsed = null;\n    if (mArr) {\n      parsed = { i: parseFloat(mArr[1]) };\n    } else {\n      parsed = { p: value.replace(/\\\\([.[\\]])/g, '$1') };\n    }\n\n    return parsed;\n  });\n}\n\n/* !\n * ## internalGetPathValue(obj, parsed[, pathDepth])\n *\n * Helper companion function for `.parsePath` that returns\n * the value located at the parsed address.\n *\n *      var value = getPathValue(obj, parsed);\n *\n * @param {Object} object to search against\n * @param {Object} parsed definition from `parsePath`.\n * @param {Number} depth (nesting level) of the property we want to retrieve\n * @returns {Object|Undefined} value\n * @api private\n */\n\nfunction internalGetPathValue(obj, parsed, pathDepth) {\n  var temporaryValue = obj;\n  var res = null;\n  pathDepth = typeof pathDepth === 'undefined' ? parsed.length : pathDepth;\n\n  for (var i = 0; i < pathDepth; i++) {\n    var part = parsed[i];\n    if (temporaryValue) {\n      if (typeof part.p === 'undefined') {\n        temporaryValue = temporaryValue[part.i];\n      } else {\n        temporaryValue = temporaryValue[part.p];\n      }\n\n      if (i === pathDepth - 1) {\n        res = temporaryValue;\n      }\n    }\n  }\n\n  return res;\n}\n\n/* !\n * ## internalSetPathValue(obj, value, parsed)\n *\n * Companion function for `parsePath` that sets\n * the value located at a parsed address.\n *\n *  internalSetPathValue(obj, 'value', parsed);\n *\n * @param {Object} object to search and define on\n * @param {*} value to use upon set\n * @param {Object} parsed definition from `parsePath`\n * @api private\n */\n\nfunction internalSetPathValue(obj, val, parsed) {\n  var tempObj = obj;\n  var pathDepth = parsed.length;\n  var part = null;\n  // Here we iterate through every part of the path\n  for (var i = 0; i < pathDepth; i++) {\n    var propName = null;\n    var propVal = null;\n    part = parsed[i];\n\n    // If it's the last part of the path, we set the 'propName' value with the property name\n    if (i === pathDepth - 1) {\n      propName = typeof part.p === 'undefined' ? part.i : part.p;\n      // Now we set the property with the name held by 'propName' on object with the desired val\n      tempObj[propName] = val;\n    } else if (typeof part.p !== 'undefined' && tempObj[part.p]) {\n      tempObj = tempObj[part.p];\n    } else if (typeof part.i !== 'undefined' && tempObj[part.i]) {\n      tempObj = tempObj[part.i];\n    } else {\n      // If the obj doesn't have the property we create one with that name to define it\n      var next = parsed[i + 1];\n      // Here we set the name of the property which will be defined\n      propName = typeof part.p === 'undefined' ? part.i : part.p;\n      // Here we decide if this property will be an array or a new object\n      propVal = typeof next.p === 'undefined' ? [] : {};\n      tempObj[propName] = propVal;\n      tempObj = tempObj[propName];\n    }\n  }\n}\n\n/**\n * ### .getPathInfo(object, path)\n *\n * This allows the retrieval of property info in an\n * object given a string path.\n *\n * The path info consists of an object with the\n * following properties:\n *\n * * parent - The parent object of the property referenced by `path`\n * * name - The name of the final property, a number if it was an array indexer\n * * value - The value of the property, if it exists, otherwise `undefined`\n * * exists - Whether the property exists or not\n *\n * @param {Object} object\n * @param {String} path\n * @returns {Object} info\n * @namespace Utils\n * @name getPathInfo\n * @api public\n */\n\nfunction getPathInfo(obj, path) {\n  var parsed = parsePath(path);\n  var last = parsed[parsed.length - 1];\n  var info = {\n    parent:\n      parsed.length > 1 ?\n        internalGetPathValue(obj, parsed, parsed.length - 1) :\n        obj,\n    name: last.p || last.i,\n    value: internalGetPathValue(obj, parsed),\n  };\n  info.exists = hasProperty(info.parent, info.name);\n\n  return info;\n}\n\n/**\n * ### .getPathValue(object, path)\n *\n * This allows the retrieval of values in an\n * object given a string path.\n *\n *     var obj = {\n *         prop1: {\n *             arr: ['a', 'b', 'c']\n *           , str: 'Hello'\n *         }\n *       , prop2: {\n *             arr: [ { nested: 'Universe' } ]\n *           , str: 'Hello again!'\n *         }\n *     }\n *\n * The following would be the results.\n *\n *     getPathValue(obj, 'prop1.str'); // Hello\n *     getPathValue(obj, 'prop1.att[2]'); // b\n *     getPathValue(obj, 'prop2.arr[0].nested'); // Universe\n *\n * @param {Object} object\n * @param {String} path\n * @returns {Object} value or `undefined`\n * @namespace Utils\n * @name getPathValue\n * @api public\n */\n\nfunction getPathValue(obj, path) {\n  var info = getPathInfo(obj, path);\n  return info.value;\n}\n\n/**\n * ### .setPathValue(object, path, value)\n *\n * Define the value in an object at a given string path.\n *\n * ```js\n * var obj = {\n *     prop1: {\n *         arr: ['a', 'b', 'c']\n *       , str: 'Hello'\n *     }\n *   , prop2: {\n *         arr: [ { nested: 'Universe' } ]\n *       , str: 'Hello again!'\n *     }\n * };\n * ```\n *\n * The following would be acceptable.\n *\n * ```js\n * var properties = require('tea-properties');\n * properties.set(obj, 'prop1.str', 'Hello Universe!');\n * properties.set(obj, 'prop1.arr[2]', 'B');\n * properties.set(obj, 'prop2.arr[0].nested.value', { hello: 'universe' });\n * ```\n *\n * @param {Object} object\n * @param {String} path\n * @param {Mixed} value\n * @api private\n */\n\nfunction setPathValue(obj, path, val) {\n  var parsed = parsePath(path);\n  internalSetPathValue(obj, val, parsed);\n  return obj;\n}\n\nmodule.exports = {\n  hasProperty: hasProperty,\n  getPathInfo: getPathInfo,\n  getPathValue: getPathValue,\n  setPathValue: setPathValue,\n};\n","/*!\n * Chai - test utility\n * Copyright(c) 2012-2014 Jake Luer <jake@alogicalparadox.com>\n * MIT Licensed\n */\n\n/*!\n * Module dependencies\n */\n\nvar flag = require('./flag');\n\n/**\n * ### .test(object, expression)\n *\n * Test and object for expression.\n *\n * @param {Object} object (constructed Assertion)\n * @param {Arguments} chai.Assertion.prototype.assert arguments\n * @namespace Utils\n * @name test\n */\n\nmodule.exports = function test(obj, args) {\n  var negate = flag(obj, 'negate')\n    , expr = args[0];\n  return negate ? !expr : expr;\n};\n","/*!\n * Chai - expectTypes utility\n * Copyright(c) 2012-2014 Jake Luer <jake@alogicalparadox.com>\n * MIT Licensed\n */\n\n/**\n * ### .expectTypes(obj, types)\n *\n * Ensures that the object being tested against is of a valid type.\n *\n *     utils.expectTypes(this, ['array', 'object', 'string']);\n *\n * @param {Mixed} obj constructed Assertion\n * @param {Array} type A list of allowed types for this assertion\n * @namespace Utils\n * @name expectTypes\n * @api public\n */\n\nvar AssertionError = require('assertion-error');\nvar flag = require('./flag');\nvar type = require('type-detect');\n\nmodule.exports = function expectTypes(obj, types) {\n  var flagMsg = flag(obj, 'message');\n  var ssfi = flag(obj, 'ssfi');\n\n  flagMsg = flagMsg ? flagMsg + ': ' : '';\n\n  obj = flag(obj, 'object');\n  types = types.map(function (t) { return t.toLowerCase(); });\n  types.sort();\n\n  // Transforms ['lorem', 'ipsum'] into 'a lorem, or an ipsum'\n  var str = types.map(function (t, index) {\n    var art = ~[ 'a', 'e', 'i', 'o', 'u' ].indexOf(t.charAt(0)) ? 'an' : 'a';\n    var or = types.length > 1 && index === types.length - 1 ? 'or ' : '';\n    return or + art + ' ' + t;\n  }).join(', ');\n\n  var objType = type(obj).toLowerCase();\n\n  if (!types.some(function (expected) { return objType === expected; })) {\n    throw new AssertionError(\n      flagMsg + 'object tested must be ' + str + ', but ' + objType + ' given',\n      undefined,\n      ssfi\n    );\n  }\n};\n","/*!\n * Chai - message composition utility\n * Copyright(c) 2012-2014 Jake Luer <jake@alogicalparadox.com>\n * MIT Licensed\n */\n\n/*!\n * Module dependencies\n */\n\nvar flag = require('./flag')\n  , getActual = require('./getActual')\n  , objDisplay = require('./objDisplay');\n\n/**\n * ### .getMessage(object, message, negateMessage)\n *\n * Construct the error message based on flags\n * and template tags. Template tags will return\n * a stringified inspection of the object referenced.\n *\n * Message template tags:\n * - `#{this}` current asserted object\n * - `#{act}` actual value\n * - `#{exp}` expected value\n *\n * @param {Object} object (constructed Assertion)\n * @param {Arguments} chai.Assertion.prototype.assert arguments\n * @namespace Utils\n * @name getMessage\n * @api public\n */\n\nmodule.exports = function getMessage(obj, args) {\n  var negate = flag(obj, 'negate')\n    , val = flag(obj, 'object')\n    , expected = args[3]\n    , actual = getActual(obj, args)\n    , msg = negate ? args[2] : args[1]\n    , flagMsg = flag(obj, 'message');\n\n  if(typeof msg === \"function\") msg = msg();\n  msg = msg || '';\n  msg = msg\n    .replace(/#\\{this\\}/g, function () { return objDisplay(val); })\n    .replace(/#\\{act\\}/g, function () { return objDisplay(actual); })\n    .replace(/#\\{exp\\}/g, function () { return objDisplay(expected); });\n\n  return flagMsg ? flagMsg + ': ' + msg : msg;\n};\n","/*!\n * Chai - getEnumerableProperties utility\n * Copyright(c) 2012-2014 Jake Luer <jake@alogicalparadox.com>\n * MIT Licensed\n */\n\n/**\n * ### .getEnumerableProperties(object)\n *\n * This allows the retrieval of enumerable property names of an object,\n * inherited or not.\n *\n * @param {Object} object\n * @returns {Array}\n * @namespace Utils\n * @name getEnumerableProperties\n * @api public\n */\n\nmodule.exports = function getEnumerableProperties(object) {\n  var result = [];\n  for (var name in object) {\n    result.push(name);\n  }\n  return result;\n};\n","'use strict';\n/* globals Symbol: false, Uint8Array: false, WeakMap: false */\n/*!\n * deep-eql\n * Copyright(c) 2013 Jake Luer <jake@alogicalparadox.com>\n * MIT Licensed\n */\n\nvar type = require('type-detect');\nfunction FakeMap() {\n  this._key = 'chai/deep-eql__' + Math.random() + Date.now();\n}\n\nFakeMap.prototype = {\n  get: function getMap(key) {\n    return key[this._key];\n  },\n  set: function setMap(key, value) {\n    if (Object.isExtensible(key)) {\n      Object.defineProperty(key, this._key, {\n        value: value,\n        configurable: true,\n      });\n    }\n  },\n};\n\nvar MemoizeMap = typeof WeakMap === 'function' ? WeakMap : FakeMap;\n/*!\n * Check to see if the MemoizeMap has recorded a result of the two operands\n *\n * @param {Mixed} leftHandOperand\n * @param {Mixed} rightHandOperand\n * @param {MemoizeMap} memoizeMap\n * @returns {Boolean|null} result\n*/\nfunction memoizeCompare(leftHandOperand, rightHandOperand, memoizeMap) {\n  // Technically, WeakMap keys can *only* be objects, not primitives.\n  if (!memoizeMap || isPrimitive(leftHandOperand) || isPrimitive(rightHandOperand)) {\n    return null;\n  }\n  var leftHandMap = memoizeMap.get(leftHandOperand);\n  if (leftHandMap) {\n    var result = leftHandMap.get(rightHandOperand);\n    if (typeof result === 'boolean') {\n      return result;\n    }\n  }\n  return null;\n}\n\n/*!\n * Set the result of the equality into the MemoizeMap\n *\n * @param {Mixed} leftHandOperand\n * @param {Mixed} rightHandOperand\n * @param {MemoizeMap} memoizeMap\n * @param {Boolean} result\n*/\nfunction memoizeSet(leftHandOperand, rightHandOperand, memoizeMap, result) {\n  // Technically, WeakMap keys can *only* be objects, not primitives.\n  if (!memoizeMap || isPrimitive(leftHandOperand) || isPrimitive(rightHandOperand)) {\n    return;\n  }\n  var leftHandMap = memoizeMap.get(leftHandOperand);\n  if (leftHandMap) {\n    leftHandMap.set(rightHandOperand, result);\n  } else {\n    leftHandMap = new MemoizeMap();\n    leftHandMap.set(rightHandOperand, result);\n    memoizeMap.set(leftHandOperand, leftHandMap);\n  }\n}\n\n/*!\n * Primary Export\n */\n\nmodule.exports = deepEqual;\nmodule.exports.MemoizeMap = MemoizeMap;\n\n/**\n * Assert deeply nested sameValue equality between two objects of any type.\n *\n * @param {Mixed} leftHandOperand\n * @param {Mixed} rightHandOperand\n * @param {Object} [options] (optional) Additional options\n * @param {Array} [options.comparator] (optional) Override default algorithm, determining custom equality.\n * @param {Array} [options.memoize] (optional) Provide a custom memoization object which will cache the results of\n    complex objects for a speed boost. By passing `false` you can disable memoization, but this will cause circular\n    references to blow the stack.\n * @return {Boolean} equal match\n */\nfunction deepEqual(leftHandOperand, rightHandOperand, options) {\n  // If we have a comparator, we can't assume anything; so bail to its check first.\n  if (options && options.comparator) {\n    return extensiveDeepEqual(leftHandOperand, rightHandOperand, options);\n  }\n\n  var simpleResult = simpleEqual(leftHandOperand, rightHandOperand);\n  if (simpleResult !== null) {\n    return simpleResult;\n  }\n\n  // Deeper comparisons are pushed through to a larger function\n  return extensiveDeepEqual(leftHandOperand, rightHandOperand, options);\n}\n\n/**\n * Many comparisons can be canceled out early via simple equality or primitive checks.\n * @param {Mixed} leftHandOperand\n * @param {Mixed} rightHandOperand\n * @return {Boolean|null} equal match\n */\nfunction simpleEqual(leftHandOperand, rightHandOperand) {\n  // Equal references (except for Numbers) can be returned early\n  if (leftHandOperand === rightHandOperand) {\n    // Handle +-0 cases\n    return leftHandOperand !== 0 || 1 / leftHandOperand === 1 / rightHandOperand;\n  }\n\n  // handle NaN cases\n  if (\n    leftHandOperand !== leftHandOperand && // eslint-disable-line no-self-compare\n    rightHandOperand !== rightHandOperand // eslint-disable-line no-self-compare\n  ) {\n    return true;\n  }\n\n  // Anything that is not an 'object', i.e. symbols, functions, booleans, numbers,\n  // strings, and undefined, can be compared by reference.\n  if (isPrimitive(leftHandOperand) || isPrimitive(rightHandOperand)) {\n    // Easy out b/c it would have passed the first equality check\n    return false;\n  }\n  return null;\n}\n\n/*!\n * The main logic of the `deepEqual` function.\n *\n * @param {Mixed} leftHandOperand\n * @param {Mixed} rightHandOperand\n * @param {Object} [options] (optional) Additional options\n * @param {Array} [options.comparator] (optional) Override default algorithm, determining custom equality.\n * @param {Array} [options.memoize] (optional) Provide a custom memoization object which will cache the results of\n    complex objects for a speed boost. By passing `false` you can disable memoization, but this will cause circular\n    references to blow the stack.\n * @return {Boolean} equal match\n*/\nfunction extensiveDeepEqual(leftHandOperand, rightHandOperand, options) {\n  options = options || {};\n  options.memoize = options.memoize === false ? false : options.memoize || new MemoizeMap();\n  var comparator = options && options.comparator;\n\n  // Check if a memoized result exists.\n  var memoizeResultLeft = memoizeCompare(leftHandOperand, rightHandOperand, options.memoize);\n  if (memoizeResultLeft !== null) {\n    return memoizeResultLeft;\n  }\n  var memoizeResultRight = memoizeCompare(rightHandOperand, leftHandOperand, options.memoize);\n  if (memoizeResultRight !== null) {\n    return memoizeResultRight;\n  }\n\n  // If a comparator is present, use it.\n  if (comparator) {\n    var comparatorResult = comparator(leftHandOperand, rightHandOperand);\n    // Comparators may return null, in which case we want to go back to default behavior.\n    if (comparatorResult === false || comparatorResult === true) {\n      memoizeSet(leftHandOperand, rightHandOperand, options.memoize, comparatorResult);\n      return comparatorResult;\n    }\n    // To allow comparators to override *any* behavior, we ran them first. Since it didn't decide\n    // what to do, we need to make sure to return the basic tests first before we move on.\n    var simpleResult = simpleEqual(leftHandOperand, rightHandOperand);\n    if (simpleResult !== null) {\n      // Don't memoize this, it takes longer to set/retrieve than to just compare.\n      return simpleResult;\n    }\n  }\n\n  var leftHandType = type(leftHandOperand);\n  if (leftHandType !== type(rightHandOperand)) {\n    memoizeSet(leftHandOperand, rightHandOperand, options.memoize, false);\n    return false;\n  }\n\n  // Temporarily set the operands in the memoize object to prevent blowing the stack\n  memoizeSet(leftHandOperand, rightHandOperand, options.memoize, true);\n\n  var result = extensiveDeepEqualByType(leftHandOperand, rightHandOperand, leftHandType, options);\n  memoizeSet(leftHandOperand, rightHandOperand, options.memoize, result);\n  return result;\n}\n\nfunction extensiveDeepEqualByType(leftHandOperand, rightHandOperand, leftHandType, options) {\n  switch (leftHandType) {\n    case 'String':\n    case 'Number':\n    case 'Boolean':\n    case 'Date':\n      // If these types are their instance types (e.g. `new Number`) then re-deepEqual against their values\n      return deepEqual(leftHandOperand.valueOf(), rightHandOperand.valueOf());\n    case 'Promise':\n    case 'Symbol':\n    case 'function':\n    case 'WeakMap':\n    case 'WeakSet':\n    case 'Error':\n      return leftHandOperand === rightHandOperand;\n    case 'Arguments':\n    case 'Int8Array':\n    case 'Uint8Array':\n    case 'Uint8ClampedArray':\n    case 'Int16Array':\n    case 'Uint16Array':\n    case 'Int32Array':\n    case 'Uint32Array':\n    case 'Float32Array':\n    case 'Float64Array':\n    case 'Array':\n      return iterableEqual(leftHandOperand, rightHandOperand, options);\n    case 'RegExp':\n      return regexpEqual(leftHandOperand, rightHandOperand);\n    case 'Generator':\n      return generatorEqual(leftHandOperand, rightHandOperand, options);\n    case 'DataView':\n      return iterableEqual(new Uint8Array(leftHandOperand.buffer), new Uint8Array(rightHandOperand.buffer), options);\n    case 'ArrayBuffer':\n      return iterableEqual(new Uint8Array(leftHandOperand), new Uint8Array(rightHandOperand), options);\n    case 'Set':\n      return entriesEqual(leftHandOperand, rightHandOperand, options);\n    case 'Map':\n      return entriesEqual(leftHandOperand, rightHandOperand, options);\n    default:\n      return objectEqual(leftHandOperand, rightHandOperand, options);\n  }\n}\n\n/*!\n * Compare two Regular Expressions for equality.\n *\n * @param {RegExp} leftHandOperand\n * @param {RegExp} rightHandOperand\n * @return {Boolean} result\n */\n\nfunction regexpEqual(leftHandOperand, rightHandOperand) {\n  return leftHandOperand.toString() === rightHandOperand.toString();\n}\n\n/*!\n * Compare two Sets/Maps for equality. Faster than other equality functions.\n *\n * @param {Set} leftHandOperand\n * @param {Set} rightHandOperand\n * @param {Object} [options] (Optional)\n * @return {Boolean} result\n */\n\nfunction entriesEqual(leftHandOperand, rightHandOperand, options) {\n  // IE11 doesn't support Set#entries or Set#@@iterator, so we need manually populate using Set#forEach\n  if (leftHandOperand.size !== rightHandOperand.size) {\n    return false;\n  }\n  if (leftHandOperand.size === 0) {\n    return true;\n  }\n  var leftHandItems = [];\n  var rightHandItems = [];\n  leftHandOperand.forEach(function gatherEntries(key, value) {\n    leftHandItems.push([ key, value ]);\n  });\n  rightHandOperand.forEach(function gatherEntries(key, value) {\n    rightHandItems.push([ key, value ]);\n  });\n  return iterableEqual(leftHandItems.sort(), rightHandItems.sort(), options);\n}\n\n/*!\n * Simple equality for flat iterable objects such as Arrays, TypedArrays or Node.js buffers.\n *\n * @param {Iterable} leftHandOperand\n * @param {Iterable} rightHandOperand\n * @param {Object} [options] (Optional)\n * @return {Boolean} result\n */\n\nfunction iterableEqual(leftHandOperand, rightHandOperand, options) {\n  var length = leftHandOperand.length;\n  if (length !== rightHandOperand.length) {\n    return false;\n  }\n  if (length === 0) {\n    return true;\n  }\n  var index = -1;\n  while (++index < length) {\n    if (deepEqual(leftHandOperand[index], rightHandOperand[index], options) === false) {\n      return false;\n    }\n  }\n  return true;\n}\n\n/*!\n * Simple equality for generator objects such as those returned by generator functions.\n *\n * @param {Iterable} leftHandOperand\n * @param {Iterable} rightHandOperand\n * @param {Object} [options] (Optional)\n * @return {Boolean} result\n */\n\nfunction generatorEqual(leftHandOperand, rightHandOperand, options) {\n  return iterableEqual(getGeneratorEntries(leftHandOperand), getGeneratorEntries(rightHandOperand), options);\n}\n\n/*!\n * Determine if the given object has an @@iterator function.\n *\n * @param {Object} target\n * @return {Boolean} `true` if the object has an @@iterator function.\n */\nfunction hasIteratorFunction(target) {\n  return typeof Symbol !== 'undefined' &&\n    typeof target === 'object' &&\n    typeof Symbol.iterator !== 'undefined' &&\n    typeof target[Symbol.iterator] === 'function';\n}\n\n/*!\n * Gets all iterator entries from the given Object. If the Object has no @@iterator function, returns an empty array.\n * This will consume the iterator - which could have side effects depending on the @@iterator implementation.\n *\n * @param {Object} target\n * @returns {Array} an array of entries from the @@iterator function\n */\nfunction getIteratorEntries(target) {\n  if (hasIteratorFunction(target)) {\n    try {\n      return getGeneratorEntries(target[Symbol.iterator]());\n    } catch (iteratorError) {\n      return [];\n    }\n  }\n  return [];\n}\n\n/*!\n * Gets all entries from a Generator. This will consume the generator - which could have side effects.\n *\n * @param {Generator} target\n * @returns {Array} an array of entries from the Generator.\n */\nfunction getGeneratorEntries(generator) {\n  var generatorResult = generator.next();\n  var accumulator = [ generatorResult.value ];\n  while (generatorResult.done === false) {\n    generatorResult = generator.next();\n    accumulator.push(generatorResult.value);\n  }\n  return accumulator;\n}\n\n/*!\n * Gets all own and inherited enumerable keys from a target.\n *\n * @param {Object} target\n * @returns {Array} an array of own and inherited enumerable keys from the target.\n */\nfunction getEnumerableKeys(target) {\n  var keys = [];\n  for (var key in target) {\n    keys.push(key);\n  }\n  return keys;\n}\n\n/*!\n * Determines if two objects have matching values, given a set of keys. Defers to deepEqual for the equality check of\n * each key. If any value of the given key is not equal, the function will return false (early).\n *\n * @param {Mixed} leftHandOperand\n * @param {Mixed} rightHandOperand\n * @param {Array} keys An array of keys to compare the values of leftHandOperand and rightHandOperand against\n * @param {Object} [options] (Optional)\n * @return {Boolean} result\n */\nfunction keysEqual(leftHandOperand, rightHandOperand, keys, options) {\n  var length = keys.length;\n  if (length === 0) {\n    return true;\n  }\n  for (var i = 0; i < length; i += 1) {\n    if (deepEqual(leftHandOperand[keys[i]], rightHandOperand[keys[i]], options) === false) {\n      return false;\n    }\n  }\n  return true;\n}\n\n/*!\n * Recursively check the equality of two Objects. Once basic sameness has been established it will defer to `deepEqual`\n * for each enumerable key in the object.\n *\n * @param {Mixed} leftHandOperand\n * @param {Mixed} rightHandOperand\n * @param {Object} [options] (Optional)\n * @return {Boolean} result\n */\n\nfunction objectEqual(leftHandOperand, rightHandOperand, options) {\n  var leftHandKeys = getEnumerableKeys(leftHandOperand);\n  var rightHandKeys = getEnumerableKeys(rightHandOperand);\n  if (leftHandKeys.length && leftHandKeys.length === rightHandKeys.length) {\n    leftHandKeys.sort();\n    rightHandKeys.sort();\n    if (iterableEqual(leftHandKeys, rightHandKeys) === false) {\n      return false;\n    }\n    return keysEqual(leftHandOperand, rightHandOperand, leftHandKeys, options);\n  }\n\n  var leftHandEntries = getIteratorEntries(leftHandOperand);\n  var rightHandEntries = getIteratorEntries(rightHandOperand);\n  if (leftHandEntries.length && leftHandEntries.length === rightHandEntries.length) {\n    leftHandEntries.sort();\n    rightHandEntries.sort();\n    return iterableEqual(leftHandEntries, rightHandEntries, options);\n  }\n\n  if (leftHandKeys.length === 0 &&\n      leftHandEntries.length === 0 &&\n      rightHandKeys.length === 0 &&\n      rightHandEntries.length === 0) {\n    return true;\n  }\n\n  return false;\n}\n\n/*!\n * Returns true if the argument is a primitive.\n *\n * This intentionally returns true for all objects that can be compared by reference,\n * including functions and symbols.\n *\n * @param {Mixed} value\n * @return {Boolean} result\n */\nfunction isPrimitive(value) {\n  return value === null || typeof value !== 'object';\n}\n","/*!\n * Chai - addProperty utility\n * Copyright(c) 2012-2014 Jake Luer <jake@alogicalparadox.com>\n * MIT Licensed\n */\n\nvar chai = require('../../chai');\nvar flag = require('./flag');\nvar isProxyEnabled = require('./isProxyEnabled');\nvar transferFlags = require('./transferFlags');\n\n/**\n * ### .addProperty(ctx, name, getter)\n *\n * Adds a property to the prototype of an object.\n *\n *     utils.addProperty(chai.Assertion.prototype, 'foo', function () {\n *       var obj = utils.flag(this, 'object');\n *       new chai.Assertion(obj).to.be.instanceof(Foo);\n *     });\n *\n * Can also be accessed directly from `chai.Assertion`.\n *\n *     chai.Assertion.addProperty('foo', fn);\n *\n * Then can be used as any other assertion.\n *\n *     expect(myFoo).to.be.foo;\n *\n * @param {Object} ctx object to which the property is added\n * @param {String} name of property to add\n * @param {Function} getter function to be used for name\n * @namespace Utils\n * @name addProperty\n * @api public\n */\n\nmodule.exports = function addProperty(ctx, name, getter) {\n  getter = getter === undefined ? function () {} : getter;\n\n  Object.defineProperty(ctx, name,\n    { get: function propertyGetter() {\n        // Setting the `ssfi` flag to `propertyGetter` causes this function to\n        // be the starting point for removing implementation frames from the\n        // stack trace of a failed assertion.\n        //\n        // However, we only want to use this function as the starting point if\n        // the `lockSsfi` flag isn't set and proxy protection is disabled.\n        //\n        // If the `lockSsfi` flag is set, then either this assertion has been\n        // overwritten by another assertion, or this assertion is being invoked\n        // from inside of another assertion. In the first case, the `ssfi` flag\n        // has already been set by the overwriting assertion. In the second\n        // case, the `ssfi` flag has already been set by the outer assertion.\n        //\n        // If proxy protection is enabled, then the `ssfi` flag has already been\n        // set by the proxy getter.\n        if (!isProxyEnabled() && !flag(this, 'lockSsfi')) {\n          flag(this, 'ssfi', propertyGetter);\n        }\n\n        var result = getter.call(this);\n        if (result !== undefined)\n          return result;\n\n        var newAssertion = new chai.Assertion();\n        transferFlags(this, newAssertion);\n        return newAssertion;\n      }\n    , configurable: true\n  });\n};\n","/*!\n * Chai - addMethod utility\n * Copyright(c) 2012-2014 Jake Luer <jake@alogicalparadox.com>\n * MIT Licensed\n */\n\nvar addLengthGuard = require('./addLengthGuard');\nvar chai = require('../../chai');\nvar flag = require('./flag');\nvar proxify = require('./proxify');\nvar transferFlags = require('./transferFlags');\n\n/**\n * ### .addMethod(ctx, name, method)\n *\n * Adds a method to the prototype of an object.\n *\n *     utils.addMethod(chai.Assertion.prototype, 'foo', function (str) {\n *       var obj = utils.flag(this, 'object');\n *       new chai.Assertion(obj).to.be.equal(str);\n *     });\n *\n * Can also be accessed directly from `chai.Assertion`.\n *\n *     chai.Assertion.addMethod('foo', fn);\n *\n * Then can be used as any other assertion.\n *\n *     expect(fooStr).to.be.foo('bar');\n *\n * @param {Object} ctx object to which the method is added\n * @param {String} name of method to add\n * @param {Function} method function to be used for name\n * @namespace Utils\n * @name addMethod\n * @api public\n */\n\nmodule.exports = function addMethod(ctx, name, method) {\n  var methodWrapper = function () {\n    // Setting the `ssfi` flag to `methodWrapper` causes this function to be the\n    // starting point for removing implementation frames from the stack trace of\n    // a failed assertion.\n    //\n    // However, we only want to use this function as the starting point if the\n    // `lockSsfi` flag isn't set.\n    //\n    // If the `lockSsfi` flag is set, then either this assertion has been\n    // overwritten by another assertion, or this assertion is being invoked from\n    // inside of another assertion. In the first case, the `ssfi` flag has\n    // already been set by the overwriting assertion. In the second case, the\n    // `ssfi` flag has already been set by the outer assertion.\n    if (!flag(this, 'lockSsfi')) {\n      flag(this, 'ssfi', methodWrapper);\n    }\n\n    var result = method.apply(this, arguments);\n    if (result !== undefined)\n      return result;\n\n    var newAssertion = new chai.Assertion();\n    transferFlags(this, newAssertion);\n    return newAssertion;\n  };\n\n  addLengthGuard(methodWrapper, name, false);\n  ctx[name] = proxify(methodWrapper, name);\n};\n","/*!\n * Chai - overwriteProperty utility\n * Copyright(c) 2012-2014 Jake Luer <jake@alogicalparadox.com>\n * MIT Licensed\n */\n\nvar chai = require('../../chai');\nvar flag = require('./flag');\nvar isProxyEnabled = require('./isProxyEnabled');\nvar transferFlags = require('./transferFlags');\n\n/**\n * ### .overwriteProperty(ctx, name, fn)\n *\n * Overwrites an already existing property getter and provides\n * access to previous value. Must return function to use as getter.\n *\n *     utils.overwriteProperty(chai.Assertion.prototype, 'ok', function (_super) {\n *       return function () {\n *         var obj = utils.flag(this, 'object');\n *         if (obj instanceof Foo) {\n *           new chai.Assertion(obj.name).to.equal('bar');\n *         } else {\n *           _super.call(this);\n *         }\n *       }\n *     });\n *\n *\n * Can also be accessed directly from `chai.Assertion`.\n *\n *     chai.Assertion.overwriteProperty('foo', fn);\n *\n * Then can be used as any other assertion.\n *\n *     expect(myFoo).to.be.ok;\n *\n * @param {Object} ctx object whose property is to be overwritten\n * @param {String} name of property to overwrite\n * @param {Function} getter function that returns a getter function to be used for name\n * @namespace Utils\n * @name overwriteProperty\n * @api public\n */\n\nmodule.exports = function overwriteProperty(ctx, name, getter) {\n  var _get = Object.getOwnPropertyDescriptor(ctx, name)\n    , _super = function () {};\n\n  if (_get && 'function' === typeof _get.get)\n    _super = _get.get\n\n  Object.defineProperty(ctx, name,\n    { get: function overwritingPropertyGetter() {\n        // Setting the `ssfi` flag to `overwritingPropertyGetter` causes this\n        // function to be the starting point for removing implementation frames\n        // from the stack trace of a failed assertion.\n        //\n        // However, we only want to use this function as the starting point if\n        // the `lockSsfi` flag isn't set and proxy protection is disabled.\n        //\n        // If the `lockSsfi` flag is set, then either this assertion has been\n        // overwritten by another assertion, or this assertion is being invoked\n        // from inside of another assertion. In the first case, the `ssfi` flag\n        // has already been set by the overwriting assertion. In the second\n        // case, the `ssfi` flag has already been set by the outer assertion.\n        //\n        // If proxy protection is enabled, then the `ssfi` flag has already been\n        // set by the proxy getter.\n        if (!isProxyEnabled() && !flag(this, 'lockSsfi')) {\n          flag(this, 'ssfi', overwritingPropertyGetter);\n        }\n\n        // Setting the `lockSsfi` flag to `true` prevents the overwritten\n        // assertion from changing the `ssfi` flag. By this point, the `ssfi`\n        // flag is already set to the correct starting point for this assertion.\n        var origLockSsfi = flag(this, 'lockSsfi');\n        flag(this, 'lockSsfi', true);\n        var result = getter(_super).call(this);\n        flag(this, 'lockSsfi', origLockSsfi);\n\n        if (result !== undefined) {\n          return result;\n        }\n\n        var newAssertion = new chai.Assertion();\n        transferFlags(this, newAssertion);\n        return newAssertion;\n      }\n    , configurable: true\n  });\n};\n","/*!\n * Chai - overwriteMethod utility\n * Copyright(c) 2012-2014 Jake Luer <jake@alogicalparadox.com>\n * MIT Licensed\n */\n\nvar addLengthGuard = require('./addLengthGuard');\nvar chai = require('../../chai');\nvar flag = require('./flag');\nvar proxify = require('./proxify');\nvar transferFlags = require('./transferFlags');\n\n/**\n * ### .overwriteMethod(ctx, name, fn)\n *\n * Overwrites an already existing method and provides\n * access to previous function. Must return function\n * to be used for name.\n *\n *     utils.overwriteMethod(chai.Assertion.prototype, 'equal', function (_super) {\n *       return function (str) {\n *         var obj = utils.flag(this, 'object');\n *         if (obj instanceof Foo) {\n *           new chai.Assertion(obj.value).to.equal(str);\n *         } else {\n *           _super.apply(this, arguments);\n *         }\n *       }\n *     });\n *\n * Can also be accessed directly from `chai.Assertion`.\n *\n *     chai.Assertion.overwriteMethod('foo', fn);\n *\n * Then can be used as any other assertion.\n *\n *     expect(myFoo).to.equal('bar');\n *\n * @param {Object} ctx object whose method is to be overwritten\n * @param {String} name of method to overwrite\n * @param {Function} method function that returns a function to be used for name\n * @namespace Utils\n * @name overwriteMethod\n * @api public\n */\n\nmodule.exports = function overwriteMethod(ctx, name, method) {\n  var _method = ctx[name]\n    , _super = function () {\n      throw new Error(name + ' is not a function');\n    };\n\n  if (_method && 'function' === typeof _method)\n    _super = _method;\n\n  var overwritingMethodWrapper = function () {\n    // Setting the `ssfi` flag to `overwritingMethodWrapper` causes this\n    // function to be the starting point for removing implementation frames from\n    // the stack trace of a failed assertion.\n    //\n    // However, we only want to use this function as the starting point if the\n    // `lockSsfi` flag isn't set.\n    //\n    // If the `lockSsfi` flag is set, then either this assertion has been\n    // overwritten by another assertion, or this assertion is being invoked from\n    // inside of another assertion. In the first case, the `ssfi` flag has\n    // already been set by the overwriting assertion. In the second case, the\n    // `ssfi` flag has already been set by the outer assertion.\n    if (!flag(this, 'lockSsfi')) {\n      flag(this, 'ssfi', overwritingMethodWrapper);\n    }\n\n    // Setting the `lockSsfi` flag to `true` prevents the overwritten assertion\n    // from changing the `ssfi` flag. By this point, the `ssfi` flag is already\n    // set to the correct starting point for this assertion.\n    var origLockSsfi = flag(this, 'lockSsfi');\n    flag(this, 'lockSsfi', true);\n    var result = method(_super).apply(this, arguments);\n    flag(this, 'lockSsfi', origLockSsfi);\n\n    if (result !== undefined) {\n      return result;\n    }\n\n    var newAssertion = new chai.Assertion();\n    transferFlags(this, newAssertion);\n    return newAssertion;\n  }\n\n  addLengthGuard(overwritingMethodWrapper, name, false);\n  ctx[name] = proxify(overwritingMethodWrapper, name);\n};\n","/*!\n * Chai - addChainingMethod utility\n * Copyright(c) 2012-2014 Jake Luer <jake@alogicalparadox.com>\n * MIT Licensed\n */\n\n/*!\n * Module dependencies\n */\n\nvar addLengthGuard = require('./addLengthGuard');\nvar chai = require('../../chai');\nvar flag = require('./flag');\nvar proxify = require('./proxify');\nvar transferFlags = require('./transferFlags');\n\n/*!\n * Module variables\n */\n\n// Check whether `Object.setPrototypeOf` is supported\nvar canSetPrototype = typeof Object.setPrototypeOf === 'function';\n\n// Without `Object.setPrototypeOf` support, this module will need to add properties to a function.\n// However, some of functions' own props are not configurable and should be skipped.\nvar testFn = function() {};\nvar excludeNames = Object.getOwnPropertyNames(testFn).filter(function(name) {\n  var propDesc = Object.getOwnPropertyDescriptor(testFn, name);\n\n  // Note: PhantomJS 1.x includes `callee` as one of `testFn`'s own properties,\n  // but then returns `undefined` as the property descriptor for `callee`. As a\n  // workaround, we perform an otherwise unnecessary type-check for `propDesc`,\n  // and then filter it out if it's not an object as it should be.\n  if (typeof propDesc !== 'object')\n    return true;\n\n  return !propDesc.configurable;\n});\n\n// Cache `Function` properties\nvar call  = Function.prototype.call,\n    apply = Function.prototype.apply;\n\n/**\n * ### .addChainableMethod(ctx, name, method, chainingBehavior)\n *\n * Adds a method to an object, such that the method can also be chained.\n *\n *     utils.addChainableMethod(chai.Assertion.prototype, 'foo', function (str) {\n *       var obj = utils.flag(this, 'object');\n *       new chai.Assertion(obj).to.be.equal(str);\n *     });\n *\n * Can also be accessed directly from `chai.Assertion`.\n *\n *     chai.Assertion.addChainableMethod('foo', fn, chainingBehavior);\n *\n * The result can then be used as both a method assertion, executing both `method` and\n * `chainingBehavior`, or as a language chain, which only executes `chainingBehavior`.\n *\n *     expect(fooStr).to.be.foo('bar');\n *     expect(fooStr).to.be.foo.equal('foo');\n *\n * @param {Object} ctx object to which the method is added\n * @param {String} name of method to add\n * @param {Function} method function to be used for `name`, when called\n * @param {Function} chainingBehavior function to be called every time the property is accessed\n * @namespace Utils\n * @name addChainableMethod\n * @api public\n */\n\nmodule.exports = function addChainableMethod(ctx, name, method, chainingBehavior) {\n  if (typeof chainingBehavior !== 'function') {\n    chainingBehavior = function () { };\n  }\n\n  var chainableBehavior = {\n      method: method\n    , chainingBehavior: chainingBehavior\n  };\n\n  // save the methods so we can overwrite them later, if we need to.\n  if (!ctx.__methods) {\n    ctx.__methods = {};\n  }\n  ctx.__methods[name] = chainableBehavior;\n\n  Object.defineProperty(ctx, name,\n    { get: function chainableMethodGetter() {\n        chainableBehavior.chainingBehavior.call(this);\n\n        var chainableMethodWrapper = function () {\n          // Setting the `ssfi` flag to `chainableMethodWrapper` causes this\n          // function to be the starting point for removing implementation\n          // frames from the stack trace of a failed assertion.\n          //\n          // However, we only want to use this function as the starting point if\n          // the `lockSsfi` flag isn't set.\n          //\n          // If the `lockSsfi` flag is set, then this assertion is being\n          // invoked from inside of another assertion. In this case, the `ssfi`\n          // flag has already been set by the outer assertion.\n          //\n          // Note that overwriting a chainable method merely replaces the saved\n          // methods in `ctx.__methods` instead of completely replacing the\n          // overwritten assertion. Therefore, an overwriting assertion won't\n          // set the `ssfi` or `lockSsfi` flags.\n          if (!flag(this, 'lockSsfi')) {\n            flag(this, 'ssfi', chainableMethodWrapper);\n          }\n\n          var result = chainableBehavior.method.apply(this, arguments);\n          if (result !== undefined) {\n            return result;\n          }\n\n          var newAssertion = new chai.Assertion();\n          transferFlags(this, newAssertion);\n          return newAssertion;\n        };\n\n        addLengthGuard(chainableMethodWrapper, name, true);\n\n        // Use `Object.setPrototypeOf` if available\n        if (canSetPrototype) {\n          // Inherit all properties from the object by replacing the `Function` prototype\n          var prototype = Object.create(this);\n          // Restore the `call` and `apply` methods from `Function`\n          prototype.call = call;\n          prototype.apply = apply;\n          Object.setPrototypeOf(chainableMethodWrapper, prototype);\n        }\n        // Otherwise, redefine all properties (slow!)\n        else {\n          var asserterNames = Object.getOwnPropertyNames(ctx);\n          asserterNames.forEach(function (asserterName) {\n            if (excludeNames.indexOf(asserterName) !== -1) {\n              return;\n            }\n\n            var pd = Object.getOwnPropertyDescriptor(ctx, asserterName);\n            Object.defineProperty(chainableMethodWrapper, asserterName, pd);\n          });\n        }\n\n        transferFlags(this, chainableMethodWrapper);\n        return proxify(chainableMethodWrapper);\n      }\n    , configurable: true\n  });\n};\n","/*!\n * Chai - overwriteChainableMethod utility\n * Copyright(c) 2012-2014 Jake Luer <jake@alogicalparadox.com>\n * MIT Licensed\n */\n\nvar chai = require('../../chai');\nvar transferFlags = require('./transferFlags');\n\n/**\n * ### .overwriteChainableMethod(ctx, name, method, chainingBehavior)\n *\n * Overwrites an already existing chainable method\n * and provides access to the previous function or\n * property.  Must return functions to be used for\n * name.\n *\n *     utils.overwriteChainableMethod(chai.Assertion.prototype, 'lengthOf',\n *       function (_super) {\n *       }\n *     , function (_super) {\n *       }\n *     );\n *\n * Can also be accessed directly from `chai.Assertion`.\n *\n *     chai.Assertion.overwriteChainableMethod('foo', fn, fn);\n *\n * Then can be used as any other assertion.\n *\n *     expect(myFoo).to.have.lengthOf(3);\n *     expect(myFoo).to.have.lengthOf.above(3);\n *\n * @param {Object} ctx object whose method / property is to be overwritten\n * @param {String} name of method / property to overwrite\n * @param {Function} method function that returns a function to be used for name\n * @param {Function} chainingBehavior function that returns a function to be used for property\n * @namespace Utils\n * @name overwriteChainableMethod\n * @api public\n */\n\nmodule.exports = function overwriteChainableMethod(ctx, name, method, chainingBehavior) {\n  var chainableBehavior = ctx.__methods[name];\n\n  var _chainingBehavior = chainableBehavior.chainingBehavior;\n  chainableBehavior.chainingBehavior = function overwritingChainableMethodGetter() {\n    var result = chainingBehavior(_chainingBehavior).call(this);\n    if (result !== undefined) {\n      return result;\n    }\n\n    var newAssertion = new chai.Assertion();\n    transferFlags(this, newAssertion);\n    return newAssertion;\n  };\n\n  var _method = chainableBehavior.method;\n  chainableBehavior.method = function overwritingChainableMethodWrapper() {\n    var result = method(_method).apply(this, arguments);\n    if (result !== undefined) {\n      return result;\n    }\n\n    var newAssertion = new chai.Assertion();\n    transferFlags(this, newAssertion);\n    return newAssertion;\n  };\n};\n","/*!\n * Chai - compareByInspect utility\n * Copyright(c) 2011-2016 Jake Luer <jake@alogicalparadox.com>\n * MIT Licensed\n */\n\n/*!\n * Module dependencies\n */\n\nvar inspect = require('./inspect');\n\n/**\n * ### .compareByInspect(mixed, mixed)\n *\n * To be used as a compareFunction with Array.prototype.sort. Compares elements\n * using inspect instead of default behavior of using toString so that Symbols\n * and objects with irregular/missing toString can still be sorted without a\n * TypeError.\n *\n * @param {Mixed} first element to compare\n * @param {Mixed} second element to compare\n * @returns {Number} -1 if 'a' should come before 'b'; otherwise 1\n * @name compareByInspect\n * @namespace Utils\n * @api public\n */\n\nmodule.exports = function compareByInspect(a, b) {\n  return inspect(a) < inspect(b) ? -1 : 1;\n};\n","/*!\n * Chai - getOwnEnumerableProperties utility\n * Copyright(c) 2011-2016 Jake Luer <jake@alogicalparadox.com>\n * MIT Licensed\n */\n\n/*!\n * Module dependencies\n */\n\nvar getOwnEnumerablePropertySymbols = require('./getOwnEnumerablePropertySymbols');\n\n/**\n * ### .getOwnEnumerableProperties(object)\n *\n * This allows the retrieval of directly-owned enumerable property names and\n * symbols of an object. This function is necessary because Object.keys only\n * returns enumerable property names, not enumerable property symbols.\n *\n * @param {Object} object\n * @returns {Array}\n * @namespace Utils\n * @name getOwnEnumerableProperties\n * @api public\n */\n\nmodule.exports = function getOwnEnumerableProperties(obj) {\n  return Object.keys(obj).concat(getOwnEnumerablePropertySymbols(obj));\n};\n","'use strict';\n\n/* !\n * Chai - checkError utility\n * Copyright(c) 2012-2016 Jake Luer <jake@alogicalparadox.com>\n * MIT Licensed\n */\n\n/**\n * ### .checkError\n *\n * Checks that an error conforms to a given set of criteria and/or retrieves information about it.\n *\n * @api public\n */\n\n/**\n * ### .compatibleInstance(thrown, errorLike)\n *\n * Checks if two instances are compatible (strict equal).\n * Returns false if errorLike is not an instance of Error, because instances\n * can only be compatible if they're both error instances.\n *\n * @name compatibleInstance\n * @param {Error} thrown error\n * @param {Error|ErrorConstructor} errorLike object to compare against\n * @namespace Utils\n * @api public\n */\n\nfunction compatibleInstance(thrown, errorLike) {\n  return errorLike instanceof Error && thrown === errorLike;\n}\n\n/**\n * ### .compatibleConstructor(thrown, errorLike)\n *\n * Checks if two constructors are compatible.\n * This function can receive either an error constructor or\n * an error instance as the `errorLike` argument.\n * Constructors are compatible if they're the same or if one is\n * an instance of another.\n *\n * @name compatibleConstructor\n * @param {Error} thrown error\n * @param {Error|ErrorConstructor} errorLike object to compare against\n * @namespace Utils\n * @api public\n */\n\nfunction compatibleConstructor(thrown, errorLike) {\n  if (errorLike instanceof Error) {\n    // If `errorLike` is an instance of any error we compare their constructors\n    return thrown.constructor === errorLike.constructor || thrown instanceof errorLike.constructor;\n  } else if (errorLike.prototype instanceof Error || errorLike === Error) {\n    // If `errorLike` is a constructor that inherits from Error, we compare `thrown` to `errorLike` directly\n    return thrown.constructor === errorLike || thrown instanceof errorLike;\n  }\n\n  return false;\n}\n\n/**\n * ### .compatibleMessage(thrown, errMatcher)\n *\n * Checks if an error's message is compatible with a matcher (String or RegExp).\n * If the message contains the String or passes the RegExp test,\n * it is considered compatible.\n *\n * @name compatibleMessage\n * @param {Error} thrown error\n * @param {String|RegExp} errMatcher to look for into the message\n * @namespace Utils\n * @api public\n */\n\nfunction compatibleMessage(thrown, errMatcher) {\n  var comparisonString = typeof thrown === 'string' ? thrown : thrown.message;\n  if (errMatcher instanceof RegExp) {\n    return errMatcher.test(comparisonString);\n  } else if (typeof errMatcher === 'string') {\n    return comparisonString.indexOf(errMatcher) !== -1; // eslint-disable-line no-magic-numbers\n  }\n\n  return false;\n}\n\n/**\n * ### .getFunctionName(constructorFn)\n *\n * Returns the name of a function.\n * This also includes a polyfill function if `constructorFn.name` is not defined.\n *\n * @name getFunctionName\n * @param {Function} constructorFn\n * @namespace Utils\n * @api private\n */\n\nvar functionNameMatch = /\\s*function(?:\\s|\\s*\\/\\*[^(?:*\\/)]+\\*\\/\\s*)*([^\\(\\/]+)/;\nfunction getFunctionName(constructorFn) {\n  var name = '';\n  if (typeof constructorFn.name === 'undefined') {\n    // Here we run a polyfill if constructorFn.name is not defined\n    var match = String(constructorFn).match(functionNameMatch);\n    if (match) {\n      name = match[1];\n    }\n  } else {\n    name = constructorFn.name;\n  }\n\n  return name;\n}\n\n/**\n * ### .getConstructorName(errorLike)\n *\n * Gets the constructor name for an Error instance or constructor itself.\n *\n * @name getConstructorName\n * @param {Error|ErrorConstructor} errorLike\n * @namespace Utils\n * @api public\n */\n\nfunction getConstructorName(errorLike) {\n  var constructorName = errorLike;\n  if (errorLike instanceof Error) {\n    constructorName = getFunctionName(errorLike.constructor);\n  } else if (typeof errorLike === 'function') {\n    // If `err` is not an instance of Error it is an error constructor itself or another function.\n    // If we've got a common function we get its name, otherwise we may need to create a new instance\n    // of the error just in case it's a poorly-constructed error. Please see chaijs/chai/issues/45 to know more.\n    constructorName = getFunctionName(errorLike).trim() ||\n        getFunctionName(new errorLike()); // eslint-disable-line new-cap\n  }\n\n  return constructorName;\n}\n\n/**\n * ### .getMessage(errorLike)\n *\n * Gets the error message from an error.\n * If `err` is a String itself, we return it.\n * If the error has no message, we return an empty string.\n *\n * @name getMessage\n * @param {Error|String} errorLike\n * @namespace Utils\n * @api public\n */\n\nfunction getMessage(errorLike) {\n  var msg = '';\n  if (errorLike && errorLike.message) {\n    msg = errorLike.message;\n  } else if (typeof errorLike === 'string') {\n    msg = errorLike;\n  }\n\n  return msg;\n}\n\nmodule.exports = {\n  compatibleInstance: compatibleInstance,\n  compatibleConstructor: compatibleConstructor,\n  compatibleMessage: compatibleMessage,\n  getMessage: getMessage,\n  getConstructorName: getConstructorName,\n};\n","/*!\n * Chai - isNaN utility\n * Copyright(c) 2012-2015 Sakthipriyan Vairamani <thechargingvolcano@gmail.com>\n * MIT Licensed\n */\n\n/**\n * ### .isNaN(value)\n *\n * Checks if the given value is NaN or not.\n *\n *     utils.isNaN(NaN); // true\n *\n * @param {Value} The value which has to be checked if it is NaN\n * @name isNaN\n * @api private\n */\n\nfunction isNaN(value) {\n  // Refer http://www.ecma-international.org/ecma-262/6.0/#sec-isnan-number\n  // section's NOTE.\n  return value !== value;\n}\n\n// If ECMAScript 6's Number.isNaN is present, prefer that.\nmodule.exports = Number.isNaN || isNaN;\n","var type = require('type-detect');\n\nvar flag = require('./flag');\n\nfunction isObjectType(obj) {\n  var objectType = type(obj);\n  var objectTypes = ['Array', 'Object', 'function'];\n\n  return objectTypes.indexOf(objectType) !== -1;\n}\n\n/**\n * ### .getOperator(message)\n *\n * Extract the operator from error message.\n * Operator defined is based on below link\n * https://nodejs.org/api/assert.html#assert_assert.\n *\n * Returns the `operator` or `undefined` value for an Assertion.\n *\n * @param {Object} object (constructed Assertion)\n * @param {Arguments} chai.Assertion.prototype.assert arguments\n * @namespace Utils\n * @name getOperator\n * @api public\n */\n\nmodule.exports = function getOperator(obj, args) {\n  var operator = flag(obj, 'operator');\n  var negate = flag(obj, 'negate');\n  var expected = args[3];\n  var msg = negate ? args[2] : args[1];\n\n  if (operator) {\n    return operator;\n  }\n\n  if (typeof msg === 'function') msg = msg();\n\n  msg = msg || '';\n  if (!msg) {\n    return undefined;\n  }\n\n  if (/\\shave\\s/.test(msg)) {\n    return undefined;\n  }\n\n  var isObject = isObjectType(expected);\n  if (/\\snot\\s/.test(msg)) {\n    return isObject ? 'notDeepStrictEqual' : 'notStrictEqual';\n  }\n\n  return isObject ? 'deepStrictEqual' : 'strictEqual';\n};\n","/*!\n * chai\n * http://chaijs.com\n * Copyright(c) 2011-2014 Jake Luer <jake@alogicalparadox.com>\n * MIT Licensed\n */\n\nvar config = require('./config');\n\nmodule.exports = function (_chai, util) {\n  /*!\n   * Module dependencies.\n   */\n\n  var AssertionError = _chai.AssertionError\n    , flag = util.flag;\n\n  /*!\n   * Module export.\n   */\n\n  _chai.Assertion = Assertion;\n\n  /*!\n   * Assertion Constructor\n   *\n   * Creates object for chaining.\n   *\n   * `Assertion` objects contain metadata in the form of flags. Three flags can\n   * be assigned during instantiation by passing arguments to this constructor:\n   *\n   * - `object`: This flag contains the target of the assertion. For example, in\n   *   the assertion `expect(numKittens).to.equal(7);`, the `object` flag will\n   *   contain `numKittens` so that the `equal` assertion can reference it when\n   *   needed.\n   *\n   * - `message`: This flag contains an optional custom error message to be\n   *   prepended to the error message that's generated by the assertion when it\n   *   fails.\n   *\n   * - `ssfi`: This flag stands for \"start stack function indicator\". It\n   *   contains a function reference that serves as the starting point for\n   *   removing frames from the stack trace of the error that's created by the\n   *   assertion when it fails. The goal is to provide a cleaner stack trace to\n   *   end users by removing Chai's internal functions. Note that it only works\n   *   in environments that support `Error.captureStackTrace`, and only when\n   *   `Chai.config.includeStack` hasn't been set to `false`.\n   *\n   * - `lockSsfi`: This flag controls whether or not the given `ssfi` flag\n   *   should retain its current value, even as assertions are chained off of\n   *   this object. This is usually set to `true` when creating a new assertion\n   *   from within another assertion. It's also temporarily set to `true` before\n   *   an overwritten assertion gets called by the overwriting assertion.\n   *\n   * @param {Mixed} obj target of the assertion\n   * @param {String} msg (optional) custom error message\n   * @param {Function} ssfi (optional) starting point for removing stack frames\n   * @param {Boolean} lockSsfi (optional) whether or not the ssfi flag is locked\n   * @api private\n   */\n\n  function Assertion (obj, msg, ssfi, lockSsfi) {\n    flag(this, 'ssfi', ssfi || Assertion);\n    flag(this, 'lockSsfi', lockSsfi);\n    flag(this, 'object', obj);\n    flag(this, 'message', msg);\n\n    return util.proxify(this);\n  }\n\n  Object.defineProperty(Assertion, 'includeStack', {\n    get: function() {\n      console.warn('Assertion.includeStack is deprecated, use chai.config.includeStack instead.');\n      return config.includeStack;\n    },\n    set: function(value) {\n      console.warn('Assertion.includeStack is deprecated, use chai.config.includeStack instead.');\n      config.includeStack = value;\n    }\n  });\n\n  Object.defineProperty(Assertion, 'showDiff', {\n    get: function() {\n      console.warn('Assertion.showDiff is deprecated, use chai.config.showDiff instead.');\n      return config.showDiff;\n    },\n    set: function(value) {\n      console.warn('Assertion.showDiff is deprecated, use chai.config.showDiff instead.');\n      config.showDiff = value;\n    }\n  });\n\n  Assertion.addProperty = function (name, fn) {\n    util.addProperty(this.prototype, name, fn);\n  };\n\n  Assertion.addMethod = function (name, fn) {\n    util.addMethod(this.prototype, name, fn);\n  };\n\n  Assertion.addChainableMethod = function (name, fn, chainingBehavior) {\n    util.addChainableMethod(this.prototype, name, fn, chainingBehavior);\n  };\n\n  Assertion.overwriteProperty = function (name, fn) {\n    util.overwriteProperty(this.prototype, name, fn);\n  };\n\n  Assertion.overwriteMethod = function (name, fn) {\n    util.overwriteMethod(this.prototype, name, fn);\n  };\n\n  Assertion.overwriteChainableMethod = function (name, fn, chainingBehavior) {\n    util.overwriteChainableMethod(this.prototype, name, fn, chainingBehavior);\n  };\n\n  /**\n   * ### .assert(expression, message, negateMessage, expected, actual, showDiff)\n   *\n   * Executes an expression and check expectations. Throws AssertionError for reporting if test doesn't pass.\n   *\n   * @name assert\n   * @param {Philosophical} expression to be tested\n   * @param {String|Function} message or function that returns message to display if expression fails\n   * @param {String|Function} negatedMessage or function that returns negatedMessage to display if negated expression fails\n   * @param {Mixed} expected value (remember to check for negation)\n   * @param {Mixed} actual (optional) will default to `this.obj`\n   * @param {Boolean} showDiff (optional) when set to `true`, assert will display a diff in addition to the message if expression fails\n   * @api private\n   */\n\n  Assertion.prototype.assert = function (expr, msg, negateMsg, expected, _actual, showDiff) {\n    var ok = util.test(this, arguments);\n    if (false !== showDiff) showDiff = true;\n    if (undefined === expected && undefined === _actual) showDiff = false;\n    if (true !== config.showDiff) showDiff = false;\n\n    if (!ok) {\n      msg = util.getMessage(this, arguments);\n      var actual = util.getActual(this, arguments);\n      var assertionErrorObjectProperties = {\n          actual: actual\n        , expected: expected\n        , showDiff: showDiff\n      };\n\n      var operator = util.getOperator(this, arguments);\n      if (operator) {\n        assertionErrorObjectProperties.operator = operator;\n      }\n\n      throw new AssertionError(\n        msg,\n        assertionErrorObjectProperties,\n        (config.includeStack) ? this.assert : flag(this, 'ssfi'));\n    }\n  };\n\n  /*!\n   * ### ._obj\n   *\n   * Quick reference to stored `actual` value for plugin developers.\n   *\n   * @api private\n   */\n\n  Object.defineProperty(Assertion.prototype, '_obj',\n    { get: function () {\n        return flag(this, 'object');\n      }\n    , set: function (val) {\n        flag(this, 'object', val);\n      }\n  });\n};\n","/*!\n * chai\n * http://chaijs.com\n * Copyright(c) 2011-2014 Jake Luer <jake@alogicalparadox.com>\n * MIT Licensed\n */\n\nmodule.exports = function (chai, _) {\n  var Assertion = chai.Assertion\n    , AssertionError = chai.AssertionError\n    , flag = _.flag;\n\n  /**\n   * ### Language Chains\n   *\n   * The following are provided as chainable getters to improve the readability\n   * of your assertions.\n   *\n   * **Chains**\n   *\n   * - to\n   * - be\n   * - been\n   * - is\n   * - that\n   * - which\n   * - and\n   * - has\n   * - have\n   * - with\n   * - at\n   * - of\n   * - same\n   * - but\n   * - does\n   * - still\n   * - also\n   *\n   * @name language chains\n   * @namespace BDD\n   * @api public\n   */\n\n  [ 'to', 'be', 'been', 'is'\n  , 'and', 'has', 'have', 'with'\n  , 'that', 'which', 'at', 'of'\n  , 'same', 'but', 'does', 'still', \"also\" ].forEach(function (chain) {\n    Assertion.addProperty(chain);\n  });\n\n  /**\n   * ### .not\n   *\n   * Negates all assertions that follow in the chain.\n   *\n   *     expect(function () {}).to.not.throw();\n   *     expect({a: 1}).to.not.have.property('b');\n   *     expect([1, 2]).to.be.an('array').that.does.not.include(3);\n   *\n   * Just because you can negate any assertion with `.not` doesn't mean you\n   * should. With great power comes great responsibility. It's often best to\n   * assert that the one expected output was produced, rather than asserting\n   * that one of countless unexpected outputs wasn't produced. See individual\n   * assertions for specific guidance.\n   *\n   *     expect(2).to.equal(2); // Recommended\n   *     expect(2).to.not.equal(1); // Not recommended\n   *\n   * @name not\n   * @namespace BDD\n   * @api public\n   */\n\n  Assertion.addProperty('not', function () {\n    flag(this, 'negate', true);\n  });\n\n  /**\n   * ### .deep\n   *\n   * Causes all `.equal`, `.include`, `.members`, `.keys`, and `.property`\n   * assertions that follow in the chain to use deep equality instead of strict\n   * (`===`) equality. See the `deep-eql` project page for info on the deep\n   * equality algorithm: https://github.com/chaijs/deep-eql.\n   *\n   *     // Target object deeply (but not strictly) equals `{a: 1}`\n   *     expect({a: 1}).to.deep.equal({a: 1});\n   *     expect({a: 1}).to.not.equal({a: 1});\n   *\n   *     // Target array deeply (but not strictly) includes `{a: 1}`\n   *     expect([{a: 1}]).to.deep.include({a: 1});\n   *     expect([{a: 1}]).to.not.include({a: 1});\n   *\n   *     // Target object deeply (but not strictly) includes `x: {a: 1}`\n   *     expect({x: {a: 1}}).to.deep.include({x: {a: 1}});\n   *     expect({x: {a: 1}}).to.not.include({x: {a: 1}});\n   *\n   *     // Target array deeply (but not strictly) has member `{a: 1}`\n   *     expect([{a: 1}]).to.have.deep.members([{a: 1}]);\n   *     expect([{a: 1}]).to.not.have.members([{a: 1}]);\n   *\n   *     // Target set deeply (but not strictly) has key `{a: 1}`\n   *     expect(new Set([{a: 1}])).to.have.deep.keys([{a: 1}]);\n   *     expect(new Set([{a: 1}])).to.not.have.keys([{a: 1}]);\n   *\n   *     // Target object deeply (but not strictly) has property `x: {a: 1}`\n   *     expect({x: {a: 1}}).to.have.deep.property('x', {a: 1});\n   *     expect({x: {a: 1}}).to.not.have.property('x', {a: 1});\n   *\n   * @name deep\n   * @namespace BDD\n   * @api public\n   */\n\n  Assertion.addProperty('deep', function () {\n    flag(this, 'deep', true);\n  });\n\n  /**\n   * ### .nested\n   *\n   * Enables dot- and bracket-notation in all `.property` and `.include`\n   * assertions that follow in the chain.\n   *\n   *     expect({a: {b: ['x', 'y']}}).to.have.nested.property('a.b[1]');\n   *     expect({a: {b: ['x', 'y']}}).to.nested.include({'a.b[1]': 'y'});\n   *\n   * If `.` or `[]` are part of an actual property name, they can be escaped by\n   * adding two backslashes before them.\n   *\n   *     expect({'.a': {'[b]': 'x'}}).to.have.nested.property('\\\\.a.\\\\[b\\\\]');\n   *     expect({'.a': {'[b]': 'x'}}).to.nested.include({'\\\\.a.\\\\[b\\\\]': 'x'});\n   *\n   * `.nested` cannot be combined with `.own`.\n   *\n   * @name nested\n   * @namespace BDD\n   * @api public\n   */\n\n  Assertion.addProperty('nested', function () {\n    flag(this, 'nested', true);\n  });\n\n  /**\n   * ### .own\n   *\n   * Causes all `.property` and `.include` assertions that follow in the chain\n   * to ignore inherited properties.\n   *\n   *     Object.prototype.b = 2;\n   *\n   *     expect({a: 1}).to.have.own.property('a');\n   *     expect({a: 1}).to.have.property('b');\n   *     expect({a: 1}).to.not.have.own.property('b');\n   *\n   *     expect({a: 1}).to.own.include({a: 1});\n   *     expect({a: 1}).to.include({b: 2}).but.not.own.include({b: 2});\n   *\n   * `.own` cannot be combined with `.nested`.\n   *\n   * @name own\n   * @namespace BDD\n   * @api public\n   */\n\n  Assertion.addProperty('own', function () {\n    flag(this, 'own', true);\n  });\n\n  /**\n   * ### .ordered\n   *\n   * Causes all `.members` assertions that follow in the chain to require that\n   * members be in the same order.\n   *\n   *     expect([1, 2]).to.have.ordered.members([1, 2])\n   *       .but.not.have.ordered.members([2, 1]);\n   *\n   * When `.include` and `.ordered` are combined, the ordering begins at the\n   * start of both arrays.\n   *\n   *     expect([1, 2, 3]).to.include.ordered.members([1, 2])\n   *       .but.not.include.ordered.members([2, 3]);\n   *\n   * @name ordered\n   * @namespace BDD\n   * @api public\n   */\n\n  Assertion.addProperty('ordered', function () {\n    flag(this, 'ordered', true);\n  });\n\n  /**\n   * ### .any\n   *\n   * Causes all `.keys` assertions that follow in the chain to only require that\n   * the target have at least one of the given keys. This is the opposite of\n   * `.all`, which requires that the target have all of the given keys.\n   *\n   *     expect({a: 1, b: 2}).to.not.have.any.keys('c', 'd');\n   *\n   * See the `.keys` doc for guidance on when to use `.any` or `.all`.\n   *\n   * @name any\n   * @namespace BDD\n   * @api public\n   */\n\n  Assertion.addProperty('any', function () {\n    flag(this, 'any', true);\n    flag(this, 'all', false);\n  });\n\n  /**\n   * ### .all\n   *\n   * Causes all `.keys` assertions that follow in the chain to require that the\n   * target have all of the given keys. This is the opposite of `.any`, which\n   * only requires that the target have at least one of the given keys.\n   *\n   *     expect({a: 1, b: 2}).to.have.all.keys('a', 'b');\n   *\n   * Note that `.all` is used by default when neither `.all` nor `.any` are\n   * added earlier in the chain. However, it's often best to add `.all` anyway\n   * because it improves readability.\n   *\n   * See the `.keys` doc for guidance on when to use `.any` or `.all`.\n   *\n   * @name all\n   * @namespace BDD\n   * @api public\n   */\n\n  Assertion.addProperty('all', function () {\n    flag(this, 'all', true);\n    flag(this, 'any', false);\n  });\n\n  /**\n   * ### .a(type[, msg])\n   *\n   * Asserts that the target's type is equal to the given string `type`. Types\n   * are case insensitive. See the `type-detect` project page for info on the\n   * type detection algorithm: https://github.com/chaijs/type-detect.\n   *\n   *     expect('foo').to.be.a('string');\n   *     expect({a: 1}).to.be.an('object');\n   *     expect(null).to.be.a('null');\n   *     expect(undefined).to.be.an('undefined');\n   *     expect(new Error).to.be.an('error');\n   *     expect(Promise.resolve()).to.be.a('promise');\n   *     expect(new Float32Array).to.be.a('float32array');\n   *     expect(Symbol()).to.be.a('symbol');\n   *\n   * `.a` supports objects that have a custom type set via `Symbol.toStringTag`.\n   *\n   *     var myObj = {\n   *       [Symbol.toStringTag]: 'myCustomType'\n   *     };\n   *\n   *     expect(myObj).to.be.a('myCustomType').but.not.an('object');\n   *\n   * It's often best to use `.a` to check a target's type before making more\n   * assertions on the same target. That way, you avoid unexpected behavior from\n   * any assertion that does different things based on the target's type.\n   *\n   *     expect([1, 2, 3]).to.be.an('array').that.includes(2);\n   *     expect([]).to.be.an('array').that.is.empty;\n   *\n   * Add `.not` earlier in the chain to negate `.a`. However, it's often best to\n   * assert that the target is the expected type, rather than asserting that it\n   * isn't one of many unexpected types.\n   *\n   *     expect('foo').to.be.a('string'); // Recommended\n   *     expect('foo').to.not.be.an('array'); // Not recommended\n   *\n   * `.a` accepts an optional `msg` argument which is a custom error message to\n   * show when the assertion fails. The message can also be given as the second\n   * argument to `expect`.\n   *\n   *     expect(1).to.be.a('string', 'nooo why fail??');\n   *     expect(1, 'nooo why fail??').to.be.a('string');\n   *\n   * `.a` can also be used as a language chain to improve the readability of\n   * your assertions.\n   *\n   *     expect({b: 2}).to.have.a.property('b');\n   *\n   * The alias `.an` can be used interchangeably with `.a`.\n   *\n   * @name a\n   * @alias an\n   * @param {String} type\n   * @param {String} msg _optional_\n   * @namespace BDD\n   * @api public\n   */\n\n  function an (type, msg) {\n    if (msg) flag(this, 'message', msg);\n    type = type.toLowerCase();\n    var obj = flag(this, 'object')\n      , article = ~[ 'a', 'e', 'i', 'o', 'u' ].indexOf(type.charAt(0)) ? 'an ' : 'a ';\n\n    this.assert(\n        type === _.type(obj).toLowerCase()\n      , 'expected #{this} to be ' + article + type\n      , 'expected #{this} not to be ' + article + type\n    );\n  }\n\n  Assertion.addChainableMethod('an', an);\n  Assertion.addChainableMethod('a', an);\n\n  /**\n   * ### .include(val[, msg])\n   *\n   * When the target is a string, `.include` asserts that the given string `val`\n   * is a substring of the target.\n   *\n   *     expect('foobar').to.include('foo');\n   *\n   * When the target is an array, `.include` asserts that the given `val` is a\n   * member of the target.\n   *\n   *     expect([1, 2, 3]).to.include(2);\n   *\n   * When the target is an object, `.include` asserts that the given object\n   * `val`'s properties are a subset of the target's properties.\n   *\n   *     expect({a: 1, b: 2, c: 3}).to.include({a: 1, b: 2});\n   *\n   * When the target is a Set or WeakSet, `.include` asserts that the given `val` is a\n   * member of the target. SameValueZero equality algorithm is used.\n   *\n   *     expect(new Set([1, 2])).to.include(2);\n   *\n   * When the target is a Map, `.include` asserts that the given `val` is one of\n   * the values of the target. SameValueZero equality algorithm is used.\n   *\n   *     expect(new Map([['a', 1], ['b', 2]])).to.include(2);\n   *\n   * Because `.include` does different things based on the target's type, it's\n   * important to check the target's type before using `.include`. See the `.a`\n   * doc for info on testing a target's type.\n   *\n   *     expect([1, 2, 3]).to.be.an('array').that.includes(2);\n   *\n   * By default, strict (`===`) equality is used to compare array members and\n   * object properties. Add `.deep` earlier in the chain to use deep equality\n   * instead (WeakSet targets are not supported). See the `deep-eql` project\n   * page for info on the deep equality algorithm: https://github.com/chaijs/deep-eql.\n   *\n   *     // Target array deeply (but not strictly) includes `{a: 1}`\n   *     expect([{a: 1}]).to.deep.include({a: 1});\n   *     expect([{a: 1}]).to.not.include({a: 1});\n   *\n   *     // Target object deeply (but not strictly) includes `x: {a: 1}`\n   *     expect({x: {a: 1}}).to.deep.include({x: {a: 1}});\n   *     expect({x: {a: 1}}).to.not.include({x: {a: 1}});\n   *\n   * By default, all of the target's properties are searched when working with\n   * objects. This includes properties that are inherited and/or non-enumerable.\n   * Add `.own` earlier in the chain to exclude the target's inherited\n   * properties from the search.\n   *\n   *     Object.prototype.b = 2;\n   *\n   *     expect({a: 1}).to.own.include({a: 1});\n   *     expect({a: 1}).to.include({b: 2}).but.not.own.include({b: 2});\n   *\n   * Note that a target object is always only searched for `val`'s own\n   * enumerable properties.\n   *\n   * `.deep` and `.own` can be combined.\n   *\n   *     expect({a: {b: 2}}).to.deep.own.include({a: {b: 2}});\n   *\n   * Add `.nested` earlier in the chain to enable dot- and bracket-notation when\n   * referencing nested properties.\n   *\n   *     expect({a: {b: ['x', 'y']}}).to.nested.include({'a.b[1]': 'y'});\n   *\n   * If `.` or `[]` are part of an actual property name, they can be escaped by\n   * adding two backslashes before them.\n   *\n   *     expect({'.a': {'[b]': 2}}).to.nested.include({'\\\\.a.\\\\[b\\\\]': 2});\n   *\n   * `.deep` and `.nested` can be combined.\n   *\n   *     expect({a: {b: [{c: 3}]}}).to.deep.nested.include({'a.b[0]': {c: 3}});\n   *\n   * `.own` and `.nested` cannot be combined.\n   *\n   * Add `.not` earlier in the chain to negate `.include`.\n   *\n   *     expect('foobar').to.not.include('taco');\n   *     expect([1, 2, 3]).to.not.include(4);\n   *\n   * However, it's dangerous to negate `.include` when the target is an object.\n   * The problem is that it creates uncertain expectations by asserting that the\n   * target object doesn't have all of `val`'s key/value pairs but may or may\n   * not have some of them. It's often best to identify the exact output that's\n   * expected, and then write an assertion that only accepts that exact output.\n   *\n   * When the target object isn't even expected to have `val`'s keys, it's\n   * often best to assert exactly that.\n   *\n   *     expect({c: 3}).to.not.have.any.keys('a', 'b'); // Recommended\n   *     expect({c: 3}).to.not.include({a: 1, b: 2}); // Not recommended\n   *\n   * When the target object is expected to have `val`'s keys, it's often best to\n   * assert that each of the properties has its expected value, rather than\n   * asserting that each property doesn't have one of many unexpected values.\n   *\n   *     expect({a: 3, b: 4}).to.include({a: 3, b: 4}); // Recommended\n   *     expect({a: 3, b: 4}).to.not.include({a: 1, b: 2}); // Not recommended\n   *\n   * `.include` accepts an optional `msg` argument which is a custom error\n   * message to show when the assertion fails. The message can also be given as\n   * the second argument to `expect`.\n   *\n   *     expect([1, 2, 3]).to.include(4, 'nooo why fail??');\n   *     expect([1, 2, 3], 'nooo why fail??').to.include(4);\n   *\n   * `.include` can also be used as a language chain, causing all `.members` and\n   * `.keys` assertions that follow in the chain to require the target to be a\n   * superset of the expected set, rather than an identical set. Note that\n   * `.members` ignores duplicates in the subset when `.include` is added.\n   *\n   *     // Target object's keys are a superset of ['a', 'b'] but not identical\n   *     expect({a: 1, b: 2, c: 3}).to.include.all.keys('a', 'b');\n   *     expect({a: 1, b: 2, c: 3}).to.not.have.all.keys('a', 'b');\n   *\n   *     // Target array is a superset of [1, 2] but not identical\n   *     expect([1, 2, 3]).to.include.members([1, 2]);\n   *     expect([1, 2, 3]).to.not.have.members([1, 2]);\n   *\n   *     // Duplicates in the subset are ignored\n   *     expect([1, 2, 3]).to.include.members([1, 2, 2, 2]);\n   *\n   * Note that adding `.any` earlier in the chain causes the `.keys` assertion\n   * to ignore `.include`.\n   *\n   *     // Both assertions are identical\n   *     expect({a: 1}).to.include.any.keys('a', 'b');\n   *     expect({a: 1}).to.have.any.keys('a', 'b');\n   *\n   * The aliases `.includes`, `.contain`, and `.contains` can be used\n   * interchangeably with `.include`.\n   *\n   * @name include\n   * @alias contain\n   * @alias includes\n   * @alias contains\n   * @param {Mixed} val\n   * @param {String} msg _optional_\n   * @namespace BDD\n   * @api public\n   */\n\n  function SameValueZero(a, b) {\n    return (_.isNaN(a) && _.isNaN(b)) || a === b;\n  }\n\n  function includeChainingBehavior () {\n    flag(this, 'contains', true);\n  }\n\n  function include (val, msg) {\n    if (msg) flag(this, 'message', msg);\n\n    var obj = flag(this, 'object')\n      , objType = _.type(obj).toLowerCase()\n      , flagMsg = flag(this, 'message')\n      , negate = flag(this, 'negate')\n      , ssfi = flag(this, 'ssfi')\n      , isDeep = flag(this, 'deep')\n      , descriptor = isDeep ? 'deep ' : '';\n\n    flagMsg = flagMsg ? flagMsg + ': ' : '';\n\n    var included = false;\n\n    switch (objType) {\n      case 'string':\n        included = obj.indexOf(val) !== -1;\n        break;\n\n      case 'weakset':\n        if (isDeep) {\n          throw new AssertionError(\n            flagMsg + 'unable to use .deep.include with WeakSet',\n            undefined,\n            ssfi\n          );\n        }\n\n        included = obj.has(val);\n        break;\n\n      case 'map':\n        var isEql = isDeep ? _.eql : SameValueZero;\n        obj.forEach(function (item) {\n          included = included || isEql(item, val);\n        });\n        break;\n\n      case 'set':\n        if (isDeep) {\n          obj.forEach(function (item) {\n            included = included || _.eql(item, val);\n          });\n        } else {\n          included = obj.has(val);\n        }\n        break;\n\n      case 'array':\n        if (isDeep) {\n          included = obj.some(function (item) {\n            return _.eql(item, val);\n          })\n        } else {\n          included = obj.indexOf(val) !== -1;\n        }\n        break;\n\n      default:\n        // This block is for asserting a subset of properties in an object.\n        // `_.expectTypes` isn't used here because `.include` should work with\n        // objects with a custom `@@toStringTag`.\n        if (val !== Object(val)) {\n          throw new AssertionError(\n            flagMsg + 'the given combination of arguments ('\n            + objType + ' and '\n            + _.type(val).toLowerCase() + ')'\n            + ' is invalid for this assertion. '\n            + 'You can use an array, a map, an object, a set, a string, '\n            + 'or a weakset instead of a '\n            + _.type(val).toLowerCase(),\n            undefined,\n            ssfi\n          );\n        }\n\n        var props = Object.keys(val)\n          , firstErr = null\n          , numErrs = 0;\n\n        props.forEach(function (prop) {\n          var propAssertion = new Assertion(obj);\n          _.transferFlags(this, propAssertion, true);\n          flag(propAssertion, 'lockSsfi', true);\n\n          if (!negate || props.length === 1) {\n            propAssertion.property(prop, val[prop]);\n            return;\n          }\n\n          try {\n            propAssertion.property(prop, val[prop]);\n          } catch (err) {\n            if (!_.checkError.compatibleConstructor(err, AssertionError)) {\n              throw err;\n            }\n            if (firstErr === null) firstErr = err;\n            numErrs++;\n          }\n        }, this);\n\n        // When validating .not.include with multiple properties, we only want\n        // to throw an assertion error if all of the properties are included,\n        // in which case we throw the first property assertion error that we\n        // encountered.\n        if (negate && props.length > 1 && numErrs === props.length) {\n          throw firstErr;\n        }\n        return;\n    }\n\n    // Assert inclusion in collection or substring in a string.\n    this.assert(\n      included\n      , 'expected #{this} to ' + descriptor + 'include ' + _.inspect(val)\n      , 'expected #{this} to not ' + descriptor + 'include ' + _.inspect(val));\n  }\n\n  Assertion.addChainableMethod('include', include, includeChainingBehavior);\n  Assertion.addChainableMethod('contain', include, includeChainingBehavior);\n  Assertion.addChainableMethod('contains', include, includeChainingBehavior);\n  Assertion.addChainableMethod('includes', include, includeChainingBehavior);\n\n  /**\n   * ### .ok\n   *\n   * Asserts that the target is a truthy value (considered `true` in boolean context).\n   * However, it's often best to assert that the target is strictly (`===`) or\n   * deeply equal to its expected value.\n   *\n   *     expect(1).to.equal(1); // Recommended\n   *     expect(1).to.be.ok; // Not recommended\n   *\n   *     expect(true).to.be.true; // Recommended\n   *     expect(true).to.be.ok; // Not recommended\n   *\n   * Add `.not` earlier in the chain to negate `.ok`.\n   *\n   *     expect(0).to.equal(0); // Recommended\n   *     expect(0).to.not.be.ok; // Not recommended\n   *\n   *     expect(false).to.be.false; // Recommended\n   *     expect(false).to.not.be.ok; // Not recommended\n   *\n   *     expect(null).to.be.null; // Recommended\n   *     expect(null).to.not.be.ok; // Not recommended\n   *\n   *     expect(undefined).to.be.undefined; // Recommended\n   *     expect(undefined).to.not.be.ok; // Not recommended\n   *\n   * A custom error message can be given as the second argument to `expect`.\n   *\n   *     expect(false, 'nooo why fail??').to.be.ok;\n   *\n   * @name ok\n   * @namespace BDD\n   * @api public\n   */\n\n  Assertion.addProperty('ok', function () {\n    this.assert(\n        flag(this, 'object')\n      , 'expected #{this} to be truthy'\n      , 'expected #{this} to be falsy');\n  });\n\n  /**\n   * ### .true\n   *\n   * Asserts that the target is strictly (`===`) equal to `true`.\n   *\n   *     expect(true).to.be.true;\n   *\n   * Add `.not` earlier in the chain to negate `.true`. However, it's often best\n   * to assert that the target is equal to its expected value, rather than not\n   * equal to `true`.\n   *\n   *     expect(false).to.be.false; // Recommended\n   *     expect(false).to.not.be.true; // Not recommended\n   *\n   *     expect(1).to.equal(1); // Recommended\n   *     expect(1).to.not.be.true; // Not recommended\n   *\n   * A custom error message can be given as the second argument to `expect`.\n   *\n   *     expect(false, 'nooo why fail??').to.be.true;\n   *\n   * @name true\n   * @namespace BDD\n   * @api public\n   */\n\n  Assertion.addProperty('true', function () {\n    this.assert(\n        true === flag(this, 'object')\n      , 'expected #{this} to be true'\n      , 'expected #{this} to be false'\n      , flag(this, 'negate') ? false : true\n    );\n  });\n\n  /**\n   * ### .false\n   *\n   * Asserts that the target is strictly (`===`) equal to `false`.\n   *\n   *     expect(false).to.be.false;\n   *\n   * Add `.not` earlier in the chain to negate `.false`. However, it's often\n   * best to assert that the target is equal to its expected value, rather than\n   * not equal to `false`.\n   *\n   *     expect(true).to.be.true; // Recommended\n   *     expect(true).to.not.be.false; // Not recommended\n   *\n   *     expect(1).to.equal(1); // Recommended\n   *     expect(1).to.not.be.false; // Not recommended\n   *\n   * A custom error message can be given as the second argument to `expect`.\n   *\n   *     expect(true, 'nooo why fail??').to.be.false;\n   *\n   * @name false\n   * @namespace BDD\n   * @api public\n   */\n\n  Assertion.addProperty('false', function () {\n    this.assert(\n        false === flag(this, 'object')\n      , 'expected #{this} to be false'\n      , 'expected #{this} to be true'\n      , flag(this, 'negate') ? true : false\n    );\n  });\n\n  /**\n   * ### .null\n   *\n   * Asserts that the target is strictly (`===`) equal to `null`.\n   *\n   *     expect(null).to.be.null;\n   *\n   * Add `.not` earlier in the chain to negate `.null`. However, it's often best\n   * to assert that the target is equal to its expected value, rather than not\n   * equal to `null`.\n   *\n   *     expect(1).to.equal(1); // Recommended\n   *     expect(1).to.not.be.null; // Not recommended\n   *\n   * A custom error message can be given as the second argument to `expect`.\n   *\n   *     expect(42, 'nooo why fail??').to.be.null;\n   *\n   * @name null\n   * @namespace BDD\n   * @api public\n   */\n\n  Assertion.addProperty('null', function () {\n    this.assert(\n        null === flag(this, 'object')\n      , 'expected #{this} to be null'\n      , 'expected #{this} not to be null'\n    );\n  });\n\n  /**\n   * ### .undefined\n   *\n   * Asserts that the target is strictly (`===`) equal to `undefined`.\n   *\n   *     expect(undefined).to.be.undefined;\n   *\n   * Add `.not` earlier in the chain to negate `.undefined`. However, it's often\n   * best to assert that the target is equal to its expected value, rather than\n   * not equal to `undefined`.\n   *\n   *     expect(1).to.equal(1); // Recommended\n   *     expect(1).to.not.be.undefined; // Not recommended\n   *\n   * A custom error message can be given as the second argument to `expect`.\n   *\n   *     expect(42, 'nooo why fail??').to.be.undefined;\n   *\n   * @name undefined\n   * @namespace BDD\n   * @api public\n   */\n\n  Assertion.addProperty('undefined', function () {\n    this.assert(\n        undefined === flag(this, 'object')\n      , 'expected #{this} to be undefined'\n      , 'expected #{this} not to be undefined'\n    );\n  });\n\n  /**\n   * ### .NaN\n   *\n   * Asserts that the target is exactly `NaN`.\n   *\n   *     expect(NaN).to.be.NaN;\n   *\n   * Add `.not` earlier in the chain to negate `.NaN`. However, it's often best\n   * to assert that the target is equal to its expected value, rather than not\n   * equal to `NaN`.\n   *\n   *     expect('foo').to.equal('foo'); // Recommended\n   *     expect('foo').to.not.be.NaN; // Not recommended\n   *\n   * A custom error message can be given as the second argument to `expect`.\n   *\n   *     expect(42, 'nooo why fail??').to.be.NaN;\n   *\n   * @name NaN\n   * @namespace BDD\n   * @api public\n   */\n\n  Assertion.addProperty('NaN', function () {\n    this.assert(\n        _.isNaN(flag(this, 'object'))\n        , 'expected #{this} to be NaN'\n        , 'expected #{this} not to be NaN'\n    );\n  });\n\n  /**\n   * ### .exist\n   *\n   * Asserts that the target is not strictly (`===`) equal to either `null` or\n   * `undefined`. However, it's often best to assert that the target is equal to\n   * its expected value.\n   *\n   *     expect(1).to.equal(1); // Recommended\n   *     expect(1).to.exist; // Not recommended\n   *\n   *     expect(0).to.equal(0); // Recommended\n   *     expect(0).to.exist; // Not recommended\n   *\n   * Add `.not` earlier in the chain to negate `.exist`.\n   *\n   *     expect(null).to.be.null; // Recommended\n   *     expect(null).to.not.exist; // Not recommended\n   *\n   *     expect(undefined).to.be.undefined; // Recommended\n   *     expect(undefined).to.not.exist; // Not recommended\n   *\n   * A custom error message can be given as the second argument to `expect`.\n   *\n   *     expect(null, 'nooo why fail??').to.exist;\n   *\n   * The alias `.exists` can be used interchangeably with `.exist`.\n   *\n   * @name exist\n   * @alias exists\n   * @namespace BDD\n   * @api public\n   */\n\n  function assertExist () {\n    var val = flag(this, 'object');\n    this.assert(\n        val !== null && val !== undefined\n      , 'expected #{this} to exist'\n      , 'expected #{this} to not exist'\n    );\n  }\n\n  Assertion.addProperty('exist', assertExist);\n  Assertion.addProperty('exists', assertExist);\n\n  /**\n   * ### .empty\n   *\n   * When the target is a string or array, `.empty` asserts that the target's\n   * `length` property is strictly (`===`) equal to `0`.\n   *\n   *     expect([]).to.be.empty;\n   *     expect('').to.be.empty;\n   *\n   * When the target is a map or set, `.empty` asserts that the target's `size`\n   * property is strictly equal to `0`.\n   *\n   *     expect(new Set()).to.be.empty;\n   *     expect(new Map()).to.be.empty;\n   *\n   * When the target is a non-function object, `.empty` asserts that the target\n   * doesn't have any own enumerable properties. Properties with Symbol-based\n   * keys are excluded from the count.\n   *\n   *     expect({}).to.be.empty;\n   *\n   * Because `.empty` does different things based on the target's type, it's\n   * important to check the target's type before using `.empty`. See the `.a`\n   * doc for info on testing a target's type.\n   *\n   *     expect([]).to.be.an('array').that.is.empty;\n   *\n   * Add `.not` earlier in the chain to negate `.empty`. However, it's often\n   * best to assert that the target contains its expected number of values,\n   * rather than asserting that it's not empty.\n   *\n   *     expect([1, 2, 3]).to.have.lengthOf(3); // Recommended\n   *     expect([1, 2, 3]).to.not.be.empty; // Not recommended\n   *\n   *     expect(new Set([1, 2, 3])).to.have.property('size', 3); // Recommended\n   *     expect(new Set([1, 2, 3])).to.not.be.empty; // Not recommended\n   *\n   *     expect(Object.keys({a: 1})).to.have.lengthOf(1); // Recommended\n   *     expect({a: 1}).to.not.be.empty; // Not recommended\n   *\n   * A custom error message can be given as the second argument to `expect`.\n   *\n   *     expect([1, 2, 3], 'nooo why fail??').to.be.empty;\n   *\n   * @name empty\n   * @namespace BDD\n   * @api public\n   */\n\n  Assertion.addProperty('empty', function () {\n    var val = flag(this, 'object')\n      , ssfi = flag(this, 'ssfi')\n      , flagMsg = flag(this, 'message')\n      , itemsCount;\n\n    flagMsg = flagMsg ? flagMsg + ': ' : '';\n\n    switch (_.type(val).toLowerCase()) {\n      case 'array':\n      case 'string':\n        itemsCount = val.length;\n        break;\n      case 'map':\n      case 'set':\n        itemsCount = val.size;\n        break;\n      case 'weakmap':\n      case 'weakset':\n        throw new AssertionError(\n          flagMsg + '.empty was passed a weak collection',\n          undefined,\n          ssfi\n        );\n      case 'function':\n        var msg = flagMsg + '.empty was passed a function ' + _.getName(val);\n        throw new AssertionError(msg.trim(), undefined, ssfi);\n      default:\n        if (val !== Object(val)) {\n          throw new AssertionError(\n            flagMsg + '.empty was passed non-string primitive ' + _.inspect(val),\n            undefined,\n            ssfi\n          );\n        }\n        itemsCount = Object.keys(val).length;\n    }\n\n    this.assert(\n        0 === itemsCount\n      , 'expected #{this} to be empty'\n      , 'expected #{this} not to be empty'\n    );\n  });\n\n  /**\n   * ### .arguments\n   *\n   * Asserts that the target is an `arguments` object.\n   *\n   *     function test () {\n   *       expect(arguments).to.be.arguments;\n   *     }\n   *\n   *     test();\n   *\n   * Add `.not` earlier in the chain to negate `.arguments`. However, it's often\n   * best to assert which type the target is expected to be, rather than\n   * asserting that it’s not an `arguments` object.\n   *\n   *     expect('foo').to.be.a('string'); // Recommended\n   *     expect('foo').to.not.be.arguments; // Not recommended\n   *\n   * A custom error message can be given as the second argument to `expect`.\n   *\n   *     expect({}, 'nooo why fail??').to.be.arguments;\n   *\n   * The alias `.Arguments` can be used interchangeably with `.arguments`.\n   *\n   * @name arguments\n   * @alias Arguments\n   * @namespace BDD\n   * @api public\n   */\n\n  function checkArguments () {\n    var obj = flag(this, 'object')\n      , type = _.type(obj);\n    this.assert(\n        'Arguments' === type\n      , 'expected #{this} to be arguments but got ' + type\n      , 'expected #{this} to not be arguments'\n    );\n  }\n\n  Assertion.addProperty('arguments', checkArguments);\n  Assertion.addProperty('Arguments', checkArguments);\n\n  /**\n   * ### .equal(val[, msg])\n   *\n   * Asserts that the target is strictly (`===`) equal to the given `val`.\n   *\n   *     expect(1).to.equal(1);\n   *     expect('foo').to.equal('foo');\n   *\n   * Add `.deep` earlier in the chain to use deep equality instead. See the\n   * `deep-eql` project page for info on the deep equality algorithm:\n   * https://github.com/chaijs/deep-eql.\n   *\n   *     // Target object deeply (but not strictly) equals `{a: 1}`\n   *     expect({a: 1}).to.deep.equal({a: 1});\n   *     expect({a: 1}).to.not.equal({a: 1});\n   *\n   *     // Target array deeply (but not strictly) equals `[1, 2]`\n   *     expect([1, 2]).to.deep.equal([1, 2]);\n   *     expect([1, 2]).to.not.equal([1, 2]);\n   *\n   * Add `.not` earlier in the chain to negate `.equal`. However, it's often\n   * best to assert that the target is equal to its expected value, rather than\n   * not equal to one of countless unexpected values.\n   *\n   *     expect(1).to.equal(1); // Recommended\n   *     expect(1).to.not.equal(2); // Not recommended\n   *\n   * `.equal` accepts an optional `msg` argument which is a custom error message\n   * to show when the assertion fails. The message can also be given as the\n   * second argument to `expect`.\n   *\n   *     expect(1).to.equal(2, 'nooo why fail??');\n   *     expect(1, 'nooo why fail??').to.equal(2);\n   *\n   * The aliases `.equals` and `eq` can be used interchangeably with `.equal`.\n   *\n   * @name equal\n   * @alias equals\n   * @alias eq\n   * @param {Mixed} val\n   * @param {String} msg _optional_\n   * @namespace BDD\n   * @api public\n   */\n\n  function assertEqual (val, msg) {\n    if (msg) flag(this, 'message', msg);\n    var obj = flag(this, 'object');\n    if (flag(this, 'deep')) {\n      var prevLockSsfi = flag(this, 'lockSsfi');\n      flag(this, 'lockSsfi', true);\n      this.eql(val);\n      flag(this, 'lockSsfi', prevLockSsfi);\n    } else {\n      this.assert(\n          val === obj\n        , 'expected #{this} to equal #{exp}'\n        , 'expected #{this} to not equal #{exp}'\n        , val\n        , this._obj\n        , true\n      );\n    }\n  }\n\n  Assertion.addMethod('equal', assertEqual);\n  Assertion.addMethod('equals', assertEqual);\n  Assertion.addMethod('eq', assertEqual);\n\n  /**\n   * ### .eql(obj[, msg])\n   *\n   * Asserts that the target is deeply equal to the given `obj`. See the\n   * `deep-eql` project page for info on the deep equality algorithm:\n   * https://github.com/chaijs/deep-eql.\n   *\n   *     // Target object is deeply (but not strictly) equal to {a: 1}\n   *     expect({a: 1}).to.eql({a: 1}).but.not.equal({a: 1});\n   *\n   *     // Target array is deeply (but not strictly) equal to [1, 2]\n   *     expect([1, 2]).to.eql([1, 2]).but.not.equal([1, 2]);\n   *\n   * Add `.not` earlier in the chain to negate `.eql`. However, it's often best\n   * to assert that the target is deeply equal to its expected value, rather\n   * than not deeply equal to one of countless unexpected values.\n   *\n   *     expect({a: 1}).to.eql({a: 1}); // Recommended\n   *     expect({a: 1}).to.not.eql({b: 2}); // Not recommended\n   *\n   * `.eql` accepts an optional `msg` argument which is a custom error message\n   * to show when the assertion fails. The message can also be given as the\n   * second argument to `expect`.\n   *\n   *     expect({a: 1}).to.eql({b: 2}, 'nooo why fail??');\n   *     expect({a: 1}, 'nooo why fail??').to.eql({b: 2});\n   *\n   * The alias `.eqls` can be used interchangeably with `.eql`.\n   *\n   * The `.deep.equal` assertion is almost identical to `.eql` but with one\n   * difference: `.deep.equal` causes deep equality comparisons to also be used\n   * for any other assertions that follow in the chain.\n   *\n   * @name eql\n   * @alias eqls\n   * @param {Mixed} obj\n   * @param {String} msg _optional_\n   * @namespace BDD\n   * @api public\n   */\n\n  function assertEql(obj, msg) {\n    if (msg) flag(this, 'message', msg);\n    this.assert(\n        _.eql(obj, flag(this, 'object'))\n      , 'expected #{this} to deeply equal #{exp}'\n      , 'expected #{this} to not deeply equal #{exp}'\n      , obj\n      , this._obj\n      , true\n    );\n  }\n\n  Assertion.addMethod('eql', assertEql);\n  Assertion.addMethod('eqls', assertEql);\n\n  /**\n   * ### .above(n[, msg])\n   *\n   * Asserts that the target is a number or a date greater than the given number or date `n` respectively.\n   * However, it's often best to assert that the target is equal to its expected\n   * value.\n   *\n   *     expect(2).to.equal(2); // Recommended\n   *     expect(2).to.be.above(1); // Not recommended\n   *\n   * Add `.lengthOf` earlier in the chain to assert that the target's `length`\n   * or `size` is greater than the given number `n`.\n   *\n   *     expect('foo').to.have.lengthOf(3); // Recommended\n   *     expect('foo').to.have.lengthOf.above(2); // Not recommended\n   *\n   *     expect([1, 2, 3]).to.have.lengthOf(3); // Recommended\n   *     expect([1, 2, 3]).to.have.lengthOf.above(2); // Not recommended\n   *\n   * Add `.not` earlier in the chain to negate `.above`.\n   *\n   *     expect(2).to.equal(2); // Recommended\n   *     expect(1).to.not.be.above(2); // Not recommended\n   *\n   * `.above` accepts an optional `msg` argument which is a custom error message\n   * to show when the assertion fails. The message can also be given as the\n   * second argument to `expect`.\n   *\n   *     expect(1).to.be.above(2, 'nooo why fail??');\n   *     expect(1, 'nooo why fail??').to.be.above(2);\n   *\n   * The aliases `.gt` and `.greaterThan` can be used interchangeably with\n   * `.above`.\n   *\n   * @name above\n   * @alias gt\n   * @alias greaterThan\n   * @param {Number} n\n   * @param {String} msg _optional_\n   * @namespace BDD\n   * @api public\n   */\n\n  function assertAbove (n, msg) {\n    if (msg) flag(this, 'message', msg);\n    var obj = flag(this, 'object')\n      , doLength = flag(this, 'doLength')\n      , flagMsg = flag(this, 'message')\n      , msgPrefix = ((flagMsg) ? flagMsg + ': ' : '')\n      , ssfi = flag(this, 'ssfi')\n      , objType = _.type(obj).toLowerCase()\n      , nType = _.type(n).toLowerCase()\n      , errorMessage\n      , shouldThrow = true;\n\n    if (doLength && objType !== 'map' && objType !== 'set') {\n      new Assertion(obj, flagMsg, ssfi, true).to.have.property('length');\n    }\n\n    if (!doLength && (objType === 'date' && nType !== 'date')) {\n      errorMessage = msgPrefix + 'the argument to above must be a date';\n    } else if (nType !== 'number' && (doLength || objType === 'number')) {\n      errorMessage = msgPrefix + 'the argument to above must be a number';\n    } else if (!doLength && (objType !== 'date' && objType !== 'number')) {\n      var printObj = (objType === 'string') ? \"'\" + obj + \"'\" : obj;\n      errorMessage = msgPrefix + 'expected ' + printObj + ' to be a number or a date';\n    } else {\n      shouldThrow = false;\n    }\n\n    if (shouldThrow) {\n      throw new AssertionError(errorMessage, undefined, ssfi);\n    }\n\n    if (doLength) {\n      var descriptor = 'length'\n        , itemsCount;\n      if (objType === 'map' || objType === 'set') {\n        descriptor = 'size';\n        itemsCount = obj.size;\n      } else {\n        itemsCount = obj.length;\n      }\n      this.assert(\n          itemsCount > n\n        , 'expected #{this} to have a ' + descriptor + ' above #{exp} but got #{act}'\n        , 'expected #{this} to not have a ' + descriptor + ' above #{exp}'\n        , n\n        , itemsCount\n      );\n    } else {\n      this.assert(\n          obj > n\n        , 'expected #{this} to be above #{exp}'\n        , 'expected #{this} to be at most #{exp}'\n        , n\n      );\n    }\n  }\n\n  Assertion.addMethod('above', assertAbove);\n  Assertion.addMethod('gt', assertAbove);\n  Assertion.addMethod('greaterThan', assertAbove);\n\n  /**\n   * ### .least(n[, msg])\n   *\n   * Asserts that the target is a number or a date greater than or equal to the given\n   * number or date `n` respectively. However, it's often best to assert that the target is equal to\n   * its expected value.\n   *\n   *     expect(2).to.equal(2); // Recommended\n   *     expect(2).to.be.at.least(1); // Not recommended\n   *     expect(2).to.be.at.least(2); // Not recommended\n   *\n   * Add `.lengthOf` earlier in the chain to assert that the target's `length`\n   * or `size` is greater than or equal to the given number `n`.\n   *\n   *     expect('foo').to.have.lengthOf(3); // Recommended\n   *     expect('foo').to.have.lengthOf.at.least(2); // Not recommended\n   *\n   *     expect([1, 2, 3]).to.have.lengthOf(3); // Recommended\n   *     expect([1, 2, 3]).to.have.lengthOf.at.least(2); // Not recommended\n   *\n   * Add `.not` earlier in the chain to negate `.least`.\n   *\n   *     expect(1).to.equal(1); // Recommended\n   *     expect(1).to.not.be.at.least(2); // Not recommended\n   *\n   * `.least` accepts an optional `msg` argument which is a custom error message\n   * to show when the assertion fails. The message can also be given as the\n   * second argument to `expect`.\n   *\n   *     expect(1).to.be.at.least(2, 'nooo why fail??');\n   *     expect(1, 'nooo why fail??').to.be.at.least(2);\n   *\n   * The aliases `.gte` and `.greaterThanOrEqual` can be used interchangeably with\n   * `.least`.\n   *\n   * @name least\n   * @alias gte\n   * @alias greaterThanOrEqual\n   * @param {Number} n\n   * @param {String} msg _optional_\n   * @namespace BDD\n   * @api public\n   */\n\n  function assertLeast (n, msg) {\n    if (msg) flag(this, 'message', msg);\n    var obj = flag(this, 'object')\n      , doLength = flag(this, 'doLength')\n      , flagMsg = flag(this, 'message')\n      , msgPrefix = ((flagMsg) ? flagMsg + ': ' : '')\n      , ssfi = flag(this, 'ssfi')\n      , objType = _.type(obj).toLowerCase()\n      , nType = _.type(n).toLowerCase()\n      , errorMessage\n      , shouldThrow = true;\n\n    if (doLength && objType !== 'map' && objType !== 'set') {\n      new Assertion(obj, flagMsg, ssfi, true).to.have.property('length');\n    }\n\n    if (!doLength && (objType === 'date' && nType !== 'date')) {\n      errorMessage = msgPrefix + 'the argument to least must be a date';\n    } else if (nType !== 'number' && (doLength || objType === 'number')) {\n      errorMessage = msgPrefix + 'the argument to least must be a number';\n    } else if (!doLength && (objType !== 'date' && objType !== 'number')) {\n      var printObj = (objType === 'string') ? \"'\" + obj + \"'\" : obj;\n      errorMessage = msgPrefix + 'expected ' + printObj + ' to be a number or a date';\n    } else {\n      shouldThrow = false;\n    }\n\n    if (shouldThrow) {\n      throw new AssertionError(errorMessage, undefined, ssfi);\n    }\n\n    if (doLength) {\n      var descriptor = 'length'\n        , itemsCount;\n      if (objType === 'map' || objType === 'set') {\n        descriptor = 'size';\n        itemsCount = obj.size;\n      } else {\n        itemsCount = obj.length;\n      }\n      this.assert(\n          itemsCount >= n\n        , 'expected #{this} to have a ' + descriptor + ' at least #{exp} but got #{act}'\n        , 'expected #{this} to have a ' + descriptor + ' below #{exp}'\n        , n\n        , itemsCount\n      );\n    } else {\n      this.assert(\n          obj >= n\n        , 'expected #{this} to be at least #{exp}'\n        , 'expected #{this} to be below #{exp}'\n        , n\n      );\n    }\n  }\n\n  Assertion.addMethod('least', assertLeast);\n  Assertion.addMethod('gte', assertLeast);\n  Assertion.addMethod('greaterThanOrEqual', assertLeast);\n\n  /**\n   * ### .below(n[, msg])\n   *\n   * Asserts that the target is a number or a date less than the given number or date `n` respectively.\n   * However, it's often best to assert that the target is equal to its expected\n   * value.\n   *\n   *     expect(1).to.equal(1); // Recommended\n   *     expect(1).to.be.below(2); // Not recommended\n   *\n   * Add `.lengthOf` earlier in the chain to assert that the target's `length`\n   * or `size` is less than the given number `n`.\n   *\n   *     expect('foo').to.have.lengthOf(3); // Recommended\n   *     expect('foo').to.have.lengthOf.below(4); // Not recommended\n   *\n   *     expect([1, 2, 3]).to.have.length(3); // Recommended\n   *     expect([1, 2, 3]).to.have.lengthOf.below(4); // Not recommended\n   *\n   * Add `.not` earlier in the chain to negate `.below`.\n   *\n   *     expect(2).to.equal(2); // Recommended\n   *     expect(2).to.not.be.below(1); // Not recommended\n   *\n   * `.below` accepts an optional `msg` argument which is a custom error message\n   * to show when the assertion fails. The message can also be given as the\n   * second argument to `expect`.\n   *\n   *     expect(2).to.be.below(1, 'nooo why fail??');\n   *     expect(2, 'nooo why fail??').to.be.below(1);\n   *\n   * The aliases `.lt` and `.lessThan` can be used interchangeably with\n   * `.below`.\n   *\n   * @name below\n   * @alias lt\n   * @alias lessThan\n   * @param {Number} n\n   * @param {String} msg _optional_\n   * @namespace BDD\n   * @api public\n   */\n\n  function assertBelow (n, msg) {\n    if (msg) flag(this, 'message', msg);\n    var obj = flag(this, 'object')\n      , doLength = flag(this, 'doLength')\n      , flagMsg = flag(this, 'message')\n      , msgPrefix = ((flagMsg) ? flagMsg + ': ' : '')\n      , ssfi = flag(this, 'ssfi')\n      , objType = _.type(obj).toLowerCase()\n      , nType = _.type(n).toLowerCase()\n      , errorMessage\n      , shouldThrow = true;\n\n    if (doLength && objType !== 'map' && objType !== 'set') {\n      new Assertion(obj, flagMsg, ssfi, true).to.have.property('length');\n    }\n\n    if (!doLength && (objType === 'date' && nType !== 'date')) {\n      errorMessage = msgPrefix + 'the argument to below must be a date';\n    } else if (nType !== 'number' && (doLength || objType === 'number')) {\n      errorMessage = msgPrefix + 'the argument to below must be a number';\n    } else if (!doLength && (objType !== 'date' && objType !== 'number')) {\n      var printObj = (objType === 'string') ? \"'\" + obj + \"'\" : obj;\n      errorMessage = msgPrefix + 'expected ' + printObj + ' to be a number or a date';\n    } else {\n      shouldThrow = false;\n    }\n\n    if (shouldThrow) {\n      throw new AssertionError(errorMessage, undefined, ssfi);\n    }\n\n    if (doLength) {\n      var descriptor = 'length'\n        , itemsCount;\n      if (objType === 'map' || objType === 'set') {\n        descriptor = 'size';\n        itemsCount = obj.size;\n      } else {\n        itemsCount = obj.length;\n      }\n      this.assert(\n          itemsCount < n\n        , 'expected #{this} to have a ' + descriptor + ' below #{exp} but got #{act}'\n        , 'expected #{this} to not have a ' + descriptor + ' below #{exp}'\n        , n\n        , itemsCount\n      );\n    } else {\n      this.assert(\n          obj < n\n        , 'expected #{this} to be below #{exp}'\n        , 'expected #{this} to be at least #{exp}'\n        , n\n      );\n    }\n  }\n\n  Assertion.addMethod('below', assertBelow);\n  Assertion.addMethod('lt', assertBelow);\n  Assertion.addMethod('lessThan', assertBelow);\n\n  /**\n   * ### .most(n[, msg])\n   *\n   * Asserts that the target is a number or a date less than or equal to the given number\n   * or date `n` respectively. However, it's often best to assert that the target is equal to its\n   * expected value.\n   *\n   *     expect(1).to.equal(1); // Recommended\n   *     expect(1).to.be.at.most(2); // Not recommended\n   *     expect(1).to.be.at.most(1); // Not recommended\n   *\n   * Add `.lengthOf` earlier in the chain to assert that the target's `length`\n   * or `size` is less than or equal to the given number `n`.\n   *\n   *     expect('foo').to.have.lengthOf(3); // Recommended\n   *     expect('foo').to.have.lengthOf.at.most(4); // Not recommended\n   *\n   *     expect([1, 2, 3]).to.have.lengthOf(3); // Recommended\n   *     expect([1, 2, 3]).to.have.lengthOf.at.most(4); // Not recommended\n   *\n   * Add `.not` earlier in the chain to negate `.most`.\n   *\n   *     expect(2).to.equal(2); // Recommended\n   *     expect(2).to.not.be.at.most(1); // Not recommended\n   *\n   * `.most` accepts an optional `msg` argument which is a custom error message\n   * to show when the assertion fails. The message can also be given as the\n   * second argument to `expect`.\n   *\n   *     expect(2).to.be.at.most(1, 'nooo why fail??');\n   *     expect(2, 'nooo why fail??').to.be.at.most(1);\n   *\n   * The aliases `.lte` and `.lessThanOrEqual` can be used interchangeably with\n   * `.most`.\n   *\n   * @name most\n   * @alias lte\n   * @alias lessThanOrEqual\n   * @param {Number} n\n   * @param {String} msg _optional_\n   * @namespace BDD\n   * @api public\n   */\n\n  function assertMost (n, msg) {\n    if (msg) flag(this, 'message', msg);\n    var obj = flag(this, 'object')\n      , doLength = flag(this, 'doLength')\n      , flagMsg = flag(this, 'message')\n      , msgPrefix = ((flagMsg) ? flagMsg + ': ' : '')\n      , ssfi = flag(this, 'ssfi')\n      , objType = _.type(obj).toLowerCase()\n      , nType = _.type(n).toLowerCase()\n      , errorMessage\n      , shouldThrow = true;\n\n    if (doLength && objType !== 'map' && objType !== 'set') {\n      new Assertion(obj, flagMsg, ssfi, true).to.have.property('length');\n    }\n\n    if (!doLength && (objType === 'date' && nType !== 'date')) {\n      errorMessage = msgPrefix + 'the argument to most must be a date';\n    } else if (nType !== 'number' && (doLength || objType === 'number')) {\n      errorMessage = msgPrefix + 'the argument to most must be a number';\n    } else if (!doLength && (objType !== 'date' && objType !== 'number')) {\n      var printObj = (objType === 'string') ? \"'\" + obj + \"'\" : obj;\n      errorMessage = msgPrefix + 'expected ' + printObj + ' to be a number or a date';\n    } else {\n      shouldThrow = false;\n    }\n\n    if (shouldThrow) {\n      throw new AssertionError(errorMessage, undefined, ssfi);\n    }\n\n    if (doLength) {\n      var descriptor = 'length'\n        , itemsCount;\n      if (objType === 'map' || objType === 'set') {\n        descriptor = 'size';\n        itemsCount = obj.size;\n      } else {\n        itemsCount = obj.length;\n      }\n      this.assert(\n          itemsCount <= n\n        , 'expected #{this} to have a ' + descriptor + ' at most #{exp} but got #{act}'\n        , 'expected #{this} to have a ' + descriptor + ' above #{exp}'\n        , n\n        , itemsCount\n      );\n    } else {\n      this.assert(\n          obj <= n\n        , 'expected #{this} to be at most #{exp}'\n        , 'expected #{this} to be above #{exp}'\n        , n\n      );\n    }\n  }\n\n  Assertion.addMethod('most', assertMost);\n  Assertion.addMethod('lte', assertMost);\n  Assertion.addMethod('lessThanOrEqual', assertMost);\n\n  /**\n   * ### .within(start, finish[, msg])\n   *\n   * Asserts that the target is a number or a date greater than or equal to the given\n   * number or date `start`, and less than or equal to the given number or date `finish` respectively.\n   * However, it's often best to assert that the target is equal to its expected\n   * value.\n   *\n   *     expect(2).to.equal(2); // Recommended\n   *     expect(2).to.be.within(1, 3); // Not recommended\n   *     expect(2).to.be.within(2, 3); // Not recommended\n   *     expect(2).to.be.within(1, 2); // Not recommended\n   *\n   * Add `.lengthOf` earlier in the chain to assert that the target's `length`\n   * or `size` is greater than or equal to the given number `start`, and less\n   * than or equal to the given number `finish`.\n   *\n   *     expect('foo').to.have.lengthOf(3); // Recommended\n   *     expect('foo').to.have.lengthOf.within(2, 4); // Not recommended\n   *\n   *     expect([1, 2, 3]).to.have.lengthOf(3); // Recommended\n   *     expect([1, 2, 3]).to.have.lengthOf.within(2, 4); // Not recommended\n   *\n   * Add `.not` earlier in the chain to negate `.within`.\n   *\n   *     expect(1).to.equal(1); // Recommended\n   *     expect(1).to.not.be.within(2, 4); // Not recommended\n   *\n   * `.within` accepts an optional `msg` argument which is a custom error\n   * message to show when the assertion fails. The message can also be given as\n   * the second argument to `expect`.\n   *\n   *     expect(4).to.be.within(1, 3, 'nooo why fail??');\n   *     expect(4, 'nooo why fail??').to.be.within(1, 3);\n   *\n   * @name within\n   * @param {Number} start lower bound inclusive\n   * @param {Number} finish upper bound inclusive\n   * @param {String} msg _optional_\n   * @namespace BDD\n   * @api public\n   */\n\n  Assertion.addMethod('within', function (start, finish, msg) {\n    if (msg) flag(this, 'message', msg);\n    var obj = flag(this, 'object')\n      , doLength = flag(this, 'doLength')\n      , flagMsg = flag(this, 'message')\n      , msgPrefix = ((flagMsg) ? flagMsg + ': ' : '')\n      , ssfi = flag(this, 'ssfi')\n      , objType = _.type(obj).toLowerCase()\n      , startType = _.type(start).toLowerCase()\n      , finishType = _.type(finish).toLowerCase()\n      , errorMessage\n      , shouldThrow = true\n      , range = (startType === 'date' && finishType === 'date')\n          ? start.toUTCString() + '..' + finish.toUTCString()\n          : start + '..' + finish;\n\n    if (doLength && objType !== 'map' && objType !== 'set') {\n      new Assertion(obj, flagMsg, ssfi, true).to.have.property('length');\n    }\n\n    if (!doLength && (objType === 'date' && (startType !== 'date' || finishType !== 'date'))) {\n      errorMessage = msgPrefix + 'the arguments to within must be dates';\n    } else if ((startType !== 'number' || finishType !== 'number') && (doLength || objType === 'number')) {\n      errorMessage = msgPrefix + 'the arguments to within must be numbers';\n    } else if (!doLength && (objType !== 'date' && objType !== 'number')) {\n      var printObj = (objType === 'string') ? \"'\" + obj + \"'\" : obj;\n      errorMessage = msgPrefix + 'expected ' + printObj + ' to be a number or a date';\n    } else {\n      shouldThrow = false;\n    }\n\n    if (shouldThrow) {\n      throw new AssertionError(errorMessage, undefined, ssfi);\n    }\n\n    if (doLength) {\n      var descriptor = 'length'\n        , itemsCount;\n      if (objType === 'map' || objType === 'set') {\n        descriptor = 'size';\n        itemsCount = obj.size;\n      } else {\n        itemsCount = obj.length;\n      }\n      this.assert(\n          itemsCount >= start && itemsCount <= finish\n        , 'expected #{this} to have a ' + descriptor + ' within ' + range\n        , 'expected #{this} to not have a ' + descriptor + ' within ' + range\n      );\n    } else {\n      this.assert(\n          obj >= start && obj <= finish\n        , 'expected #{this} to be within ' + range\n        , 'expected #{this} to not be within ' + range\n      );\n    }\n  });\n\n  /**\n   * ### .instanceof(constructor[, msg])\n   *\n   * Asserts that the target is an instance of the given `constructor`.\n   *\n   *     function Cat () { }\n   *\n   *     expect(new Cat()).to.be.an.instanceof(Cat);\n   *     expect([1, 2]).to.be.an.instanceof(Array);\n   *\n   * Add `.not` earlier in the chain to negate `.instanceof`.\n   *\n   *     expect({a: 1}).to.not.be.an.instanceof(Array);\n   *\n   * `.instanceof` accepts an optional `msg` argument which is a custom error\n   * message to show when the assertion fails. The message can also be given as\n   * the second argument to `expect`.\n   *\n   *     expect(1).to.be.an.instanceof(Array, 'nooo why fail??');\n   *     expect(1, 'nooo why fail??').to.be.an.instanceof(Array);\n   *\n   * Due to limitations in ES5, `.instanceof` may not always work as expected\n   * when using a transpiler such as Babel or TypeScript. In particular, it may\n   * produce unexpected results when subclassing built-in object such as\n   * `Array`, `Error`, and `Map`. See your transpiler's docs for details:\n   *\n   * - ([Babel](https://babeljs.io/docs/usage/caveats/#classes))\n   * - ([TypeScript](https://github.com/Microsoft/TypeScript/wiki/Breaking-Changes#extending-built-ins-like-error-array-and-map-may-no-longer-work))\n   *\n   * The alias `.instanceOf` can be used interchangeably with `.instanceof`.\n   *\n   * @name instanceof\n   * @param {Constructor} constructor\n   * @param {String} msg _optional_\n   * @alias instanceOf\n   * @namespace BDD\n   * @api public\n   */\n\n  function assertInstanceOf (constructor, msg) {\n    if (msg) flag(this, 'message', msg);\n\n    var target = flag(this, 'object')\n    var ssfi = flag(this, 'ssfi');\n    var flagMsg = flag(this, 'message');\n\n    try {\n      var isInstanceOf = target instanceof constructor;\n    } catch (err) {\n      if (err instanceof TypeError) {\n        flagMsg = flagMsg ? flagMsg + ': ' : '';\n        throw new AssertionError(\n          flagMsg + 'The instanceof assertion needs a constructor but '\n            + _.type(constructor) + ' was given.',\n          undefined,\n          ssfi\n        );\n      }\n      throw err;\n    }\n\n    var name = _.getName(constructor);\n    if (name === null) {\n      name = 'an unnamed constructor';\n    }\n\n    this.assert(\n        isInstanceOf\n      , 'expected #{this} to be an instance of ' + name\n      , 'expected #{this} to not be an instance of ' + name\n    );\n  };\n\n  Assertion.addMethod('instanceof', assertInstanceOf);\n  Assertion.addMethod('instanceOf', assertInstanceOf);\n\n  /**\n   * ### .property(name[, val[, msg]])\n   *\n   * Asserts that the target has a property with the given key `name`.\n   *\n   *     expect({a: 1}).to.have.property('a');\n   *\n   * When `val` is provided, `.property` also asserts that the property's value\n   * is equal to the given `val`.\n   *\n   *     expect({a: 1}).to.have.property('a', 1);\n   *\n   * By default, strict (`===`) equality is used. Add `.deep` earlier in the\n   * chain to use deep equality instead. See the `deep-eql` project page for\n   * info on the deep equality algorithm: https://github.com/chaijs/deep-eql.\n   *\n   *     // Target object deeply (but not strictly) has property `x: {a: 1}`\n   *     expect({x: {a: 1}}).to.have.deep.property('x', {a: 1});\n   *     expect({x: {a: 1}}).to.not.have.property('x', {a: 1});\n   *\n   * The target's enumerable and non-enumerable properties are always included\n   * in the search. By default, both own and inherited properties are included.\n   * Add `.own` earlier in the chain to exclude inherited properties from the\n   * search.\n   *\n   *     Object.prototype.b = 2;\n   *\n   *     expect({a: 1}).to.have.own.property('a');\n   *     expect({a: 1}).to.have.own.property('a', 1);\n   *     expect({a: 1}).to.have.property('b');\n   *     expect({a: 1}).to.not.have.own.property('b');\n   *\n   * `.deep` and `.own` can be combined.\n   *\n   *     expect({x: {a: 1}}).to.have.deep.own.property('x', {a: 1});\n   *\n   * Add `.nested` earlier in the chain to enable dot- and bracket-notation when\n   * referencing nested properties.\n   *\n   *     expect({a: {b: ['x', 'y']}}).to.have.nested.property('a.b[1]');\n   *     expect({a: {b: ['x', 'y']}}).to.have.nested.property('a.b[1]', 'y');\n   *\n   * If `.` or `[]` are part of an actual property name, they can be escaped by\n   * adding two backslashes before them.\n   *\n   *     expect({'.a': {'[b]': 'x'}}).to.have.nested.property('\\\\.a.\\\\[b\\\\]');\n   *\n   * `.deep` and `.nested` can be combined.\n   *\n   *     expect({a: {b: [{c: 3}]}})\n   *       .to.have.deep.nested.property('a.b[0]', {c: 3});\n   *\n   * `.own` and `.nested` cannot be combined.\n   *\n   * Add `.not` earlier in the chain to negate `.property`.\n   *\n   *     expect({a: 1}).to.not.have.property('b');\n   *\n   * However, it's dangerous to negate `.property` when providing `val`. The\n   * problem is that it creates uncertain expectations by asserting that the\n   * target either doesn't have a property with the given key `name`, or that it\n   * does have a property with the given key `name` but its value isn't equal to\n   * the given `val`. It's often best to identify the exact output that's\n   * expected, and then write an assertion that only accepts that exact output.\n   *\n   * When the target isn't expected to have a property with the given key\n   * `name`, it's often best to assert exactly that.\n   *\n   *     expect({b: 2}).to.not.have.property('a'); // Recommended\n   *     expect({b: 2}).to.not.have.property('a', 1); // Not recommended\n   *\n   * When the target is expected to have a property with the given key `name`,\n   * it's often best to assert that the property has its expected value, rather\n   * than asserting that it doesn't have one of many unexpected values.\n   *\n   *     expect({a: 3}).to.have.property('a', 3); // Recommended\n   *     expect({a: 3}).to.not.have.property('a', 1); // Not recommended\n   *\n   * `.property` changes the target of any assertions that follow in the chain\n   * to be the value of the property from the original target object.\n   *\n   *     expect({a: 1}).to.have.property('a').that.is.a('number');\n   *\n   * `.property` accepts an optional `msg` argument which is a custom error\n   * message to show when the assertion fails. The message can also be given as\n   * the second argument to `expect`. When not providing `val`, only use the\n   * second form.\n   *\n   *     // Recommended\n   *     expect({a: 1}).to.have.property('a', 2, 'nooo why fail??');\n   *     expect({a: 1}, 'nooo why fail??').to.have.property('a', 2);\n   *     expect({a: 1}, 'nooo why fail??').to.have.property('b');\n   *\n   *     // Not recommended\n   *     expect({a: 1}).to.have.property('b', undefined, 'nooo why fail??');\n   *\n   * The above assertion isn't the same thing as not providing `val`. Instead,\n   * it's asserting that the target object has a `b` property that's equal to\n   * `undefined`.\n   *\n   * The assertions `.ownProperty` and `.haveOwnProperty` can be used\n   * interchangeably with `.own.property`.\n   *\n   * @name property\n   * @param {String} name\n   * @param {Mixed} val (optional)\n   * @param {String} msg _optional_\n   * @returns value of property for chaining\n   * @namespace BDD\n   * @api public\n   */\n\n  function assertProperty (name, val, msg) {\n    if (msg) flag(this, 'message', msg);\n\n    var isNested = flag(this, 'nested')\n      , isOwn = flag(this, 'own')\n      , flagMsg = flag(this, 'message')\n      , obj = flag(this, 'object')\n      , ssfi = flag(this, 'ssfi')\n      , nameType = typeof name;\n\n    flagMsg = flagMsg ? flagMsg + ': ' : '';\n\n    if (isNested) {\n      if (nameType !== 'string') {\n        throw new AssertionError(\n          flagMsg + 'the argument to property must be a string when using nested syntax',\n          undefined,\n          ssfi\n        );\n      }\n    } else {\n      if (nameType !== 'string' && nameType !== 'number' && nameType !== 'symbol') {\n        throw new AssertionError(\n          flagMsg + 'the argument to property must be a string, number, or symbol',\n          undefined,\n          ssfi\n        );\n      }\n    }\n\n    if (isNested && isOwn) {\n      throw new AssertionError(\n        flagMsg + 'The \"nested\" and \"own\" flags cannot be combined.',\n        undefined,\n        ssfi\n      );\n    }\n\n    if (obj === null || obj === undefined) {\n      throw new AssertionError(\n        flagMsg + 'Target cannot be null or undefined.',\n        undefined,\n        ssfi\n      );\n    }\n\n    var isDeep = flag(this, 'deep')\n      , negate = flag(this, 'negate')\n      , pathInfo = isNested ? _.getPathInfo(obj, name) : null\n      , value = isNested ? pathInfo.value : obj[name];\n\n    var descriptor = '';\n    if (isDeep) descriptor += 'deep ';\n    if (isOwn) descriptor += 'own ';\n    if (isNested) descriptor += 'nested ';\n    descriptor += 'property ';\n\n    var hasProperty;\n    if (isOwn) hasProperty = Object.prototype.hasOwnProperty.call(obj, name);\n    else if (isNested) hasProperty = pathInfo.exists;\n    else hasProperty = _.hasProperty(obj, name);\n\n    // When performing a negated assertion for both name and val, merely having\n    // a property with the given name isn't enough to cause the assertion to\n    // fail. It must both have a property with the given name, and the value of\n    // that property must equal the given val. Therefore, skip this assertion in\n    // favor of the next.\n    if (!negate || arguments.length === 1) {\n      this.assert(\n          hasProperty\n        , 'expected #{this} to have ' + descriptor + _.inspect(name)\n        , 'expected #{this} to not have ' + descriptor + _.inspect(name));\n    }\n\n    if (arguments.length > 1) {\n      this.assert(\n          hasProperty && (isDeep ? _.eql(val, value) : val === value)\n        , 'expected #{this} to have ' + descriptor + _.inspect(name) + ' of #{exp}, but got #{act}'\n        , 'expected #{this} to not have ' + descriptor + _.inspect(name) + ' of #{act}'\n        , val\n        , value\n      );\n    }\n\n    flag(this, 'object', value);\n  }\n\n  Assertion.addMethod('property', assertProperty);\n\n  function assertOwnProperty (name, value, msg) {\n    flag(this, 'own', true);\n    assertProperty.apply(this, arguments);\n  }\n\n  Assertion.addMethod('ownProperty', assertOwnProperty);\n  Assertion.addMethod('haveOwnProperty', assertOwnProperty);\n\n  /**\n   * ### .ownPropertyDescriptor(name[, descriptor[, msg]])\n   *\n   * Asserts that the target has its own property descriptor with the given key\n   * `name`. Enumerable and non-enumerable properties are included in the\n   * search.\n   *\n   *     expect({a: 1}).to.have.ownPropertyDescriptor('a');\n   *\n   * When `descriptor` is provided, `.ownPropertyDescriptor` also asserts that\n   * the property's descriptor is deeply equal to the given `descriptor`. See\n   * the `deep-eql` project page for info on the deep equality algorithm:\n   * https://github.com/chaijs/deep-eql.\n   *\n   *     expect({a: 1}).to.have.ownPropertyDescriptor('a', {\n   *       configurable: true,\n   *       enumerable: true,\n   *       writable: true,\n   *       value: 1,\n   *     });\n   *\n   * Add `.not` earlier in the chain to negate `.ownPropertyDescriptor`.\n   *\n   *     expect({a: 1}).to.not.have.ownPropertyDescriptor('b');\n   *\n   * However, it's dangerous to negate `.ownPropertyDescriptor` when providing\n   * a `descriptor`. The problem is that it creates uncertain expectations by\n   * asserting that the target either doesn't have a property descriptor with\n   * the given key `name`, or that it does have a property descriptor with the\n   * given key `name` but it’s not deeply equal to the given `descriptor`. It's\n   * often best to identify the exact output that's expected, and then write an\n   * assertion that only accepts that exact output.\n   *\n   * When the target isn't expected to have a property descriptor with the given\n   * key `name`, it's often best to assert exactly that.\n   *\n   *     // Recommended\n   *     expect({b: 2}).to.not.have.ownPropertyDescriptor('a');\n   *\n   *     // Not recommended\n   *     expect({b: 2}).to.not.have.ownPropertyDescriptor('a', {\n   *       configurable: true,\n   *       enumerable: true,\n   *       writable: true,\n   *       value: 1,\n   *     });\n   *\n   * When the target is expected to have a property descriptor with the given\n   * key `name`, it's often best to assert that the property has its expected\n   * descriptor, rather than asserting that it doesn't have one of many\n   * unexpected descriptors.\n   *\n   *     // Recommended\n   *     expect({a: 3}).to.have.ownPropertyDescriptor('a', {\n   *       configurable: true,\n   *       enumerable: true,\n   *       writable: true,\n   *       value: 3,\n   *     });\n   *\n   *     // Not recommended\n   *     expect({a: 3}).to.not.have.ownPropertyDescriptor('a', {\n   *       configurable: true,\n   *       enumerable: true,\n   *       writable: true,\n   *       value: 1,\n   *     });\n   *\n   * `.ownPropertyDescriptor` changes the target of any assertions that follow\n   * in the chain to be the value of the property descriptor from the original\n   * target object.\n   *\n   *     expect({a: 1}).to.have.ownPropertyDescriptor('a')\n   *       .that.has.property('enumerable', true);\n   *\n   * `.ownPropertyDescriptor` accepts an optional `msg` argument which is a\n   * custom error message to show when the assertion fails. The message can also\n   * be given as the second argument to `expect`. When not providing\n   * `descriptor`, only use the second form.\n   *\n   *     // Recommended\n   *     expect({a: 1}).to.have.ownPropertyDescriptor('a', {\n   *       configurable: true,\n   *       enumerable: true,\n   *       writable: true,\n   *       value: 2,\n   *     }, 'nooo why fail??');\n   *\n   *     // Recommended\n   *     expect({a: 1}, 'nooo why fail??').to.have.ownPropertyDescriptor('a', {\n   *       configurable: true,\n   *       enumerable: true,\n   *       writable: true,\n   *       value: 2,\n   *     });\n   *\n   *     // Recommended\n   *     expect({a: 1}, 'nooo why fail??').to.have.ownPropertyDescriptor('b');\n   *\n   *     // Not recommended\n   *     expect({a: 1})\n   *       .to.have.ownPropertyDescriptor('b', undefined, 'nooo why fail??');\n   *\n   * The above assertion isn't the same thing as not providing `descriptor`.\n   * Instead, it's asserting that the target object has a `b` property\n   * descriptor that's deeply equal to `undefined`.\n   *\n   * The alias `.haveOwnPropertyDescriptor` can be used interchangeably with\n   * `.ownPropertyDescriptor`.\n   *\n   * @name ownPropertyDescriptor\n   * @alias haveOwnPropertyDescriptor\n   * @param {String} name\n   * @param {Object} descriptor _optional_\n   * @param {String} msg _optional_\n   * @namespace BDD\n   * @api public\n   */\n\n  function assertOwnPropertyDescriptor (name, descriptor, msg) {\n    if (typeof descriptor === 'string') {\n      msg = descriptor;\n      descriptor = null;\n    }\n    if (msg) flag(this, 'message', msg);\n    var obj = flag(this, 'object');\n    var actualDescriptor = Object.getOwnPropertyDescriptor(Object(obj), name);\n    if (actualDescriptor && descriptor) {\n      this.assert(\n          _.eql(descriptor, actualDescriptor)\n        , 'expected the own property descriptor for ' + _.inspect(name) + ' on #{this} to match ' + _.inspect(descriptor) + ', got ' + _.inspect(actualDescriptor)\n        , 'expected the own property descriptor for ' + _.inspect(name) + ' on #{this} to not match ' + _.inspect(descriptor)\n        , descriptor\n        , actualDescriptor\n        , true\n      );\n    } else {\n      this.assert(\n          actualDescriptor\n        , 'expected #{this} to have an own property descriptor for ' + _.inspect(name)\n        , 'expected #{this} to not have an own property descriptor for ' + _.inspect(name)\n      );\n    }\n    flag(this, 'object', actualDescriptor);\n  }\n\n  Assertion.addMethod('ownPropertyDescriptor', assertOwnPropertyDescriptor);\n  Assertion.addMethod('haveOwnPropertyDescriptor', assertOwnPropertyDescriptor);\n\n  /**\n   * ### .lengthOf(n[, msg])\n   *\n   * Asserts that the target's `length` or `size` is equal to the given number\n   * `n`.\n   *\n   *     expect([1, 2, 3]).to.have.lengthOf(3);\n   *     expect('foo').to.have.lengthOf(3);\n   *     expect(new Set([1, 2, 3])).to.have.lengthOf(3);\n   *     expect(new Map([['a', 1], ['b', 2], ['c', 3]])).to.have.lengthOf(3);\n   *\n   * Add `.not` earlier in the chain to negate `.lengthOf`. However, it's often\n   * best to assert that the target's `length` property is equal to its expected\n   * value, rather than not equal to one of many unexpected values.\n   *\n   *     expect('foo').to.have.lengthOf(3); // Recommended\n   *     expect('foo').to.not.have.lengthOf(4); // Not recommended\n   *\n   * `.lengthOf` accepts an optional `msg` argument which is a custom error\n   * message to show when the assertion fails. The message can also be given as\n   * the second argument to `expect`.\n   *\n   *     expect([1, 2, 3]).to.have.lengthOf(2, 'nooo why fail??');\n   *     expect([1, 2, 3], 'nooo why fail??').to.have.lengthOf(2);\n   *\n   * `.lengthOf` can also be used as a language chain, causing all `.above`,\n   * `.below`, `.least`, `.most`, and `.within` assertions that follow in the\n   * chain to use the target's `length` property as the target. However, it's\n   * often best to assert that the target's `length` property is equal to its\n   * expected length, rather than asserting that its `length` property falls\n   * within some range of values.\n   *\n   *     // Recommended\n   *     expect([1, 2, 3]).to.have.lengthOf(3);\n   *\n   *     // Not recommended\n   *     expect([1, 2, 3]).to.have.lengthOf.above(2);\n   *     expect([1, 2, 3]).to.have.lengthOf.below(4);\n   *     expect([1, 2, 3]).to.have.lengthOf.at.least(3);\n   *     expect([1, 2, 3]).to.have.lengthOf.at.most(3);\n   *     expect([1, 2, 3]).to.have.lengthOf.within(2,4);\n   *\n   * Due to a compatibility issue, the alias `.length` can't be chained directly\n   * off of an uninvoked method such as `.a`. Therefore, `.length` can't be used\n   * interchangeably with `.lengthOf` in every situation. It's recommended to\n   * always use `.lengthOf` instead of `.length`.\n   *\n   *     expect([1, 2, 3]).to.have.a.length(3); // incompatible; throws error\n   *     expect([1, 2, 3]).to.have.a.lengthOf(3);  // passes as expected\n   *\n   * @name lengthOf\n   * @alias length\n   * @param {Number} n\n   * @param {String} msg _optional_\n   * @namespace BDD\n   * @api public\n   */\n\n  function assertLengthChain () {\n    flag(this, 'doLength', true);\n  }\n\n  function assertLength (n, msg) {\n    if (msg) flag(this, 'message', msg);\n    var obj = flag(this, 'object')\n      , objType = _.type(obj).toLowerCase()\n      , flagMsg = flag(this, 'message')\n      , ssfi = flag(this, 'ssfi')\n      , descriptor = 'length'\n      , itemsCount;\n\n    switch (objType) {\n      case 'map':\n      case 'set':\n        descriptor = 'size';\n        itemsCount = obj.size;\n        break;\n      default:\n        new Assertion(obj, flagMsg, ssfi, true).to.have.property('length');\n        itemsCount = obj.length;\n    }\n\n    this.assert(\n        itemsCount == n\n      , 'expected #{this} to have a ' + descriptor + ' of #{exp} but got #{act}'\n      , 'expected #{this} to not have a ' + descriptor + ' of #{act}'\n      , n\n      , itemsCount\n    );\n  }\n\n  Assertion.addChainableMethod('length', assertLength, assertLengthChain);\n  Assertion.addChainableMethod('lengthOf', assertLength, assertLengthChain);\n\n  /**\n   * ### .match(re[, msg])\n   *\n   * Asserts that the target matches the given regular expression `re`.\n   *\n   *     expect('foobar').to.match(/^foo/);\n   *\n   * Add `.not` earlier in the chain to negate `.match`.\n   *\n   *     expect('foobar').to.not.match(/taco/);\n   *\n   * `.match` accepts an optional `msg` argument which is a custom error message\n   * to show when the assertion fails. The message can also be given as the\n   * second argument to `expect`.\n   *\n   *     expect('foobar').to.match(/taco/, 'nooo why fail??');\n   *     expect('foobar', 'nooo why fail??').to.match(/taco/);\n   *\n   * The alias `.matches` can be used interchangeably with `.match`.\n   *\n   * @name match\n   * @alias matches\n   * @param {RegExp} re\n   * @param {String} msg _optional_\n   * @namespace BDD\n   * @api public\n   */\n  function assertMatch(re, msg) {\n    if (msg) flag(this, 'message', msg);\n    var obj = flag(this, 'object');\n    this.assert(\n        re.exec(obj)\n      , 'expected #{this} to match ' + re\n      , 'expected #{this} not to match ' + re\n    );\n  }\n\n  Assertion.addMethod('match', assertMatch);\n  Assertion.addMethod('matches', assertMatch);\n\n  /**\n   * ### .string(str[, msg])\n   *\n   * Asserts that the target string contains the given substring `str`.\n   *\n   *     expect('foobar').to.have.string('bar');\n   *\n   * Add `.not` earlier in the chain to negate `.string`.\n   *\n   *     expect('foobar').to.not.have.string('taco');\n   *\n   * `.string` accepts an optional `msg` argument which is a custom error\n   * message to show when the assertion fails. The message can also be given as\n   * the second argument to `expect`.\n   *\n   *     expect('foobar').to.have.string('taco', 'nooo why fail??');\n   *     expect('foobar', 'nooo why fail??').to.have.string('taco');\n   *\n   * @name string\n   * @param {String} str\n   * @param {String} msg _optional_\n   * @namespace BDD\n   * @api public\n   */\n\n  Assertion.addMethod('string', function (str, msg) {\n    if (msg) flag(this, 'message', msg);\n    var obj = flag(this, 'object')\n      , flagMsg = flag(this, 'message')\n      , ssfi = flag(this, 'ssfi');\n    new Assertion(obj, flagMsg, ssfi, true).is.a('string');\n\n    this.assert(\n        ~obj.indexOf(str)\n      , 'expected #{this} to contain ' + _.inspect(str)\n      , 'expected #{this} to not contain ' + _.inspect(str)\n    );\n  });\n\n  /**\n   * ### .keys(key1[, key2[, ...]])\n   *\n   * Asserts that the target object, array, map, or set has the given keys. Only\n   * the target's own inherited properties are included in the search.\n   *\n   * When the target is an object or array, keys can be provided as one or more\n   * string arguments, a single array argument, or a single object argument. In\n   * the latter case, only the keys in the given object matter; the values are\n   * ignored.\n   *\n   *     expect({a: 1, b: 2}).to.have.all.keys('a', 'b');\n   *     expect(['x', 'y']).to.have.all.keys(0, 1);\n   *\n   *     expect({a: 1, b: 2}).to.have.all.keys(['a', 'b']);\n   *     expect(['x', 'y']).to.have.all.keys([0, 1]);\n   *\n   *     expect({a: 1, b: 2}).to.have.all.keys({a: 4, b: 5}); // ignore 4 and 5\n   *     expect(['x', 'y']).to.have.all.keys({0: 4, 1: 5}); // ignore 4 and 5\n   *\n   * When the target is a map or set, each key must be provided as a separate\n   * argument.\n   *\n   *     expect(new Map([['a', 1], ['b', 2]])).to.have.all.keys('a', 'b');\n   *     expect(new Set(['a', 'b'])).to.have.all.keys('a', 'b');\n   *\n   * Because `.keys` does different things based on the target's type, it's\n   * important to check the target's type before using `.keys`. See the `.a` doc\n   * for info on testing a target's type.\n   *\n   *     expect({a: 1, b: 2}).to.be.an('object').that.has.all.keys('a', 'b');\n   *\n   * By default, strict (`===`) equality is used to compare keys of maps and\n   * sets. Add `.deep` earlier in the chain to use deep equality instead. See\n   * the `deep-eql` project page for info on the deep equality algorithm:\n   * https://github.com/chaijs/deep-eql.\n   *\n   *     // Target set deeply (but not strictly) has key `{a: 1}`\n   *     expect(new Set([{a: 1}])).to.have.all.deep.keys([{a: 1}]);\n   *     expect(new Set([{a: 1}])).to.not.have.all.keys([{a: 1}]);\n   *\n   * By default, the target must have all of the given keys and no more. Add\n   * `.any` earlier in the chain to only require that the target have at least\n   * one of the given keys. Also, add `.not` earlier in the chain to negate\n   * `.keys`. It's often best to add `.any` when negating `.keys`, and to use\n   * `.all` when asserting `.keys` without negation.\n   *\n   * When negating `.keys`, `.any` is preferred because `.not.any.keys` asserts\n   * exactly what's expected of the output, whereas `.not.all.keys` creates\n   * uncertain expectations.\n   *\n   *     // Recommended; asserts that target doesn't have any of the given keys\n   *     expect({a: 1, b: 2}).to.not.have.any.keys('c', 'd');\n   *\n   *     // Not recommended; asserts that target doesn't have all of the given\n   *     // keys but may or may not have some of them\n   *     expect({a: 1, b: 2}).to.not.have.all.keys('c', 'd');\n   *\n   * When asserting `.keys` without negation, `.all` is preferred because\n   * `.all.keys` asserts exactly what's expected of the output, whereas\n   * `.any.keys` creates uncertain expectations.\n   *\n   *     // Recommended; asserts that target has all the given keys\n   *     expect({a: 1, b: 2}).to.have.all.keys('a', 'b');\n   *\n   *     // Not recommended; asserts that target has at least one of the given\n   *     // keys but may or may not have more of them\n   *     expect({a: 1, b: 2}).to.have.any.keys('a', 'b');\n   *\n   * Note that `.all` is used by default when neither `.all` nor `.any` appear\n   * earlier in the chain. However, it's often best to add `.all` anyway because\n   * it improves readability.\n   *\n   *     // Both assertions are identical\n   *     expect({a: 1, b: 2}).to.have.all.keys('a', 'b'); // Recommended\n   *     expect({a: 1, b: 2}).to.have.keys('a', 'b'); // Not recommended\n   *\n   * Add `.include` earlier in the chain to require that the target's keys be a\n   * superset of the expected keys, rather than identical sets.\n   *\n   *     // Target object's keys are a superset of ['a', 'b'] but not identical\n   *     expect({a: 1, b: 2, c: 3}).to.include.all.keys('a', 'b');\n   *     expect({a: 1, b: 2, c: 3}).to.not.have.all.keys('a', 'b');\n   *\n   * However, if `.any` and `.include` are combined, only the `.any` takes\n   * effect. The `.include` is ignored in this case.\n   *\n   *     // Both assertions are identical\n   *     expect({a: 1}).to.have.any.keys('a', 'b');\n   *     expect({a: 1}).to.include.any.keys('a', 'b');\n   *\n   * A custom error message can be given as the second argument to `expect`.\n   *\n   *     expect({a: 1}, 'nooo why fail??').to.have.key('b');\n   *\n   * The alias `.key` can be used interchangeably with `.keys`.\n   *\n   * @name keys\n   * @alias key\n   * @param {...String|Array|Object} keys\n   * @namespace BDD\n   * @api public\n   */\n\n  function assertKeys (keys) {\n    var obj = flag(this, 'object')\n      , objType = _.type(obj)\n      , keysType = _.type(keys)\n      , ssfi = flag(this, 'ssfi')\n      , isDeep = flag(this, 'deep')\n      , str\n      , deepStr = ''\n      , actual\n      , ok = true\n      , flagMsg = flag(this, 'message');\n\n    flagMsg = flagMsg ? flagMsg + ': ' : '';\n    var mixedArgsMsg = flagMsg + 'when testing keys against an object or an array you must give a single Array|Object|String argument or multiple String arguments';\n\n    if (objType === 'Map' || objType === 'Set') {\n      deepStr = isDeep ? 'deeply ' : '';\n      actual = [];\n\n      // Map and Set '.keys' aren't supported in IE 11. Therefore, use .forEach.\n      obj.forEach(function (val, key) { actual.push(key) });\n\n      if (keysType !== 'Array') {\n        keys = Array.prototype.slice.call(arguments);\n      }\n    } else {\n      actual = _.getOwnEnumerableProperties(obj);\n\n      switch (keysType) {\n        case 'Array':\n          if (arguments.length > 1) {\n            throw new AssertionError(mixedArgsMsg, undefined, ssfi);\n          }\n          break;\n        case 'Object':\n          if (arguments.length > 1) {\n            throw new AssertionError(mixedArgsMsg, undefined, ssfi);\n          }\n          keys = Object.keys(keys);\n          break;\n        default:\n          keys = Array.prototype.slice.call(arguments);\n      }\n\n      // Only stringify non-Symbols because Symbols would become \"Symbol()\"\n      keys = keys.map(function (val) {\n        return typeof val === 'symbol' ? val : String(val);\n      });\n    }\n\n    if (!keys.length) {\n      throw new AssertionError(flagMsg + 'keys required', undefined, ssfi);\n    }\n\n    var len = keys.length\n      , any = flag(this, 'any')\n      , all = flag(this, 'all')\n      , expected = keys;\n\n    if (!any && !all) {\n      all = true;\n    }\n\n    // Has any\n    if (any) {\n      ok = expected.some(function(expectedKey) {\n        return actual.some(function(actualKey) {\n          if (isDeep) {\n            return _.eql(expectedKey, actualKey);\n          } else {\n            return expectedKey === actualKey;\n          }\n        });\n      });\n    }\n\n    // Has all\n    if (all) {\n      ok = expected.every(function(expectedKey) {\n        return actual.some(function(actualKey) {\n          if (isDeep) {\n            return _.eql(expectedKey, actualKey);\n          } else {\n            return expectedKey === actualKey;\n          }\n        });\n      });\n\n      if (!flag(this, 'contains')) {\n        ok = ok && keys.length == actual.length;\n      }\n    }\n\n    // Key string\n    if (len > 1) {\n      keys = keys.map(function(key) {\n        return _.inspect(key);\n      });\n      var last = keys.pop();\n      if (all) {\n        str = keys.join(', ') + ', and ' + last;\n      }\n      if (any) {\n        str = keys.join(', ') + ', or ' + last;\n      }\n    } else {\n      str = _.inspect(keys[0]);\n    }\n\n    // Form\n    str = (len > 1 ? 'keys ' : 'key ') + str;\n\n    // Have / include\n    str = (flag(this, 'contains') ? 'contain ' : 'have ') + str;\n\n    // Assertion\n    this.assert(\n        ok\n      , 'expected #{this} to ' + deepStr + str\n      , 'expected #{this} to not ' + deepStr + str\n      , expected.slice(0).sort(_.compareByInspect)\n      , actual.sort(_.compareByInspect)\n      , true\n    );\n  }\n\n  Assertion.addMethod('keys', assertKeys);\n  Assertion.addMethod('key', assertKeys);\n\n  /**\n   * ### .throw([errorLike], [errMsgMatcher], [msg])\n   *\n   * When no arguments are provided, `.throw` invokes the target function and\n   * asserts that an error is thrown.\n   *\n   *     var badFn = function () { throw new TypeError('Illegal salmon!'); };\n   *\n   *     expect(badFn).to.throw();\n   *\n   * When one argument is provided, and it's an error constructor, `.throw`\n   * invokes the target function and asserts that an error is thrown that's an\n   * instance of that error constructor.\n   *\n   *     var badFn = function () { throw new TypeError('Illegal salmon!'); };\n   *\n   *     expect(badFn).to.throw(TypeError);\n   *\n   * When one argument is provided, and it's an error instance, `.throw` invokes\n   * the target function and asserts that an error is thrown that's strictly\n   * (`===`) equal to that error instance.\n   *\n   *     var err = new TypeError('Illegal salmon!');\n   *     var badFn = function () { throw err; };\n   *\n   *     expect(badFn).to.throw(err);\n   *\n   * When one argument is provided, and it's a string, `.throw` invokes the\n   * target function and asserts that an error is thrown with a message that\n   * contains that string.\n   *\n   *     var badFn = function () { throw new TypeError('Illegal salmon!'); };\n   *\n   *     expect(badFn).to.throw('salmon');\n   *\n   * When one argument is provided, and it's a regular expression, `.throw`\n   * invokes the target function and asserts that an error is thrown with a\n   * message that matches that regular expression.\n   *\n   *     var badFn = function () { throw new TypeError('Illegal salmon!'); };\n   *\n   *     expect(badFn).to.throw(/salmon/);\n   *\n   * When two arguments are provided, and the first is an error instance or\n   * constructor, and the second is a string or regular expression, `.throw`\n   * invokes the function and asserts that an error is thrown that fulfills both\n   * conditions as described above.\n   *\n   *     var err = new TypeError('Illegal salmon!');\n   *     var badFn = function () { throw err; };\n   *\n   *     expect(badFn).to.throw(TypeError, 'salmon');\n   *     expect(badFn).to.throw(TypeError, /salmon/);\n   *     expect(badFn).to.throw(err, 'salmon');\n   *     expect(badFn).to.throw(err, /salmon/);\n   *\n   * Add `.not` earlier in the chain to negate `.throw`.\n   *\n   *     var goodFn = function () {};\n   *\n   *     expect(goodFn).to.not.throw();\n   *\n   * However, it's dangerous to negate `.throw` when providing any arguments.\n   * The problem is that it creates uncertain expectations by asserting that the\n   * target either doesn't throw an error, or that it throws an error but of a\n   * different type than the given type, or that it throws an error of the given\n   * type but with a message that doesn't include the given string. It's often\n   * best to identify the exact output that's expected, and then write an\n   * assertion that only accepts that exact output.\n   *\n   * When the target isn't expected to throw an error, it's often best to assert\n   * exactly that.\n   *\n   *     var goodFn = function () {};\n   *\n   *     expect(goodFn).to.not.throw(); // Recommended\n   *     expect(goodFn).to.not.throw(ReferenceError, 'x'); // Not recommended\n   *\n   * When the target is expected to throw an error, it's often best to assert\n   * that the error is of its expected type, and has a message that includes an\n   * expected string, rather than asserting that it doesn't have one of many\n   * unexpected types, and doesn't have a message that includes some string.\n   *\n   *     var badFn = function () { throw new TypeError('Illegal salmon!'); };\n   *\n   *     expect(badFn).to.throw(TypeError, 'salmon'); // Recommended\n   *     expect(badFn).to.not.throw(ReferenceError, 'x'); // Not recommended\n   *\n   * `.throw` changes the target of any assertions that follow in the chain to\n   * be the error object that's thrown.\n   *\n   *     var err = new TypeError('Illegal salmon!');\n   *     err.code = 42;\n   *     var badFn = function () { throw err; };\n   *\n   *     expect(badFn).to.throw(TypeError).with.property('code', 42);\n   *\n   * `.throw` accepts an optional `msg` argument which is a custom error message\n   * to show when the assertion fails. The message can also be given as the\n   * second argument to `expect`. When not providing two arguments, always use\n   * the second form.\n   *\n   *     var goodFn = function () {};\n   *\n   *     expect(goodFn).to.throw(TypeError, 'x', 'nooo why fail??');\n   *     expect(goodFn, 'nooo why fail??').to.throw();\n   *\n   * Due to limitations in ES5, `.throw` may not always work as expected when\n   * using a transpiler such as Babel or TypeScript. In particular, it may\n   * produce unexpected results when subclassing the built-in `Error` object and\n   * then passing the subclassed constructor to `.throw`. See your transpiler's\n   * docs for details:\n   *\n   * - ([Babel](https://babeljs.io/docs/usage/caveats/#classes))\n   * - ([TypeScript](https://github.com/Microsoft/TypeScript/wiki/Breaking-Changes#extending-built-ins-like-error-array-and-map-may-no-longer-work))\n   *\n   * Beware of some common mistakes when using the `throw` assertion. One common\n   * mistake is to accidentally invoke the function yourself instead of letting\n   * the `throw` assertion invoke the function for you. For example, when\n   * testing if a function named `fn` throws, provide `fn` instead of `fn()` as\n   * the target for the assertion.\n   *\n   *     expect(fn).to.throw();     // Good! Tests `fn` as desired\n   *     expect(fn()).to.throw();   // Bad! Tests result of `fn()`, not `fn`\n   *\n   * If you need to assert that your function `fn` throws when passed certain\n   * arguments, then wrap a call to `fn` inside of another function.\n   *\n   *     expect(function () { fn(42); }).to.throw();  // Function expression\n   *     expect(() => fn(42)).to.throw();             // ES6 arrow function\n   *\n   * Another common mistake is to provide an object method (or any stand-alone\n   * function that relies on `this`) as the target of the assertion. Doing so is\n   * problematic because the `this` context will be lost when the function is\n   * invoked by `.throw`; there's no way for it to know what `this` is supposed\n   * to be. There are two ways around this problem. One solution is to wrap the\n   * method or function call inside of another function. Another solution is to\n   * use `bind`.\n   *\n   *     expect(function () { cat.meow(); }).to.throw();  // Function expression\n   *     expect(() => cat.meow()).to.throw();             // ES6 arrow function\n   *     expect(cat.meow.bind(cat)).to.throw();           // Bind\n   *\n   * Finally, it's worth mentioning that it's a best practice in JavaScript to\n   * only throw `Error` and derivatives of `Error` such as `ReferenceError`,\n   * `TypeError`, and user-defined objects that extend `Error`. No other type of\n   * value will generate a stack trace when initialized. With that said, the\n   * `throw` assertion does technically support any type of value being thrown,\n   * not just `Error` and its derivatives.\n   *\n   * The aliases `.throws` and `.Throw` can be used interchangeably with\n   * `.throw`.\n   *\n   * @name throw\n   * @alias throws\n   * @alias Throw\n   * @param {Error|ErrorConstructor} errorLike\n   * @param {String|RegExp} errMsgMatcher error message\n   * @param {String} msg _optional_\n   * @see https://developer.mozilla.org/en/JavaScript/Reference/Global_Objects/Error#Error_types\n   * @returns error for chaining (null if no error)\n   * @namespace BDD\n   * @api public\n   */\n\n  function assertThrows (errorLike, errMsgMatcher, msg) {\n    if (msg) flag(this, 'message', msg);\n    var obj = flag(this, 'object')\n      , ssfi = flag(this, 'ssfi')\n      , flagMsg = flag(this, 'message')\n      , negate = flag(this, 'negate') || false;\n    new Assertion(obj, flagMsg, ssfi, true).is.a('function');\n\n    if (errorLike instanceof RegExp || typeof errorLike === 'string') {\n      errMsgMatcher = errorLike;\n      errorLike = null;\n    }\n\n    var caughtErr;\n    try {\n      obj();\n    } catch (err) {\n      caughtErr = err;\n    }\n\n    // If we have the negate flag enabled and at least one valid argument it means we do expect an error\n    // but we want it to match a given set of criteria\n    var everyArgIsUndefined = errorLike === undefined && errMsgMatcher === undefined;\n\n    // If we've got the negate flag enabled and both args, we should only fail if both aren't compatible\n    // See Issue #551 and PR #683@GitHub\n    var everyArgIsDefined = Boolean(errorLike && errMsgMatcher);\n    var errorLikeFail = false;\n    var errMsgMatcherFail = false;\n\n    // Checking if error was thrown\n    if (everyArgIsUndefined || !everyArgIsUndefined && !negate) {\n      // We need this to display results correctly according to their types\n      var errorLikeString = 'an error';\n      if (errorLike instanceof Error) {\n        errorLikeString = '#{exp}';\n      } else if (errorLike) {\n        errorLikeString = _.checkError.getConstructorName(errorLike);\n      }\n\n      this.assert(\n          caughtErr\n        , 'expected #{this} to throw ' + errorLikeString\n        , 'expected #{this} to not throw an error but #{act} was thrown'\n        , errorLike && errorLike.toString()\n        , (caughtErr instanceof Error ?\n            caughtErr.toString() : (typeof caughtErr === 'string' ? caughtErr : caughtErr &&\n                                    _.checkError.getConstructorName(caughtErr)))\n      );\n    }\n\n    if (errorLike && caughtErr) {\n      // We should compare instances only if `errorLike` is an instance of `Error`\n      if (errorLike instanceof Error) {\n        var isCompatibleInstance = _.checkError.compatibleInstance(caughtErr, errorLike);\n\n        if (isCompatibleInstance === negate) {\n          // These checks were created to ensure we won't fail too soon when we've got both args and a negate\n          // See Issue #551 and PR #683@GitHub\n          if (everyArgIsDefined && negate) {\n            errorLikeFail = true;\n          } else {\n            this.assert(\n                negate\n              , 'expected #{this} to throw #{exp} but #{act} was thrown'\n              , 'expected #{this} to not throw #{exp}' + (caughtErr && !negate ? ' but #{act} was thrown' : '')\n              , errorLike.toString()\n              , caughtErr.toString()\n            );\n          }\n        }\n      }\n\n      var isCompatibleConstructor = _.checkError.compatibleConstructor(caughtErr, errorLike);\n      if (isCompatibleConstructor === negate) {\n        if (everyArgIsDefined && negate) {\n            errorLikeFail = true;\n        } else {\n          this.assert(\n              negate\n            , 'expected #{this} to throw #{exp} but #{act} was thrown'\n            , 'expected #{this} to not throw #{exp}' + (caughtErr ? ' but #{act} was thrown' : '')\n            , (errorLike instanceof Error ? errorLike.toString() : errorLike && _.checkError.getConstructorName(errorLike))\n            , (caughtErr instanceof Error ? caughtErr.toString() : caughtErr && _.checkError.getConstructorName(caughtErr))\n          );\n        }\n      }\n    }\n\n    if (caughtErr && errMsgMatcher !== undefined && errMsgMatcher !== null) {\n      // Here we check compatible messages\n      var placeholder = 'including';\n      if (errMsgMatcher instanceof RegExp) {\n        placeholder = 'matching'\n      }\n\n      var isCompatibleMessage = _.checkError.compatibleMessage(caughtErr, errMsgMatcher);\n      if (isCompatibleMessage === negate) {\n        if (everyArgIsDefined && negate) {\n            errMsgMatcherFail = true;\n        } else {\n          this.assert(\n            negate\n            , 'expected #{this} to throw error ' + placeholder + ' #{exp} but got #{act}'\n            , 'expected #{this} to throw error not ' + placeholder + ' #{exp}'\n            ,  errMsgMatcher\n            ,  _.checkError.getMessage(caughtErr)\n          );\n        }\n      }\n    }\n\n    // If both assertions failed and both should've matched we throw an error\n    if (errorLikeFail && errMsgMatcherFail) {\n      this.assert(\n        negate\n        , 'expected #{this} to throw #{exp} but #{act} was thrown'\n        , 'expected #{this} to not throw #{exp}' + (caughtErr ? ' but #{act} was thrown' : '')\n        , (errorLike instanceof Error ? errorLike.toString() : errorLike && _.checkError.getConstructorName(errorLike))\n        , (caughtErr instanceof Error ? caughtErr.toString() : caughtErr && _.checkError.getConstructorName(caughtErr))\n      );\n    }\n\n    flag(this, 'object', caughtErr);\n  };\n\n  Assertion.addMethod('throw', assertThrows);\n  Assertion.addMethod('throws', assertThrows);\n  Assertion.addMethod('Throw', assertThrows);\n\n  /**\n   * ### .respondTo(method[, msg])\n   *\n   * When the target is a non-function object, `.respondTo` asserts that the\n   * target has a method with the given name `method`. The method can be own or\n   * inherited, and it can be enumerable or non-enumerable.\n   *\n   *     function Cat () {}\n   *     Cat.prototype.meow = function () {};\n   *\n   *     expect(new Cat()).to.respondTo('meow');\n   *\n   * When the target is a function, `.respondTo` asserts that the target's\n   * `prototype` property has a method with the given name `method`. Again, the\n   * method can be own or inherited, and it can be enumerable or non-enumerable.\n   *\n   *     function Cat () {}\n   *     Cat.prototype.meow = function () {};\n   *\n   *     expect(Cat).to.respondTo('meow');\n   *\n   * Add `.itself` earlier in the chain to force `.respondTo` to treat the\n   * target as a non-function object, even if it's a function. Thus, it asserts\n   * that the target has a method with the given name `method`, rather than\n   * asserting that the target's `prototype` property has a method with the\n   * given name `method`.\n   *\n   *     function Cat () {}\n   *     Cat.prototype.meow = function () {};\n   *     Cat.hiss = function () {};\n   *\n   *     expect(Cat).itself.to.respondTo('hiss').but.not.respondTo('meow');\n   *\n   * When not adding `.itself`, it's important to check the target's type before\n   * using `.respondTo`. See the `.a` doc for info on checking a target's type.\n   *\n   *     function Cat () {}\n   *     Cat.prototype.meow = function () {};\n   *\n   *     expect(new Cat()).to.be.an('object').that.respondsTo('meow');\n   *\n   * Add `.not` earlier in the chain to negate `.respondTo`.\n   *\n   *     function Dog () {}\n   *     Dog.prototype.bark = function () {};\n   *\n   *     expect(new Dog()).to.not.respondTo('meow');\n   *\n   * `.respondTo` accepts an optional `msg` argument which is a custom error\n   * message to show when the assertion fails. The message can also be given as\n   * the second argument to `expect`.\n   *\n   *     expect({}).to.respondTo('meow', 'nooo why fail??');\n   *     expect({}, 'nooo why fail??').to.respondTo('meow');\n   *\n   * The alias `.respondsTo` can be used interchangeably with `.respondTo`.\n   *\n   * @name respondTo\n   * @alias respondsTo\n   * @param {String} method\n   * @param {String} msg _optional_\n   * @namespace BDD\n   * @api public\n   */\n\n  function respondTo (method, msg) {\n    if (msg) flag(this, 'message', msg);\n    var obj = flag(this, 'object')\n      , itself = flag(this, 'itself')\n      , context = ('function' === typeof obj && !itself)\n        ? obj.prototype[method]\n        : obj[method];\n\n    this.assert(\n        'function' === typeof context\n      , 'expected #{this} to respond to ' + _.inspect(method)\n      , 'expected #{this} to not respond to ' + _.inspect(method)\n    );\n  }\n\n  Assertion.addMethod('respondTo', respondTo);\n  Assertion.addMethod('respondsTo', respondTo);\n\n  /**\n   * ### .itself\n   *\n   * Forces all `.respondTo` assertions that follow in the chain to behave as if\n   * the target is a non-function object, even if it's a function. Thus, it\n   * causes `.respondTo` to assert that the target has a method with the given\n   * name, rather than asserting that the target's `prototype` property has a\n   * method with the given name.\n   *\n   *     function Cat () {}\n   *     Cat.prototype.meow = function () {};\n   *     Cat.hiss = function () {};\n   *\n   *     expect(Cat).itself.to.respondTo('hiss').but.not.respondTo('meow');\n   *\n   * @name itself\n   * @namespace BDD\n   * @api public\n   */\n\n  Assertion.addProperty('itself', function () {\n    flag(this, 'itself', true);\n  });\n\n  /**\n   * ### .satisfy(matcher[, msg])\n   *\n   * Invokes the given `matcher` function with the target being passed as the\n   * first argument, and asserts that the value returned is truthy.\n   *\n   *     expect(1).to.satisfy(function(num) {\n   *       return num > 0;\n   *     });\n   *\n   * Add `.not` earlier in the chain to negate `.satisfy`.\n   *\n   *     expect(1).to.not.satisfy(function(num) {\n   *       return num > 2;\n   *     });\n   *\n   * `.satisfy` accepts an optional `msg` argument which is a custom error\n   * message to show when the assertion fails. The message can also be given as\n   * the second argument to `expect`.\n   *\n   *     expect(1).to.satisfy(function(num) {\n   *       return num > 2;\n   *     }, 'nooo why fail??');\n   *\n   *     expect(1, 'nooo why fail??').to.satisfy(function(num) {\n   *       return num > 2;\n   *     });\n   *\n   * The alias `.satisfies` can be used interchangeably with `.satisfy`.\n   *\n   * @name satisfy\n   * @alias satisfies\n   * @param {Function} matcher\n   * @param {String} msg _optional_\n   * @namespace BDD\n   * @api public\n   */\n\n  function satisfy (matcher, msg) {\n    if (msg) flag(this, 'message', msg);\n    var obj = flag(this, 'object');\n    var result = matcher(obj);\n    this.assert(\n        result\n      , 'expected #{this} to satisfy ' + _.objDisplay(matcher)\n      , 'expected #{this} to not satisfy' + _.objDisplay(matcher)\n      , flag(this, 'negate') ? false : true\n      , result\n    );\n  }\n\n  Assertion.addMethod('satisfy', satisfy);\n  Assertion.addMethod('satisfies', satisfy);\n\n  /**\n   * ### .closeTo(expected, delta[, msg])\n   *\n   * Asserts that the target is a number that's within a given +/- `delta` range\n   * of the given number `expected`. However, it's often best to assert that the\n   * target is equal to its expected value.\n   *\n   *     // Recommended\n   *     expect(1.5).to.equal(1.5);\n   *\n   *     // Not recommended\n   *     expect(1.5).to.be.closeTo(1, 0.5);\n   *     expect(1.5).to.be.closeTo(2, 0.5);\n   *     expect(1.5).to.be.closeTo(1, 1);\n   *\n   * Add `.not` earlier in the chain to negate `.closeTo`.\n   *\n   *     expect(1.5).to.equal(1.5); // Recommended\n   *     expect(1.5).to.not.be.closeTo(3, 1); // Not recommended\n   *\n   * `.closeTo` accepts an optional `msg` argument which is a custom error\n   * message to show when the assertion fails. The message can also be given as\n   * the second argument to `expect`.\n   *\n   *     expect(1.5).to.be.closeTo(3, 1, 'nooo why fail??');\n   *     expect(1.5, 'nooo why fail??').to.be.closeTo(3, 1);\n   *\n   * The alias `.approximately` can be used interchangeably with `.closeTo`.\n   *\n   * @name closeTo\n   * @alias approximately\n   * @param {Number} expected\n   * @param {Number} delta\n   * @param {String} msg _optional_\n   * @namespace BDD\n   * @api public\n   */\n\n  function closeTo(expected, delta, msg) {\n    if (msg) flag(this, 'message', msg);\n    var obj = flag(this, 'object')\n      , flagMsg = flag(this, 'message')\n      , ssfi = flag(this, 'ssfi');\n\n    new Assertion(obj, flagMsg, ssfi, true).is.a('number');\n    if (typeof expected !== 'number' || typeof delta !== 'number') {\n      flagMsg = flagMsg ? flagMsg + ': ' : '';\n      var deltaMessage = delta === undefined ? \", and a delta is required\" : \"\";\n      throw new AssertionError(\n          flagMsg + 'the arguments to closeTo or approximately must be numbers' + deltaMessage,\n          undefined,\n          ssfi\n      );\n    }\n\n    this.assert(\n        Math.abs(obj - expected) <= delta\n      , 'expected #{this} to be close to ' + expected + ' +/- ' + delta\n      , 'expected #{this} not to be close to ' + expected + ' +/- ' + delta\n    );\n  }\n\n  Assertion.addMethod('closeTo', closeTo);\n  Assertion.addMethod('approximately', closeTo);\n\n  // Note: Duplicates are ignored if testing for inclusion instead of sameness.\n  function isSubsetOf(subset, superset, cmp, contains, ordered) {\n    if (!contains) {\n      if (subset.length !== superset.length) return false;\n      superset = superset.slice();\n    }\n\n    return subset.every(function(elem, idx) {\n      if (ordered) return cmp ? cmp(elem, superset[idx]) : elem === superset[idx];\n\n      if (!cmp) {\n        var matchIdx = superset.indexOf(elem);\n        if (matchIdx === -1) return false;\n\n        // Remove match from superset so not counted twice if duplicate in subset.\n        if (!contains) superset.splice(matchIdx, 1);\n        return true;\n      }\n\n      return superset.some(function(elem2, matchIdx) {\n        if (!cmp(elem, elem2)) return false;\n\n        // Remove match from superset so not counted twice if duplicate in subset.\n        if (!contains) superset.splice(matchIdx, 1);\n        return true;\n      });\n    });\n  }\n\n  /**\n   * ### .members(set[, msg])\n   *\n   * Asserts that the target array has the same members as the given array\n   * `set`.\n   *\n   *     expect([1, 2, 3]).to.have.members([2, 1, 3]);\n   *     expect([1, 2, 2]).to.have.members([2, 1, 2]);\n   *\n   * By default, members are compared using strict (`===`) equality. Add `.deep`\n   * earlier in the chain to use deep equality instead. See the `deep-eql`\n   * project page for info on the deep equality algorithm:\n   * https://github.com/chaijs/deep-eql.\n   *\n   *     // Target array deeply (but not strictly) has member `{a: 1}`\n   *     expect([{a: 1}]).to.have.deep.members([{a: 1}]);\n   *     expect([{a: 1}]).to.not.have.members([{a: 1}]);\n   *\n   * By default, order doesn't matter. Add `.ordered` earlier in the chain to\n   * require that members appear in the same order.\n   *\n   *     expect([1, 2, 3]).to.have.ordered.members([1, 2, 3]);\n   *     expect([1, 2, 3]).to.have.members([2, 1, 3])\n   *       .but.not.ordered.members([2, 1, 3]);\n   *\n   * By default, both arrays must be the same size. Add `.include` earlier in\n   * the chain to require that the target's members be a superset of the\n   * expected members. Note that duplicates are ignored in the subset when\n   * `.include` is added.\n   *\n   *     // Target array is a superset of [1, 2] but not identical\n   *     expect([1, 2, 3]).to.include.members([1, 2]);\n   *     expect([1, 2, 3]).to.not.have.members([1, 2]);\n   *\n   *     // Duplicates in the subset are ignored\n   *     expect([1, 2, 3]).to.include.members([1, 2, 2, 2]);\n   *\n   * `.deep`, `.ordered`, and `.include` can all be combined. However, if\n   * `.include` and `.ordered` are combined, the ordering begins at the start of\n   * both arrays.\n   *\n   *     expect([{a: 1}, {b: 2}, {c: 3}])\n   *       .to.include.deep.ordered.members([{a: 1}, {b: 2}])\n   *       .but.not.include.deep.ordered.members([{b: 2}, {c: 3}]);\n   *\n   * Add `.not` earlier in the chain to negate `.members`. However, it's\n   * dangerous to do so. The problem is that it creates uncertain expectations\n   * by asserting that the target array doesn't have all of the same members as\n   * the given array `set` but may or may not have some of them. It's often best\n   * to identify the exact output that's expected, and then write an assertion\n   * that only accepts that exact output.\n   *\n   *     expect([1, 2]).to.not.include(3).and.not.include(4); // Recommended\n   *     expect([1, 2]).to.not.have.members([3, 4]); // Not recommended\n   *\n   * `.members` accepts an optional `msg` argument which is a custom error\n   * message to show when the assertion fails. The message can also be given as\n   * the second argument to `expect`.\n   *\n   *     expect([1, 2]).to.have.members([1, 2, 3], 'nooo why fail??');\n   *     expect([1, 2], 'nooo why fail??').to.have.members([1, 2, 3]);\n   *\n   * @name members\n   * @param {Array} set\n   * @param {String} msg _optional_\n   * @namespace BDD\n   * @api public\n   */\n\n  Assertion.addMethod('members', function (subset, msg) {\n    if (msg) flag(this, 'message', msg);\n    var obj = flag(this, 'object')\n      , flagMsg = flag(this, 'message')\n      , ssfi = flag(this, 'ssfi');\n\n    new Assertion(obj, flagMsg, ssfi, true).to.be.an('array');\n    new Assertion(subset, flagMsg, ssfi, true).to.be.an('array');\n\n    var contains = flag(this, 'contains');\n    var ordered = flag(this, 'ordered');\n\n    var subject, failMsg, failNegateMsg;\n\n    if (contains) {\n      subject = ordered ? 'an ordered superset' : 'a superset';\n      failMsg = 'expected #{this} to be ' + subject + ' of #{exp}';\n      failNegateMsg = 'expected #{this} to not be ' + subject + ' of #{exp}';\n    } else {\n      subject = ordered ? 'ordered members' : 'members';\n      failMsg = 'expected #{this} to have the same ' + subject + ' as #{exp}';\n      failNegateMsg = 'expected #{this} to not have the same ' + subject + ' as #{exp}';\n    }\n\n    var cmp = flag(this, 'deep') ? _.eql : undefined;\n\n    this.assert(\n        isSubsetOf(subset, obj, cmp, contains, ordered)\n      , failMsg\n      , failNegateMsg\n      , subset\n      , obj\n      , true\n    );\n  });\n\n  /**\n   * ### .oneOf(list[, msg])\n   *\n   * Asserts that the target is a member of the given array `list`. However,\n   * it's often best to assert that the target is equal to its expected value.\n   *\n   *     expect(1).to.equal(1); // Recommended\n   *     expect(1).to.be.oneOf([1, 2, 3]); // Not recommended\n   *\n   * Comparisons are performed using strict (`===`) equality.\n   *\n   * Add `.not` earlier in the chain to negate `.oneOf`.\n   *\n   *     expect(1).to.equal(1); // Recommended\n   *     expect(1).to.not.be.oneOf([2, 3, 4]); // Not recommended\n   *\n   * It can also be chained with `.contain` or `.include`, which will work with\n   * both arrays and strings:\n   *\n   *     expect('Today is sunny').to.contain.oneOf(['sunny', 'cloudy'])\n   *     expect('Today is rainy').to.not.contain.oneOf(['sunny', 'cloudy'])\n   *     expect([1,2,3]).to.contain.oneOf([3,4,5])\n   *     expect([1,2,3]).to.not.contain.oneOf([4,5,6])\n   *\n   * `.oneOf` accepts an optional `msg` argument which is a custom error message\n   * to show when the assertion fails. The message can also be given as the\n   * second argument to `expect`.\n   *\n   *     expect(1).to.be.oneOf([2, 3, 4], 'nooo why fail??');\n   *     expect(1, 'nooo why fail??').to.be.oneOf([2, 3, 4]);\n   *\n   * @name oneOf\n   * @param {Array<*>} list\n   * @param {String} msg _optional_\n   * @namespace BDD\n   * @api public\n   */\n\n  function oneOf (list, msg) {\n    if (msg) flag(this, 'message', msg);\n    var expected = flag(this, 'object')\n      , flagMsg = flag(this, 'message')\n      , ssfi = flag(this, 'ssfi')\n      , contains = flag(this, 'contains')\n      , isDeep = flag(this, 'deep');\n    new Assertion(list, flagMsg, ssfi, true).to.be.an('array');\n\n    if (contains) {\n      this.assert(\n        list.some(function(possibility) { return expected.indexOf(possibility) > -1 })\n        , 'expected #{this} to contain one of #{exp}'\n        , 'expected #{this} to not contain one of #{exp}'\n        , list\n        , expected\n      );\n    } else {\n      if (isDeep) {\n        this.assert(\n          list.some(function(possibility) { return _.eql(expected, possibility) })\n          , 'expected #{this} to deeply equal one of #{exp}'\n          , 'expected #{this} to deeply equal one of #{exp}'\n          , list\n          , expected\n        );\n      } else {\n        this.assert(\n          list.indexOf(expected) > -1\n          , 'expected #{this} to be one of #{exp}'\n          , 'expected #{this} to not be one of #{exp}'\n          , list\n          , expected\n        );\n      }\n    }\n  }\n\n  Assertion.addMethod('oneOf', oneOf);\n\n  /**\n   * ### .change(subject[, prop[, msg]])\n   *\n   * When one argument is provided, `.change` asserts that the given function\n   * `subject` returns a different value when it's invoked before the target\n   * function compared to when it's invoked afterward. However, it's often best\n   * to assert that `subject` is equal to its expected value.\n   *\n   *     var dots = ''\n   *       , addDot = function () { dots += '.'; }\n   *       , getDots = function () { return dots; };\n   *\n   *     // Recommended\n   *     expect(getDots()).to.equal('');\n   *     addDot();\n   *     expect(getDots()).to.equal('.');\n   *\n   *     // Not recommended\n   *     expect(addDot).to.change(getDots);\n   *\n   * When two arguments are provided, `.change` asserts that the value of the\n   * given object `subject`'s `prop` property is different before invoking the\n   * target function compared to afterward.\n   *\n   *     var myObj = {dots: ''}\n   *       , addDot = function () { myObj.dots += '.'; };\n   *\n   *     // Recommended\n   *     expect(myObj).to.have.property('dots', '');\n   *     addDot();\n   *     expect(myObj).to.have.property('dots', '.');\n   *\n   *     // Not recommended\n   *     expect(addDot).to.change(myObj, 'dots');\n   *\n   * Strict (`===`) equality is used to compare before and after values.\n   *\n   * Add `.not` earlier in the chain to negate `.change`.\n   *\n   *     var dots = ''\n   *       , noop = function () {}\n   *       , getDots = function () { return dots; };\n   *\n   *     expect(noop).to.not.change(getDots);\n   *\n   *     var myObj = {dots: ''}\n   *       , noop = function () {};\n   *\n   *     expect(noop).to.not.change(myObj, 'dots');\n   *\n   * `.change` accepts an optional `msg` argument which is a custom error\n   * message to show when the assertion fails. The message can also be given as\n   * the second argument to `expect`. When not providing two arguments, always\n   * use the second form.\n   *\n   *     var myObj = {dots: ''}\n   *       , addDot = function () { myObj.dots += '.'; };\n   *\n   *     expect(addDot).to.not.change(myObj, 'dots', 'nooo why fail??');\n   *\n   *     var dots = ''\n   *       , addDot = function () { dots += '.'; }\n   *       , getDots = function () { return dots; };\n   *\n   *     expect(addDot, 'nooo why fail??').to.not.change(getDots);\n   *\n   * `.change` also causes all `.by` assertions that follow in the chain to\n   * assert how much a numeric subject was increased or decreased by. However,\n   * it's dangerous to use `.change.by`. The problem is that it creates\n   * uncertain expectations by asserting that the subject either increases by\n   * the given delta, or that it decreases by the given delta. It's often best\n   * to identify the exact output that's expected, and then write an assertion\n   * that only accepts that exact output.\n   *\n   *     var myObj = {val: 1}\n   *       , addTwo = function () { myObj.val += 2; }\n   *       , subtractTwo = function () { myObj.val -= 2; };\n   *\n   *     expect(addTwo).to.increase(myObj, 'val').by(2); // Recommended\n   *     expect(addTwo).to.change(myObj, 'val').by(2); // Not recommended\n   *\n   *     expect(subtractTwo).to.decrease(myObj, 'val').by(2); // Recommended\n   *     expect(subtractTwo).to.change(myObj, 'val').by(2); // Not recommended\n   *\n   * The alias `.changes` can be used interchangeably with `.change`.\n   *\n   * @name change\n   * @alias changes\n   * @param {String} subject\n   * @param {String} prop name _optional_\n   * @param {String} msg _optional_\n   * @namespace BDD\n   * @api public\n   */\n\n  function assertChanges (subject, prop, msg) {\n    if (msg) flag(this, 'message', msg);\n    var fn = flag(this, 'object')\n      , flagMsg = flag(this, 'message')\n      , ssfi = flag(this, 'ssfi');\n    new Assertion(fn, flagMsg, ssfi, true).is.a('function');\n\n    var initial;\n    if (!prop) {\n      new Assertion(subject, flagMsg, ssfi, true).is.a('function');\n      initial = subject();\n    } else {\n      new Assertion(subject, flagMsg, ssfi, true).to.have.property(prop);\n      initial = subject[prop];\n    }\n\n    fn();\n\n    var final = prop === undefined || prop === null ? subject() : subject[prop];\n    var msgObj = prop === undefined || prop === null ? initial : '.' + prop;\n\n    // This gets flagged because of the .by(delta) assertion\n    flag(this, 'deltaMsgObj', msgObj);\n    flag(this, 'initialDeltaValue', initial);\n    flag(this, 'finalDeltaValue', final);\n    flag(this, 'deltaBehavior', 'change');\n    flag(this, 'realDelta', final !== initial);\n\n    this.assert(\n      initial !== final\n      , 'expected ' + msgObj + ' to change'\n      , 'expected ' + msgObj + ' to not change'\n    );\n  }\n\n  Assertion.addMethod('change', assertChanges);\n  Assertion.addMethod('changes', assertChanges);\n\n  /**\n   * ### .increase(subject[, prop[, msg]])\n   *\n   * When one argument is provided, `.increase` asserts that the given function\n   * `subject` returns a greater number when it's invoked after invoking the\n   * target function compared to when it's invoked beforehand. `.increase` also\n   * causes all `.by` assertions that follow in the chain to assert how much\n   * greater of a number is returned. It's often best to assert that the return\n   * value increased by the expected amount, rather than asserting it increased\n   * by any amount.\n   *\n   *     var val = 1\n   *       , addTwo = function () { val += 2; }\n   *       , getVal = function () { return val; };\n   *\n   *     expect(addTwo).to.increase(getVal).by(2); // Recommended\n   *     expect(addTwo).to.increase(getVal); // Not recommended\n   *\n   * When two arguments are provided, `.increase` asserts that the value of the\n   * given object `subject`'s `prop` property is greater after invoking the\n   * target function compared to beforehand.\n   *\n   *     var myObj = {val: 1}\n   *       , addTwo = function () { myObj.val += 2; };\n   *\n   *     expect(addTwo).to.increase(myObj, 'val').by(2); // Recommended\n   *     expect(addTwo).to.increase(myObj, 'val'); // Not recommended\n   *\n   * Add `.not` earlier in the chain to negate `.increase`. However, it's\n   * dangerous to do so. The problem is that it creates uncertain expectations\n   * by asserting that the subject either decreases, or that it stays the same.\n   * It's often best to identify the exact output that's expected, and then\n   * write an assertion that only accepts that exact output.\n   *\n   * When the subject is expected to decrease, it's often best to assert that it\n   * decreased by the expected amount.\n   *\n   *     var myObj = {val: 1}\n   *       , subtractTwo = function () { myObj.val -= 2; };\n   *\n   *     expect(subtractTwo).to.decrease(myObj, 'val').by(2); // Recommended\n   *     expect(subtractTwo).to.not.increase(myObj, 'val'); // Not recommended\n   *\n   * When the subject is expected to stay the same, it's often best to assert\n   * exactly that.\n   *\n   *     var myObj = {val: 1}\n   *       , noop = function () {};\n   *\n   *     expect(noop).to.not.change(myObj, 'val'); // Recommended\n   *     expect(noop).to.not.increase(myObj, 'val'); // Not recommended\n   *\n   * `.increase` accepts an optional `msg` argument which is a custom error\n   * message to show when the assertion fails. The message can also be given as\n   * the second argument to `expect`. When not providing two arguments, always\n   * use the second form.\n   *\n   *     var myObj = {val: 1}\n   *       , noop = function () {};\n   *\n   *     expect(noop).to.increase(myObj, 'val', 'nooo why fail??');\n   *\n   *     var val = 1\n   *       , noop = function () {}\n   *       , getVal = function () { return val; };\n   *\n   *     expect(noop, 'nooo why fail??').to.increase(getVal);\n   *\n   * The alias `.increases` can be used interchangeably with `.increase`.\n   *\n   * @name increase\n   * @alias increases\n   * @param {String|Function} subject\n   * @param {String} prop name _optional_\n   * @param {String} msg _optional_\n   * @namespace BDD\n   * @api public\n   */\n\n  function assertIncreases (subject, prop, msg) {\n    if (msg) flag(this, 'message', msg);\n    var fn = flag(this, 'object')\n      , flagMsg = flag(this, 'message')\n      , ssfi = flag(this, 'ssfi');\n    new Assertion(fn, flagMsg, ssfi, true).is.a('function');\n\n    var initial;\n    if (!prop) {\n      new Assertion(subject, flagMsg, ssfi, true).is.a('function');\n      initial = subject();\n    } else {\n      new Assertion(subject, flagMsg, ssfi, true).to.have.property(prop);\n      initial = subject[prop];\n    }\n\n    // Make sure that the target is a number\n    new Assertion(initial, flagMsg, ssfi, true).is.a('number');\n\n    fn();\n\n    var final = prop === undefined || prop === null ? subject() : subject[prop];\n    var msgObj = prop === undefined || prop === null ? initial : '.' + prop;\n\n    flag(this, 'deltaMsgObj', msgObj);\n    flag(this, 'initialDeltaValue', initial);\n    flag(this, 'finalDeltaValue', final);\n    flag(this, 'deltaBehavior', 'increase');\n    flag(this, 'realDelta', final - initial);\n\n    this.assert(\n      final - initial > 0\n      , 'expected ' + msgObj + ' to increase'\n      , 'expected ' + msgObj + ' to not increase'\n    );\n  }\n\n  Assertion.addMethod('increase', assertIncreases);\n  Assertion.addMethod('increases', assertIncreases);\n\n  /**\n   * ### .decrease(subject[, prop[, msg]])\n   *\n   * When one argument is provided, `.decrease` asserts that the given function\n   * `subject` returns a lesser number when it's invoked after invoking the\n   * target function compared to when it's invoked beforehand. `.decrease` also\n   * causes all `.by` assertions that follow in the chain to assert how much\n   * lesser of a number is returned. It's often best to assert that the return\n   * value decreased by the expected amount, rather than asserting it decreased\n   * by any amount.\n   *\n   *     var val = 1\n   *       , subtractTwo = function () { val -= 2; }\n   *       , getVal = function () { return val; };\n   *\n   *     expect(subtractTwo).to.decrease(getVal).by(2); // Recommended\n   *     expect(subtractTwo).to.decrease(getVal); // Not recommended\n   *\n   * When two arguments are provided, `.decrease` asserts that the value of the\n   * given object `subject`'s `prop` property is lesser after invoking the\n   * target function compared to beforehand.\n   *\n   *     var myObj = {val: 1}\n   *       , subtractTwo = function () { myObj.val -= 2; };\n   *\n   *     expect(subtractTwo).to.decrease(myObj, 'val').by(2); // Recommended\n   *     expect(subtractTwo).to.decrease(myObj, 'val'); // Not recommended\n   *\n   * Add `.not` earlier in the chain to negate `.decrease`. However, it's\n   * dangerous to do so. The problem is that it creates uncertain expectations\n   * by asserting that the subject either increases, or that it stays the same.\n   * It's often best to identify the exact output that's expected, and then\n   * write an assertion that only accepts that exact output.\n   *\n   * When the subject is expected to increase, it's often best to assert that it\n   * increased by the expected amount.\n   *\n   *     var myObj = {val: 1}\n   *       , addTwo = function () { myObj.val += 2; };\n   *\n   *     expect(addTwo).to.increase(myObj, 'val').by(2); // Recommended\n   *     expect(addTwo).to.not.decrease(myObj, 'val'); // Not recommended\n   *\n   * When the subject is expected to stay the same, it's often best to assert\n   * exactly that.\n   *\n   *     var myObj = {val: 1}\n   *       , noop = function () {};\n   *\n   *     expect(noop).to.not.change(myObj, 'val'); // Recommended\n   *     expect(noop).to.not.decrease(myObj, 'val'); // Not recommended\n   *\n   * `.decrease` accepts an optional `msg` argument which is a custom error\n   * message to show when the assertion fails. The message can also be given as\n   * the second argument to `expect`. When not providing two arguments, always\n   * use the second form.\n   *\n   *     var myObj = {val: 1}\n   *       , noop = function () {};\n   *\n   *     expect(noop).to.decrease(myObj, 'val', 'nooo why fail??');\n   *\n   *     var val = 1\n   *       , noop = function () {}\n   *       , getVal = function () { return val; };\n   *\n   *     expect(noop, 'nooo why fail??').to.decrease(getVal);\n   *\n   * The alias `.decreases` can be used interchangeably with `.decrease`.\n   *\n   * @name decrease\n   * @alias decreases\n   * @param {String|Function} subject\n   * @param {String} prop name _optional_\n   * @param {String} msg _optional_\n   * @namespace BDD\n   * @api public\n   */\n\n  function assertDecreases (subject, prop, msg) {\n    if (msg) flag(this, 'message', msg);\n    var fn = flag(this, 'object')\n      , flagMsg = flag(this, 'message')\n      , ssfi = flag(this, 'ssfi');\n    new Assertion(fn, flagMsg, ssfi, true).is.a('function');\n\n    var initial;\n    if (!prop) {\n      new Assertion(subject, flagMsg, ssfi, true).is.a('function');\n      initial = subject();\n    } else {\n      new Assertion(subject, flagMsg, ssfi, true).to.have.property(prop);\n      initial = subject[prop];\n    }\n\n    // Make sure that the target is a number\n    new Assertion(initial, flagMsg, ssfi, true).is.a('number');\n\n    fn();\n\n    var final = prop === undefined || prop === null ? subject() : subject[prop];\n    var msgObj = prop === undefined || prop === null ? initial : '.' + prop;\n\n    flag(this, 'deltaMsgObj', msgObj);\n    flag(this, 'initialDeltaValue', initial);\n    flag(this, 'finalDeltaValue', final);\n    flag(this, 'deltaBehavior', 'decrease');\n    flag(this, 'realDelta', initial - final);\n\n    this.assert(\n      final - initial < 0\n      , 'expected ' + msgObj + ' to decrease'\n      , 'expected ' + msgObj + ' to not decrease'\n    );\n  }\n\n  Assertion.addMethod('decrease', assertDecreases);\n  Assertion.addMethod('decreases', assertDecreases);\n\n  /**\n   * ### .by(delta[, msg])\n   *\n   * When following an `.increase` assertion in the chain, `.by` asserts that\n   * the subject of the `.increase` assertion increased by the given `delta`.\n   *\n   *     var myObj = {val: 1}\n   *       , addTwo = function () { myObj.val += 2; };\n   *\n   *     expect(addTwo).to.increase(myObj, 'val').by(2);\n   *\n   * When following a `.decrease` assertion in the chain, `.by` asserts that the\n   * subject of the `.decrease` assertion decreased by the given `delta`.\n   *\n   *     var myObj = {val: 1}\n   *       , subtractTwo = function () { myObj.val -= 2; };\n   *\n   *     expect(subtractTwo).to.decrease(myObj, 'val').by(2);\n   *\n   * When following a `.change` assertion in the chain, `.by` asserts that the\n   * subject of the `.change` assertion either increased or decreased by the\n   * given `delta`. However, it's dangerous to use `.change.by`. The problem is\n   * that it creates uncertain expectations. It's often best to identify the\n   * exact output that's expected, and then write an assertion that only accepts\n   * that exact output.\n   *\n   *     var myObj = {val: 1}\n   *       , addTwo = function () { myObj.val += 2; }\n   *       , subtractTwo = function () { myObj.val -= 2; };\n   *\n   *     expect(addTwo).to.increase(myObj, 'val').by(2); // Recommended\n   *     expect(addTwo).to.change(myObj, 'val').by(2); // Not recommended\n   *\n   *     expect(subtractTwo).to.decrease(myObj, 'val').by(2); // Recommended\n   *     expect(subtractTwo).to.change(myObj, 'val').by(2); // Not recommended\n   *\n   * Add `.not` earlier in the chain to negate `.by`. However, it's often best\n   * to assert that the subject changed by its expected delta, rather than\n   * asserting that it didn't change by one of countless unexpected deltas.\n   *\n   *     var myObj = {val: 1}\n   *       , addTwo = function () { myObj.val += 2; };\n   *\n   *     // Recommended\n   *     expect(addTwo).to.increase(myObj, 'val').by(2);\n   *\n   *     // Not recommended\n   *     expect(addTwo).to.increase(myObj, 'val').but.not.by(3);\n   *\n   * `.by` accepts an optional `msg` argument which is a custom error message to\n   * show when the assertion fails. The message can also be given as the second\n   * argument to `expect`.\n   *\n   *     var myObj = {val: 1}\n   *       , addTwo = function () { myObj.val += 2; };\n   *\n   *     expect(addTwo).to.increase(myObj, 'val').by(3, 'nooo why fail??');\n   *     expect(addTwo, 'nooo why fail??').to.increase(myObj, 'val').by(3);\n   *\n   * @name by\n   * @param {Number} delta\n   * @param {String} msg _optional_\n   * @namespace BDD\n   * @api public\n   */\n\n  function assertDelta(delta, msg) {\n    if (msg) flag(this, 'message', msg);\n\n    var msgObj = flag(this, 'deltaMsgObj');\n    var initial = flag(this, 'initialDeltaValue');\n    var final = flag(this, 'finalDeltaValue');\n    var behavior = flag(this, 'deltaBehavior');\n    var realDelta = flag(this, 'realDelta');\n\n    var expression;\n    if (behavior === 'change') {\n      expression = Math.abs(final - initial) === Math.abs(delta);\n    } else {\n      expression = realDelta === Math.abs(delta);\n    }\n\n    this.assert(\n      expression\n      , 'expected ' + msgObj + ' to ' + behavior + ' by ' + delta\n      , 'expected ' + msgObj + ' to not ' + behavior + ' by ' + delta\n    );\n  }\n\n  Assertion.addMethod('by', assertDelta);\n\n  /**\n   * ### .extensible\n   *\n   * Asserts that the target is extensible, which means that new properties can\n   * be added to it. Primitives are never extensible.\n   *\n   *     expect({a: 1}).to.be.extensible;\n   *\n   * Add `.not` earlier in the chain to negate `.extensible`.\n   *\n   *     var nonExtensibleObject = Object.preventExtensions({})\n   *       , sealedObject = Object.seal({})\n   *       , frozenObject = Object.freeze({});\n   *\n   *     expect(nonExtensibleObject).to.not.be.extensible;\n   *     expect(sealedObject).to.not.be.extensible;\n   *     expect(frozenObject).to.not.be.extensible;\n   *     expect(1).to.not.be.extensible;\n   *\n   * A custom error message can be given as the second argument to `expect`.\n   *\n   *     expect(1, 'nooo why fail??').to.be.extensible;\n   *\n   * @name extensible\n   * @namespace BDD\n   * @api public\n   */\n\n  Assertion.addProperty('extensible', function() {\n    var obj = flag(this, 'object');\n\n    // In ES5, if the argument to this method is a primitive, then it will cause a TypeError.\n    // In ES6, a non-object argument will be treated as if it was a non-extensible ordinary object, simply return false.\n    // https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object/isExtensible\n    // The following provides ES6 behavior for ES5 environments.\n\n    var isExtensible = obj === Object(obj) && Object.isExtensible(obj);\n\n    this.assert(\n      isExtensible\n      , 'expected #{this} to be extensible'\n      , 'expected #{this} to not be extensible'\n    );\n  });\n\n  /**\n   * ### .sealed\n   *\n   * Asserts that the target is sealed, which means that new properties can't be\n   * added to it, and its existing properties can't be reconfigured or deleted.\n   * However, it's possible that its existing properties can still be reassigned\n   * to different values. Primitives are always sealed.\n   *\n   *     var sealedObject = Object.seal({});\n   *     var frozenObject = Object.freeze({});\n   *\n   *     expect(sealedObject).to.be.sealed;\n   *     expect(frozenObject).to.be.sealed;\n   *     expect(1).to.be.sealed;\n   *\n   * Add `.not` earlier in the chain to negate `.sealed`.\n   *\n   *     expect({a: 1}).to.not.be.sealed;\n   *\n   * A custom error message can be given as the second argument to `expect`.\n   *\n   *     expect({a: 1}, 'nooo why fail??').to.be.sealed;\n   *\n   * @name sealed\n   * @namespace BDD\n   * @api public\n   */\n\n  Assertion.addProperty('sealed', function() {\n    var obj = flag(this, 'object');\n\n    // In ES5, if the argument to this method is a primitive, then it will cause a TypeError.\n    // In ES6, a non-object argument will be treated as if it was a sealed ordinary object, simply return true.\n    // See https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object/isSealed\n    // The following provides ES6 behavior for ES5 environments.\n\n    var isSealed = obj === Object(obj) ? Object.isSealed(obj) : true;\n\n    this.assert(\n      isSealed\n      , 'expected #{this} to be sealed'\n      , 'expected #{this} to not be sealed'\n    );\n  });\n\n  /**\n   * ### .frozen\n   *\n   * Asserts that the target is frozen, which means that new properties can't be\n   * added to it, and its existing properties can't be reassigned to different\n   * values, reconfigured, or deleted. Primitives are always frozen.\n   *\n   *     var frozenObject = Object.freeze({});\n   *\n   *     expect(frozenObject).to.be.frozen;\n   *     expect(1).to.be.frozen;\n   *\n   * Add `.not` earlier in the chain to negate `.frozen`.\n   *\n   *     expect({a: 1}).to.not.be.frozen;\n   *\n   * A custom error message can be given as the second argument to `expect`.\n   *\n   *     expect({a: 1}, 'nooo why fail??').to.be.frozen;\n   *\n   * @name frozen\n   * @namespace BDD\n   * @api public\n   */\n\n  Assertion.addProperty('frozen', function() {\n    var obj = flag(this, 'object');\n\n    // In ES5, if the argument to this method is a primitive, then it will cause a TypeError.\n    // In ES6, a non-object argument will be treated as if it was a frozen ordinary object, simply return true.\n    // See https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object/isFrozen\n    // The following provides ES6 behavior for ES5 environments.\n\n    var isFrozen = obj === Object(obj) ? Object.isFrozen(obj) : true;\n\n    this.assert(\n      isFrozen\n      , 'expected #{this} to be frozen'\n      , 'expected #{this} to not be frozen'\n    );\n  });\n\n  /**\n   * ### .finite\n   *\n   * Asserts that the target is a number, and isn't `NaN` or positive/negative\n   * `Infinity`.\n   *\n   *     expect(1).to.be.finite;\n   *\n   * Add `.not` earlier in the chain to negate `.finite`. However, it's\n   * dangerous to do so. The problem is that it creates uncertain expectations\n   * by asserting that the subject either isn't a number, or that it's `NaN`, or\n   * that it's positive `Infinity`, or that it's negative `Infinity`. It's often\n   * best to identify the exact output that's expected, and then write an\n   * assertion that only accepts that exact output.\n   *\n   * When the target isn't expected to be a number, it's often best to assert\n   * that it's the expected type, rather than asserting that it isn't one of\n   * many unexpected types.\n   *\n   *     expect('foo').to.be.a('string'); // Recommended\n   *     expect('foo').to.not.be.finite; // Not recommended\n   *\n   * When the target is expected to be `NaN`, it's often best to assert exactly\n   * that.\n   *\n   *     expect(NaN).to.be.NaN; // Recommended\n   *     expect(NaN).to.not.be.finite; // Not recommended\n   *\n   * When the target is expected to be positive infinity, it's often best to\n   * assert exactly that.\n   *\n   *     expect(Infinity).to.equal(Infinity); // Recommended\n   *     expect(Infinity).to.not.be.finite; // Not recommended\n   *\n   * When the target is expected to be negative infinity, it's often best to\n   * assert exactly that.\n   *\n   *     expect(-Infinity).to.equal(-Infinity); // Recommended\n   *     expect(-Infinity).to.not.be.finite; // Not recommended\n   *\n   * A custom error message can be given as the second argument to `expect`.\n   *\n   *     expect('foo', 'nooo why fail??').to.be.finite;\n   *\n   * @name finite\n   * @namespace BDD\n   * @api public\n   */\n\n  Assertion.addProperty('finite', function(msg) {\n    var obj = flag(this, 'object');\n\n    this.assert(\n        typeof obj === 'number' && isFinite(obj)\n      , 'expected #{this} to be a finite number'\n      , 'expected #{this} to not be a finite number'\n    );\n  });\n};\n","/*!\n * chai\n * Copyright(c) 2011-2014 Jake Luer <jake@alogicalparadox.com>\n * MIT Licensed\n */\n\nmodule.exports = function (chai, util) {\n  chai.expect = function (val, message) {\n    return new chai.Assertion(val, message);\n  };\n\n  /**\n   * ### .fail([message])\n   * ### .fail(actual, expected, [message], [operator])\n   *\n   * Throw a failure.\n   *\n   *     expect.fail();\n   *     expect.fail(\"custom error message\");\n   *     expect.fail(1, 2);\n   *     expect.fail(1, 2, \"custom error message\");\n   *     expect.fail(1, 2, \"custom error message\", \">\");\n   *     expect.fail(1, 2, undefined, \">\");\n   *\n   * @name fail\n   * @param {Mixed} actual\n   * @param {Mixed} expected\n   * @param {String} message\n   * @param {String} operator\n   * @namespace BDD\n   * @api public\n   */\n\n  chai.expect.fail = function (actual, expected, message, operator) {\n    if (arguments.length < 2) {\n        message = actual;\n        actual = undefined;\n    }\n\n    message = message || 'expect.fail()';\n    throw new chai.AssertionError(message, {\n        actual: actual\n      , expected: expected\n      , operator: operator\n    }, chai.expect.fail);\n  };\n};\n","/*!\n * chai\n * Copyright(c) 2011-2014 Jake Luer <jake@alogicalparadox.com>\n * MIT Licensed\n */\n\nmodule.exports = function (chai, util) {\n  var Assertion = chai.Assertion;\n\n  function loadShould () {\n    // explicitly define this method as function as to have it's name to include as `ssfi`\n    function shouldGetter() {\n      if (this instanceof String\n          || this instanceof Number\n          || this instanceof Boolean\n          || typeof Symbol === 'function' && this instanceof Symbol\n          || typeof BigInt === 'function' && this instanceof BigInt) {\n        return new Assertion(this.valueOf(), null, shouldGetter);\n      }\n      return new Assertion(this, null, shouldGetter);\n    }\n    function shouldSetter(value) {\n      // See https://github.com/chaijs/chai/issues/86: this makes\n      // `whatever.should = someValue` actually set `someValue`, which is\n      // especially useful for `global.should = require('chai').should()`.\n      //\n      // Note that we have to use [[DefineProperty]] instead of [[Put]]\n      // since otherwise we would trigger this very setter!\n      Object.defineProperty(this, 'should', {\n        value: value,\n        enumerable: true,\n        configurable: true,\n        writable: true\n      });\n    }\n    // modify Object.prototype to have `should`\n    Object.defineProperty(Object.prototype, 'should', {\n      set: shouldSetter\n      , get: shouldGetter\n      , configurable: true\n    });\n\n    var should = {};\n\n    /**\n     * ### .fail([message])\n     * ### .fail(actual, expected, [message], [operator])\n     *\n     * Throw a failure.\n     *\n     *     should.fail();\n     *     should.fail(\"custom error message\");\n     *     should.fail(1, 2);\n     *     should.fail(1, 2, \"custom error message\");\n     *     should.fail(1, 2, \"custom error message\", \">\");\n     *     should.fail(1, 2, undefined, \">\");\n     *\n     *\n     * @name fail\n     * @param {Mixed} actual\n     * @param {Mixed} expected\n     * @param {String} message\n     * @param {String} operator\n     * @namespace BDD\n     * @api public\n     */\n\n    should.fail = function (actual, expected, message, operator) {\n      if (arguments.length < 2) {\n          message = actual;\n          actual = undefined;\n      }\n\n      message = message || 'should.fail()';\n      throw new chai.AssertionError(message, {\n          actual: actual\n        , expected: expected\n        , operator: operator\n      }, should.fail);\n    };\n\n    /**\n     * ### .equal(actual, expected, [message])\n     *\n     * Asserts non-strict equality (`==`) of `actual` and `expected`.\n     *\n     *     should.equal(3, '3', '== coerces values to strings');\n     *\n     * @name equal\n     * @param {Mixed} actual\n     * @param {Mixed} expected\n     * @param {String} message\n     * @namespace Should\n     * @api public\n     */\n\n    should.equal = function (val1, val2, msg) {\n      new Assertion(val1, msg).to.equal(val2);\n    };\n\n    /**\n     * ### .throw(function, [constructor/string/regexp], [string/regexp], [message])\n     *\n     * Asserts that `function` will throw an error that is an instance of\n     * `constructor`, or alternately that it will throw an error with message\n     * matching `regexp`.\n     *\n     *     should.throw(fn, 'function throws a reference error');\n     *     should.throw(fn, /function throws a reference error/);\n     *     should.throw(fn, ReferenceError);\n     *     should.throw(fn, ReferenceError, 'function throws a reference error');\n     *     should.throw(fn, ReferenceError, /function throws a reference error/);\n     *\n     * @name throw\n     * @alias Throw\n     * @param {Function} function\n     * @param {ErrorConstructor} constructor\n     * @param {RegExp} regexp\n     * @param {String} message\n     * @see https://developer.mozilla.org/en/JavaScript/Reference/Global_Objects/Error#Error_types\n     * @namespace Should\n     * @api public\n     */\n\n    should.Throw = function (fn, errt, errs, msg) {\n      new Assertion(fn, msg).to.Throw(errt, errs);\n    };\n\n    /**\n     * ### .exist\n     *\n     * Asserts that the target is neither `null` nor `undefined`.\n     *\n     *     var foo = 'hi';\n     *\n     *     should.exist(foo, 'foo exists');\n     *\n     * @name exist\n     * @namespace Should\n     * @api public\n     */\n\n    should.exist = function (val, msg) {\n      new Assertion(val, msg).to.exist;\n    }\n\n    // negation\n    should.not = {}\n\n    /**\n     * ### .not.equal(actual, expected, [message])\n     *\n     * Asserts non-strict inequality (`!=`) of `actual` and `expected`.\n     *\n     *     should.not.equal(3, 4, 'these numbers are not equal');\n     *\n     * @name not.equal\n     * @param {Mixed} actual\n     * @param {Mixed} expected\n     * @param {String} message\n     * @namespace Should\n     * @api public\n     */\n\n    should.not.equal = function (val1, val2, msg) {\n      new Assertion(val1, msg).to.not.equal(val2);\n    };\n\n    /**\n     * ### .throw(function, [constructor/regexp], [message])\n     *\n     * Asserts that `function` will _not_ throw an error that is an instance of\n     * `constructor`, or alternately that it will not throw an error with message\n     * matching `regexp`.\n     *\n     *     should.not.throw(fn, Error, 'function does not throw');\n     *\n     * @name not.throw\n     * @alias not.Throw\n     * @param {Function} function\n     * @param {ErrorConstructor} constructor\n     * @param {RegExp} regexp\n     * @param {String} message\n     * @see https://developer.mozilla.org/en/JavaScript/Reference/Global_Objects/Error#Error_types\n     * @namespace Should\n     * @api public\n     */\n\n    should.not.Throw = function (fn, errt, errs, msg) {\n      new Assertion(fn, msg).to.not.Throw(errt, errs);\n    };\n\n    /**\n     * ### .not.exist\n     *\n     * Asserts that the target is neither `null` nor `undefined`.\n     *\n     *     var bar = null;\n     *\n     *     should.not.exist(bar, 'bar does not exist');\n     *\n     * @name not.exist\n     * @namespace Should\n     * @api public\n     */\n\n    should.not.exist = function (val, msg) {\n      new Assertion(val, msg).to.not.exist;\n    }\n\n    should['throw'] = should['Throw'];\n    should.not['throw'] = should.not['Throw'];\n\n    return should;\n  };\n\n  chai.should = loadShould;\n  chai.Should = loadShould;\n};\n","/*!\n * chai\n * Copyright(c) 2011-2014 Jake Luer <jake@alogicalparadox.com>\n * MIT Licensed\n */\n\nmodule.exports = function (chai, util) {\n  /*!\n   * Chai dependencies.\n   */\n\n  var Assertion = chai.Assertion\n    , flag = util.flag;\n\n  /*!\n   * Module export.\n   */\n\n  /**\n   * ### assert(expression, message)\n   *\n   * Write your own test expressions.\n   *\n   *     assert('foo' !== 'bar', 'foo is not bar');\n   *     assert(Array.isArray([]), 'empty arrays are arrays');\n   *\n   * @param {Mixed} expression to test for truthiness\n   * @param {String} message to display on error\n   * @name assert\n   * @namespace Assert\n   * @api public\n   */\n\n  var assert = chai.assert = function (express, errmsg) {\n    var test = new Assertion(null, null, chai.assert, true);\n    test.assert(\n        express\n      , errmsg\n      , '[ negation message unavailable ]'\n    );\n  };\n\n  /**\n   * ### .fail([message])\n   * ### .fail(actual, expected, [message], [operator])\n   *\n   * Throw a failure. Node.js `assert` module-compatible.\n   *\n   *     assert.fail();\n   *     assert.fail(\"custom error message\");\n   *     assert.fail(1, 2);\n   *     assert.fail(1, 2, \"custom error message\");\n   *     assert.fail(1, 2, \"custom error message\", \">\");\n   *     assert.fail(1, 2, undefined, \">\");\n   *\n   * @name fail\n   * @param {Mixed} actual\n   * @param {Mixed} expected\n   * @param {String} message\n   * @param {String} operator\n   * @namespace Assert\n   * @api public\n   */\n\n  assert.fail = function (actual, expected, message, operator) {\n    if (arguments.length < 2) {\n        // Comply with Node's fail([message]) interface\n\n        message = actual;\n        actual = undefined;\n    }\n\n    message = message || 'assert.fail()';\n    throw new chai.AssertionError(message, {\n        actual: actual\n      , expected: expected\n      , operator: operator\n    }, assert.fail);\n  };\n\n  /**\n   * ### .isOk(object, [message])\n   *\n   * Asserts that `object` is truthy.\n   *\n   *     assert.isOk('everything', 'everything is ok');\n   *     assert.isOk(false, 'this will fail');\n   *\n   * @name isOk\n   * @alias ok\n   * @param {Mixed} object to test\n   * @param {String} message\n   * @namespace Assert\n   * @api public\n   */\n\n  assert.isOk = function (val, msg) {\n    new Assertion(val, msg, assert.isOk, true).is.ok;\n  };\n\n  /**\n   * ### .isNotOk(object, [message])\n   *\n   * Asserts that `object` is falsy.\n   *\n   *     assert.isNotOk('everything', 'this will fail');\n   *     assert.isNotOk(false, 'this will pass');\n   *\n   * @name isNotOk\n   * @alias notOk\n   * @param {Mixed} object to test\n   * @param {String} message\n   * @namespace Assert\n   * @api public\n   */\n\n  assert.isNotOk = function (val, msg) {\n    new Assertion(val, msg, assert.isNotOk, true).is.not.ok;\n  };\n\n  /**\n   * ### .equal(actual, expected, [message])\n   *\n   * Asserts non-strict equality (`==`) of `actual` and `expected`.\n   *\n   *     assert.equal(3, '3', '== coerces values to strings');\n   *\n   * @name equal\n   * @param {Mixed} actual\n   * @param {Mixed} expected\n   * @param {String} message\n   * @namespace Assert\n   * @api public\n   */\n\n  assert.equal = function (act, exp, msg) {\n    var test = new Assertion(act, msg, assert.equal, true);\n\n    test.assert(\n        exp == flag(test, 'object')\n      , 'expected #{this} to equal #{exp}'\n      , 'expected #{this} to not equal #{act}'\n      , exp\n      , act\n      , true\n    );\n  };\n\n  /**\n   * ### .notEqual(actual, expected, [message])\n   *\n   * Asserts non-strict inequality (`!=`) of `actual` and `expected`.\n   *\n   *     assert.notEqual(3, 4, 'these numbers are not equal');\n   *\n   * @name notEqual\n   * @param {Mixed} actual\n   * @param {Mixed} expected\n   * @param {String} message\n   * @namespace Assert\n   * @api public\n   */\n\n  assert.notEqual = function (act, exp, msg) {\n    var test = new Assertion(act, msg, assert.notEqual, true);\n\n    test.assert(\n        exp != flag(test, 'object')\n      , 'expected #{this} to not equal #{exp}'\n      , 'expected #{this} to equal #{act}'\n      , exp\n      , act\n      , true\n    );\n  };\n\n  /**\n   * ### .strictEqual(actual, expected, [message])\n   *\n   * Asserts strict equality (`===`) of `actual` and `expected`.\n   *\n   *     assert.strictEqual(true, true, 'these booleans are strictly equal');\n   *\n   * @name strictEqual\n   * @param {Mixed} actual\n   * @param {Mixed} expected\n   * @param {String} message\n   * @namespace Assert\n   * @api public\n   */\n\n  assert.strictEqual = function (act, exp, msg) {\n    new Assertion(act, msg, assert.strictEqual, true).to.equal(exp);\n  };\n\n  /**\n   * ### .notStrictEqual(actual, expected, [message])\n   *\n   * Asserts strict inequality (`!==`) of `actual` and `expected`.\n   *\n   *     assert.notStrictEqual(3, '3', 'no coercion for strict equality');\n   *\n   * @name notStrictEqual\n   * @param {Mixed} actual\n   * @param {Mixed} expected\n   * @param {String} message\n   * @namespace Assert\n   * @api public\n   */\n\n  assert.notStrictEqual = function (act, exp, msg) {\n    new Assertion(act, msg, assert.notStrictEqual, true).to.not.equal(exp);\n  };\n\n  /**\n   * ### .deepEqual(actual, expected, [message])\n   *\n   * Asserts that `actual` is deeply equal to `expected`.\n   *\n   *     assert.deepEqual({ tea: 'green' }, { tea: 'green' });\n   *\n   * @name deepEqual\n   * @param {Mixed} actual\n   * @param {Mixed} expected\n   * @param {String} message\n   * @alias deepStrictEqual\n   * @namespace Assert\n   * @api public\n   */\n\n  assert.deepEqual = assert.deepStrictEqual = function (act, exp, msg) {\n    new Assertion(act, msg, assert.deepEqual, true).to.eql(exp);\n  };\n\n  /**\n   * ### .notDeepEqual(actual, expected, [message])\n   *\n   * Assert that `actual` is not deeply equal to `expected`.\n   *\n   *     assert.notDeepEqual({ tea: 'green' }, { tea: 'jasmine' });\n   *\n   * @name notDeepEqual\n   * @param {Mixed} actual\n   * @param {Mixed} expected\n   * @param {String} message\n   * @namespace Assert\n   * @api public\n   */\n\n  assert.notDeepEqual = function (act, exp, msg) {\n    new Assertion(act, msg, assert.notDeepEqual, true).to.not.eql(exp);\n  };\n\n   /**\n   * ### .isAbove(valueToCheck, valueToBeAbove, [message])\n   *\n   * Asserts `valueToCheck` is strictly greater than (>) `valueToBeAbove`.\n   *\n   *     assert.isAbove(5, 2, '5 is strictly greater than 2');\n   *\n   * @name isAbove\n   * @param {Mixed} valueToCheck\n   * @param {Mixed} valueToBeAbove\n   * @param {String} message\n   * @namespace Assert\n   * @api public\n   */\n\n  assert.isAbove = function (val, abv, msg) {\n    new Assertion(val, msg, assert.isAbove, true).to.be.above(abv);\n  };\n\n   /**\n   * ### .isAtLeast(valueToCheck, valueToBeAtLeast, [message])\n   *\n   * Asserts `valueToCheck` is greater than or equal to (>=) `valueToBeAtLeast`.\n   *\n   *     assert.isAtLeast(5, 2, '5 is greater or equal to 2');\n   *     assert.isAtLeast(3, 3, '3 is greater or equal to 3');\n   *\n   * @name isAtLeast\n   * @param {Mixed} valueToCheck\n   * @param {Mixed} valueToBeAtLeast\n   * @param {String} message\n   * @namespace Assert\n   * @api public\n   */\n\n  assert.isAtLeast = function (val, atlst, msg) {\n    new Assertion(val, msg, assert.isAtLeast, true).to.be.least(atlst);\n  };\n\n   /**\n   * ### .isBelow(valueToCheck, valueToBeBelow, [message])\n   *\n   * Asserts `valueToCheck` is strictly less than (<) `valueToBeBelow`.\n   *\n   *     assert.isBelow(3, 6, '3 is strictly less than 6');\n   *\n   * @name isBelow\n   * @param {Mixed} valueToCheck\n   * @param {Mixed} valueToBeBelow\n   * @param {String} message\n   * @namespace Assert\n   * @api public\n   */\n\n  assert.isBelow = function (val, blw, msg) {\n    new Assertion(val, msg, assert.isBelow, true).to.be.below(blw);\n  };\n\n   /**\n   * ### .isAtMost(valueToCheck, valueToBeAtMost, [message])\n   *\n   * Asserts `valueToCheck` is less than or equal to (<=) `valueToBeAtMost`.\n   *\n   *     assert.isAtMost(3, 6, '3 is less than or equal to 6');\n   *     assert.isAtMost(4, 4, '4 is less than or equal to 4');\n   *\n   * @name isAtMost\n   * @param {Mixed} valueToCheck\n   * @param {Mixed} valueToBeAtMost\n   * @param {String} message\n   * @namespace Assert\n   * @api public\n   */\n\n  assert.isAtMost = function (val, atmst, msg) {\n    new Assertion(val, msg, assert.isAtMost, true).to.be.most(atmst);\n  };\n\n  /**\n   * ### .isTrue(value, [message])\n   *\n   * Asserts that `value` is true.\n   *\n   *     var teaServed = true;\n   *     assert.isTrue(teaServed, 'the tea has been served');\n   *\n   * @name isTrue\n   * @param {Mixed} value\n   * @param {String} message\n   * @namespace Assert\n   * @api public\n   */\n\n  assert.isTrue = function (val, msg) {\n    new Assertion(val, msg, assert.isTrue, true).is['true'];\n  };\n\n  /**\n   * ### .isNotTrue(value, [message])\n   *\n   * Asserts that `value` is not true.\n   *\n   *     var tea = 'tasty chai';\n   *     assert.isNotTrue(tea, 'great, time for tea!');\n   *\n   * @name isNotTrue\n   * @param {Mixed} value\n   * @param {String} message\n   * @namespace Assert\n   * @api public\n   */\n\n  assert.isNotTrue = function (val, msg) {\n    new Assertion(val, msg, assert.isNotTrue, true).to.not.equal(true);\n  };\n\n  /**\n   * ### .isFalse(value, [message])\n   *\n   * Asserts that `value` is false.\n   *\n   *     var teaServed = false;\n   *     assert.isFalse(teaServed, 'no tea yet? hmm...');\n   *\n   * @name isFalse\n   * @param {Mixed} value\n   * @param {String} message\n   * @namespace Assert\n   * @api public\n   */\n\n  assert.isFalse = function (val, msg) {\n    new Assertion(val, msg, assert.isFalse, true).is['false'];\n  };\n\n  /**\n   * ### .isNotFalse(value, [message])\n   *\n   * Asserts that `value` is not false.\n   *\n   *     var tea = 'tasty chai';\n   *     assert.isNotFalse(tea, 'great, time for tea!');\n   *\n   * @name isNotFalse\n   * @param {Mixed} value\n   * @param {String} message\n   * @namespace Assert\n   * @api public\n   */\n\n  assert.isNotFalse = function (val, msg) {\n    new Assertion(val, msg, assert.isNotFalse, true).to.not.equal(false);\n  };\n\n  /**\n   * ### .isNull(value, [message])\n   *\n   * Asserts that `value` is null.\n   *\n   *     assert.isNull(err, 'there was no error');\n   *\n   * @name isNull\n   * @param {Mixed} value\n   * @param {String} message\n   * @namespace Assert\n   * @api public\n   */\n\n  assert.isNull = function (val, msg) {\n    new Assertion(val, msg, assert.isNull, true).to.equal(null);\n  };\n\n  /**\n   * ### .isNotNull(value, [message])\n   *\n   * Asserts that `value` is not null.\n   *\n   *     var tea = 'tasty chai';\n   *     assert.isNotNull(tea, 'great, time for tea!');\n   *\n   * @name isNotNull\n   * @param {Mixed} value\n   * @param {String} message\n   * @namespace Assert\n   * @api public\n   */\n\n  assert.isNotNull = function (val, msg) {\n    new Assertion(val, msg, assert.isNotNull, true).to.not.equal(null);\n  };\n\n  /**\n   * ### .isNaN\n   *\n   * Asserts that value is NaN.\n   *\n   *     assert.isNaN(NaN, 'NaN is NaN');\n   *\n   * @name isNaN\n   * @param {Mixed} value\n   * @param {String} message\n   * @namespace Assert\n   * @api public\n   */\n\n  assert.isNaN = function (val, msg) {\n    new Assertion(val, msg, assert.isNaN, true).to.be.NaN;\n  };\n\n  /**\n   * ### .isNotNaN\n   *\n   * Asserts that value is not NaN.\n   *\n   *     assert.isNotNaN(4, '4 is not NaN');\n   *\n   * @name isNotNaN\n   * @param {Mixed} value\n   * @param {String} message\n   * @namespace Assert\n   * @api public\n   */\n  assert.isNotNaN = function (val, msg) {\n    new Assertion(val, msg, assert.isNotNaN, true).not.to.be.NaN;\n  };\n\n  /**\n   * ### .exists\n   *\n   * Asserts that the target is neither `null` nor `undefined`.\n   *\n   *     var foo = 'hi';\n   *\n   *     assert.exists(foo, 'foo is neither `null` nor `undefined`');\n   *\n   * @name exists\n   * @param {Mixed} value\n   * @param {String} message\n   * @namespace Assert\n   * @api public\n   */\n\n  assert.exists = function (val, msg) {\n    new Assertion(val, msg, assert.exists, true).to.exist;\n  };\n\n  /**\n   * ### .notExists\n   *\n   * Asserts that the target is either `null` or `undefined`.\n   *\n   *     var bar = null\n   *       , baz;\n   *\n   *     assert.notExists(bar);\n   *     assert.notExists(baz, 'baz is either null or undefined');\n   *\n   * @name notExists\n   * @param {Mixed} value\n   * @param {String} message\n   * @namespace Assert\n   * @api public\n   */\n\n  assert.notExists = function (val, msg) {\n    new Assertion(val, msg, assert.notExists, true).to.not.exist;\n  };\n\n  /**\n   * ### .isUndefined(value, [message])\n   *\n   * Asserts that `value` is `undefined`.\n   *\n   *     var tea;\n   *     assert.isUndefined(tea, 'no tea defined');\n   *\n   * @name isUndefined\n   * @param {Mixed} value\n   * @param {String} message\n   * @namespace Assert\n   * @api public\n   */\n\n  assert.isUndefined = function (val, msg) {\n    new Assertion(val, msg, assert.isUndefined, true).to.equal(undefined);\n  };\n\n  /**\n   * ### .isDefined(value, [message])\n   *\n   * Asserts that `value` is not `undefined`.\n   *\n   *     var tea = 'cup of chai';\n   *     assert.isDefined(tea, 'tea has been defined');\n   *\n   * @name isDefined\n   * @param {Mixed} value\n   * @param {String} message\n   * @namespace Assert\n   * @api public\n   */\n\n  assert.isDefined = function (val, msg) {\n    new Assertion(val, msg, assert.isDefined, true).to.not.equal(undefined);\n  };\n\n  /**\n   * ### .isFunction(value, [message])\n   *\n   * Asserts that `value` is a function.\n   *\n   *     function serveTea() { return 'cup of tea'; };\n   *     assert.isFunction(serveTea, 'great, we can have tea now');\n   *\n   * @name isFunction\n   * @param {Mixed} value\n   * @param {String} message\n   * @namespace Assert\n   * @api public\n   */\n\n  assert.isFunction = function (val, msg) {\n    new Assertion(val, msg, assert.isFunction, true).to.be.a('function');\n  };\n\n  /**\n   * ### .isNotFunction(value, [message])\n   *\n   * Asserts that `value` is _not_ a function.\n   *\n   *     var serveTea = [ 'heat', 'pour', 'sip' ];\n   *     assert.isNotFunction(serveTea, 'great, we have listed the steps');\n   *\n   * @name isNotFunction\n   * @param {Mixed} value\n   * @param {String} message\n   * @namespace Assert\n   * @api public\n   */\n\n  assert.isNotFunction = function (val, msg) {\n    new Assertion(val, msg, assert.isNotFunction, true).to.not.be.a('function');\n  };\n\n  /**\n   * ### .isObject(value, [message])\n   *\n   * Asserts that `value` is an object of type 'Object' (as revealed by `Object.prototype.toString`).\n   * _The assertion does not match subclassed objects._\n   *\n   *     var selection = { name: 'Chai', serve: 'with spices' };\n   *     assert.isObject(selection, 'tea selection is an object');\n   *\n   * @name isObject\n   * @param {Mixed} value\n   * @param {String} message\n   * @namespace Assert\n   * @api public\n   */\n\n  assert.isObject = function (val, msg) {\n    new Assertion(val, msg, assert.isObject, true).to.be.a('object');\n  };\n\n  /**\n   * ### .isNotObject(value, [message])\n   *\n   * Asserts that `value` is _not_ an object of type 'Object' (as revealed by `Object.prototype.toString`).\n   *\n   *     var selection = 'chai'\n   *     assert.isNotObject(selection, 'tea selection is not an object');\n   *     assert.isNotObject(null, 'null is not an object');\n   *\n   * @name isNotObject\n   * @param {Mixed} value\n   * @param {String} message\n   * @namespace Assert\n   * @api public\n   */\n\n  assert.isNotObject = function (val, msg) {\n    new Assertion(val, msg, assert.isNotObject, true).to.not.be.a('object');\n  };\n\n  /**\n   * ### .isArray(value, [message])\n   *\n   * Asserts that `value` is an array.\n   *\n   *     var menu = [ 'green', 'chai', 'oolong' ];\n   *     assert.isArray(menu, 'what kind of tea do we want?');\n   *\n   * @name isArray\n   * @param {Mixed} value\n   * @param {String} message\n   * @namespace Assert\n   * @api public\n   */\n\n  assert.isArray = function (val, msg) {\n    new Assertion(val, msg, assert.isArray, true).to.be.an('array');\n  };\n\n  /**\n   * ### .isNotArray(value, [message])\n   *\n   * Asserts that `value` is _not_ an array.\n   *\n   *     var menu = 'green|chai|oolong';\n   *     assert.isNotArray(menu, 'what kind of tea do we want?');\n   *\n   * @name isNotArray\n   * @param {Mixed} value\n   * @param {String} message\n   * @namespace Assert\n   * @api public\n   */\n\n  assert.isNotArray = function (val, msg) {\n    new Assertion(val, msg, assert.isNotArray, true).to.not.be.an('array');\n  };\n\n  /**\n   * ### .isString(value, [message])\n   *\n   * Asserts that `value` is a string.\n   *\n   *     var teaOrder = 'chai';\n   *     assert.isString(teaOrder, 'order placed');\n   *\n   * @name isString\n   * @param {Mixed} value\n   * @param {String} message\n   * @namespace Assert\n   * @api public\n   */\n\n  assert.isString = function (val, msg) {\n    new Assertion(val, msg, assert.isString, true).to.be.a('string');\n  };\n\n  /**\n   * ### .isNotString(value, [message])\n   *\n   * Asserts that `value` is _not_ a string.\n   *\n   *     var teaOrder = 4;\n   *     assert.isNotString(teaOrder, 'order placed');\n   *\n   * @name isNotString\n   * @param {Mixed} value\n   * @param {String} message\n   * @namespace Assert\n   * @api public\n   */\n\n  assert.isNotString = function (val, msg) {\n    new Assertion(val, msg, assert.isNotString, true).to.not.be.a('string');\n  };\n\n  /**\n   * ### .isNumber(value, [message])\n   *\n   * Asserts that `value` is a number.\n   *\n   *     var cups = 2;\n   *     assert.isNumber(cups, 'how many cups');\n   *\n   * @name isNumber\n   * @param {Number} value\n   * @param {String} message\n   * @namespace Assert\n   * @api public\n   */\n\n  assert.isNumber = function (val, msg) {\n    new Assertion(val, msg, assert.isNumber, true).to.be.a('number');\n  };\n\n  /**\n   * ### .isNotNumber(value, [message])\n   *\n   * Asserts that `value` is _not_ a number.\n   *\n   *     var cups = '2 cups please';\n   *     assert.isNotNumber(cups, 'how many cups');\n   *\n   * @name isNotNumber\n   * @param {Mixed} value\n   * @param {String} message\n   * @namespace Assert\n   * @api public\n   */\n\n  assert.isNotNumber = function (val, msg) {\n    new Assertion(val, msg, assert.isNotNumber, true).to.not.be.a('number');\n  };\n\n   /**\n   * ### .isFinite(value, [message])\n   *\n   * Asserts that `value` is a finite number. Unlike `.isNumber`, this will fail for `NaN` and `Infinity`.\n   *\n   *     var cups = 2;\n   *     assert.isFinite(cups, 'how many cups');\n   *\n   *     assert.isFinite(NaN); // throws\n   *\n   * @name isFinite\n   * @param {Number} value\n   * @param {String} message\n   * @namespace Assert\n   * @api public\n   */\n\n  assert.isFinite = function (val, msg) {\n    new Assertion(val, msg, assert.isFinite, true).to.be.finite;\n  };\n\n  /**\n   * ### .isBoolean(value, [message])\n   *\n   * Asserts that `value` is a boolean.\n   *\n   *     var teaReady = true\n   *       , teaServed = false;\n   *\n   *     assert.isBoolean(teaReady, 'is the tea ready');\n   *     assert.isBoolean(teaServed, 'has tea been served');\n   *\n   * @name isBoolean\n   * @param {Mixed} value\n   * @param {String} message\n   * @namespace Assert\n   * @api public\n   */\n\n  assert.isBoolean = function (val, msg) {\n    new Assertion(val, msg, assert.isBoolean, true).to.be.a('boolean');\n  };\n\n  /**\n   * ### .isNotBoolean(value, [message])\n   *\n   * Asserts that `value` is _not_ a boolean.\n   *\n   *     var teaReady = 'yep'\n   *       , teaServed = 'nope';\n   *\n   *     assert.isNotBoolean(teaReady, 'is the tea ready');\n   *     assert.isNotBoolean(teaServed, 'has tea been served');\n   *\n   * @name isNotBoolean\n   * @param {Mixed} value\n   * @param {String} message\n   * @namespace Assert\n   * @api public\n   */\n\n  assert.isNotBoolean = function (val, msg) {\n    new Assertion(val, msg, assert.isNotBoolean, true).to.not.be.a('boolean');\n  };\n\n  /**\n   * ### .typeOf(value, name, [message])\n   *\n   * Asserts that `value`'s type is `name`, as determined by\n   * `Object.prototype.toString`.\n   *\n   *     assert.typeOf({ tea: 'chai' }, 'object', 'we have an object');\n   *     assert.typeOf(['chai', 'jasmine'], 'array', 'we have an array');\n   *     assert.typeOf('tea', 'string', 'we have a string');\n   *     assert.typeOf(/tea/, 'regexp', 'we have a regular expression');\n   *     assert.typeOf(null, 'null', 'we have a null');\n   *     assert.typeOf(undefined, 'undefined', 'we have an undefined');\n   *\n   * @name typeOf\n   * @param {Mixed} value\n   * @param {String} name\n   * @param {String} message\n   * @namespace Assert\n   * @api public\n   */\n\n  assert.typeOf = function (val, type, msg) {\n    new Assertion(val, msg, assert.typeOf, true).to.be.a(type);\n  };\n\n  /**\n   * ### .notTypeOf(value, name, [message])\n   *\n   * Asserts that `value`'s type is _not_ `name`, as determined by\n   * `Object.prototype.toString`.\n   *\n   *     assert.notTypeOf('tea', 'number', 'strings are not numbers');\n   *\n   * @name notTypeOf\n   * @param {Mixed} value\n   * @param {String} typeof name\n   * @param {String} message\n   * @namespace Assert\n   * @api public\n   */\n\n  assert.notTypeOf = function (val, type, msg) {\n    new Assertion(val, msg, assert.notTypeOf, true).to.not.be.a(type);\n  };\n\n  /**\n   * ### .instanceOf(object, constructor, [message])\n   *\n   * Asserts that `value` is an instance of `constructor`.\n   *\n   *     var Tea = function (name) { this.name = name; }\n   *       , chai = new Tea('chai');\n   *\n   *     assert.instanceOf(chai, Tea, 'chai is an instance of tea');\n   *\n   * @name instanceOf\n   * @param {Object} object\n   * @param {Constructor} constructor\n   * @param {String} message\n   * @namespace Assert\n   * @api public\n   */\n\n  assert.instanceOf = function (val, type, msg) {\n    new Assertion(val, msg, assert.instanceOf, true).to.be.instanceOf(type);\n  };\n\n  /**\n   * ### .notInstanceOf(object, constructor, [message])\n   *\n   * Asserts `value` is not an instance of `constructor`.\n   *\n   *     var Tea = function (name) { this.name = name; }\n   *       , chai = new String('chai');\n   *\n   *     assert.notInstanceOf(chai, Tea, 'chai is not an instance of tea');\n   *\n   * @name notInstanceOf\n   * @param {Object} object\n   * @param {Constructor} constructor\n   * @param {String} message\n   * @namespace Assert\n   * @api public\n   */\n\n  assert.notInstanceOf = function (val, type, msg) {\n    new Assertion(val, msg, assert.notInstanceOf, true)\n      .to.not.be.instanceOf(type);\n  };\n\n  /**\n   * ### .include(haystack, needle, [message])\n   *\n   * Asserts that `haystack` includes `needle`. Can be used to assert the\n   * inclusion of a value in an array, a substring in a string, or a subset of\n   * properties in an object.\n   *\n   *     assert.include([1,2,3], 2, 'array contains value');\n   *     assert.include('foobar', 'foo', 'string contains substring');\n   *     assert.include({ foo: 'bar', hello: 'universe' }, { foo: 'bar' }, 'object contains property');\n   *\n   * Strict equality (===) is used. When asserting the inclusion of a value in\n   * an array, the array is searched for an element that's strictly equal to the\n   * given value. When asserting a subset of properties in an object, the object\n   * is searched for the given property keys, checking that each one is present\n   * and strictly equal to the given property value. For instance:\n   *\n   *     var obj1 = {a: 1}\n   *       , obj2 = {b: 2};\n   *     assert.include([obj1, obj2], obj1);\n   *     assert.include({foo: obj1, bar: obj2}, {foo: obj1});\n   *     assert.include({foo: obj1, bar: obj2}, {foo: obj1, bar: obj2});\n   *\n   * @name include\n   * @param {Array|String} haystack\n   * @param {Mixed} needle\n   * @param {String} message\n   * @namespace Assert\n   * @api public\n   */\n\n  assert.include = function (exp, inc, msg) {\n    new Assertion(exp, msg, assert.include, true).include(inc);\n  };\n\n  /**\n   * ### .notInclude(haystack, needle, [message])\n   *\n   * Asserts that `haystack` does not include `needle`. Can be used to assert\n   * the absence of a value in an array, a substring in a string, or a subset of\n   * properties in an object.\n   *\n   *     assert.notInclude([1,2,3], 4, \"array doesn't contain value\");\n   *     assert.notInclude('foobar', 'baz', \"string doesn't contain substring\");\n   *     assert.notInclude({ foo: 'bar', hello: 'universe' }, { foo: 'baz' }, 'object doesn't contain property');\n   *\n   * Strict equality (===) is used. When asserting the absence of a value in an\n   * array, the array is searched to confirm the absence of an element that's\n   * strictly equal to the given value. When asserting a subset of properties in\n   * an object, the object is searched to confirm that at least one of the given\n   * property keys is either not present or not strictly equal to the given\n   * property value. For instance:\n   *\n   *     var obj1 = {a: 1}\n   *       , obj2 = {b: 2};\n   *     assert.notInclude([obj1, obj2], {a: 1});\n   *     assert.notInclude({foo: obj1, bar: obj2}, {foo: {a: 1}});\n   *     assert.notInclude({foo: obj1, bar: obj2}, {foo: obj1, bar: {b: 2}});\n   *\n   * @name notInclude\n   * @param {Array|String} haystack\n   * @param {Mixed} needle\n   * @param {String} message\n   * @namespace Assert\n   * @api public\n   */\n\n  assert.notInclude = function (exp, inc, msg) {\n    new Assertion(exp, msg, assert.notInclude, true).not.include(inc);\n  };\n\n  /**\n   * ### .deepInclude(haystack, needle, [message])\n   *\n   * Asserts that `haystack` includes `needle`. Can be used to assert the\n   * inclusion of a value in an array or a subset of properties in an object.\n   * Deep equality is used.\n   *\n   *     var obj1 = {a: 1}\n   *       , obj2 = {b: 2};\n   *     assert.deepInclude([obj1, obj2], {a: 1});\n   *     assert.deepInclude({foo: obj1, bar: obj2}, {foo: {a: 1}});\n   *     assert.deepInclude({foo: obj1, bar: obj2}, {foo: {a: 1}, bar: {b: 2}});\n   *\n   * @name deepInclude\n   * @param {Array|String} haystack\n   * @param {Mixed} needle\n   * @param {String} message\n   * @namespace Assert\n   * @api public\n   */\n\n  assert.deepInclude = function (exp, inc, msg) {\n    new Assertion(exp, msg, assert.deepInclude, true).deep.include(inc);\n  };\n\n  /**\n   * ### .notDeepInclude(haystack, needle, [message])\n   *\n   * Asserts that `haystack` does not include `needle`. Can be used to assert\n   * the absence of a value in an array or a subset of properties in an object.\n   * Deep equality is used.\n   *\n   *     var obj1 = {a: 1}\n   *       , obj2 = {b: 2};\n   *     assert.notDeepInclude([obj1, obj2], {a: 9});\n   *     assert.notDeepInclude({foo: obj1, bar: obj2}, {foo: {a: 9}});\n   *     assert.notDeepInclude({foo: obj1, bar: obj2}, {foo: {a: 1}, bar: {b: 9}});\n   *\n   * @name notDeepInclude\n   * @param {Array|String} haystack\n   * @param {Mixed} needle\n   * @param {String} message\n   * @namespace Assert\n   * @api public\n   */\n\n  assert.notDeepInclude = function (exp, inc, msg) {\n    new Assertion(exp, msg, assert.notDeepInclude, true).not.deep.include(inc);\n  };\n\n  /**\n   * ### .nestedInclude(haystack, needle, [message])\n   *\n   * Asserts that 'haystack' includes 'needle'.\n   * Can be used to assert the inclusion of a subset of properties in an\n   * object.\n   * Enables the use of dot- and bracket-notation for referencing nested\n   * properties.\n   * '[]' and '.' in property names can be escaped using double backslashes.\n   *\n   *     assert.nestedInclude({'.a': {'b': 'x'}}, {'\\\\.a.[b]': 'x'});\n   *     assert.nestedInclude({'a': {'[b]': 'x'}}, {'a.\\\\[b\\\\]': 'x'});\n   *\n   * @name nestedInclude\n   * @param {Object} haystack\n   * @param {Object} needle\n   * @param {String} message\n   * @namespace Assert\n   * @api public\n   */\n\n  assert.nestedInclude = function (exp, inc, msg) {\n    new Assertion(exp, msg, assert.nestedInclude, true).nested.include(inc);\n  };\n\n  /**\n   * ### .notNestedInclude(haystack, needle, [message])\n   *\n   * Asserts that 'haystack' does not include 'needle'.\n   * Can be used to assert the absence of a subset of properties in an\n   * object.\n   * Enables the use of dot- and bracket-notation for referencing nested\n   * properties.\n   * '[]' and '.' in property names can be escaped using double backslashes.\n   *\n   *     assert.notNestedInclude({'.a': {'b': 'x'}}, {'\\\\.a.b': 'y'});\n   *     assert.notNestedInclude({'a': {'[b]': 'x'}}, {'a.\\\\[b\\\\]': 'y'});\n   *\n   * @name notNestedInclude\n   * @param {Object} haystack\n   * @param {Object} needle\n   * @param {String} message\n   * @namespace Assert\n   * @api public\n   */\n\n  assert.notNestedInclude = function (exp, inc, msg) {\n    new Assertion(exp, msg, assert.notNestedInclude, true)\n      .not.nested.include(inc);\n  };\n\n  /**\n   * ### .deepNestedInclude(haystack, needle, [message])\n   *\n   * Asserts that 'haystack' includes 'needle'.\n   * Can be used to assert the inclusion of a subset of properties in an\n   * object while checking for deep equality.\n   * Enables the use of dot- and bracket-notation for referencing nested\n   * properties.\n   * '[]' and '.' in property names can be escaped using double backslashes.\n   *\n   *     assert.deepNestedInclude({a: {b: [{x: 1}]}}, {'a.b[0]': {x: 1}});\n   *     assert.deepNestedInclude({'.a': {'[b]': {x: 1}}}, {'\\\\.a.\\\\[b\\\\]': {x: 1}});\n   *\n   * @name deepNestedInclude\n   * @param {Object} haystack\n   * @param {Object} needle\n   * @param {String} message\n   * @namespace Assert\n   * @api public\n   */\n\n  assert.deepNestedInclude = function(exp, inc, msg) {\n    new Assertion(exp, msg, assert.deepNestedInclude, true)\n      .deep.nested.include(inc);\n  };\n\n  /**\n   * ### .notDeepNestedInclude(haystack, needle, [message])\n   *\n   * Asserts that 'haystack' does not include 'needle'.\n   * Can be used to assert the absence of a subset of properties in an\n   * object while checking for deep equality.\n   * Enables the use of dot- and bracket-notation for referencing nested\n   * properties.\n   * '[]' and '.' in property names can be escaped using double backslashes.\n   *\n   *     assert.notDeepNestedInclude({a: {b: [{x: 1}]}}, {'a.b[0]': {y: 1}})\n   *     assert.notDeepNestedInclude({'.a': {'[b]': {x: 1}}}, {'\\\\.a.\\\\[b\\\\]': {y: 2}});\n   *\n   * @name notDeepNestedInclude\n   * @param {Object} haystack\n   * @param {Object} needle\n   * @param {String} message\n   * @namespace Assert\n   * @api public\n   */\n\n  assert.notDeepNestedInclude = function(exp, inc, msg) {\n    new Assertion(exp, msg, assert.notDeepNestedInclude, true)\n      .not.deep.nested.include(inc);\n  };\n\n  /**\n   * ### .ownInclude(haystack, needle, [message])\n   *\n   * Asserts that 'haystack' includes 'needle'.\n   * Can be used to assert the inclusion of a subset of properties in an\n   * object while ignoring inherited properties.\n   *\n   *     assert.ownInclude({ a: 1 }, { a: 1 });\n   *\n   * @name ownInclude\n   * @param {Object} haystack\n   * @param {Object} needle\n   * @param {String} message\n   * @namespace Assert\n   * @api public\n   */\n\n  assert.ownInclude = function(exp, inc, msg) {\n    new Assertion(exp, msg, assert.ownInclude, true).own.include(inc);\n  };\n\n  /**\n   * ### .notOwnInclude(haystack, needle, [message])\n   *\n   * Asserts that 'haystack' includes 'needle'.\n   * Can be used to assert the absence of a subset of properties in an\n   * object while ignoring inherited properties.\n   *\n   *     Object.prototype.b = 2;\n   *\n   *     assert.notOwnInclude({ a: 1 }, { b: 2 });\n   *\n   * @name notOwnInclude\n   * @param {Object} haystack\n   * @param {Object} needle\n   * @param {String} message\n   * @namespace Assert\n   * @api public\n   */\n\n  assert.notOwnInclude = function(exp, inc, msg) {\n    new Assertion(exp, msg, assert.notOwnInclude, true).not.own.include(inc);\n  };\n\n  /**\n   * ### .deepOwnInclude(haystack, needle, [message])\n   *\n   * Asserts that 'haystack' includes 'needle'.\n   * Can be used to assert the inclusion of a subset of properties in an\n   * object while ignoring inherited properties and checking for deep equality.\n   *\n   *      assert.deepOwnInclude({a: {b: 2}}, {a: {b: 2}});\n   *\n   * @name deepOwnInclude\n   * @param {Object} haystack\n   * @param {Object} needle\n   * @param {String} message\n   * @namespace Assert\n   * @api public\n   */\n\n  assert.deepOwnInclude = function(exp, inc, msg) {\n    new Assertion(exp, msg, assert.deepOwnInclude, true)\n      .deep.own.include(inc);\n  };\n\n   /**\n   * ### .notDeepOwnInclude(haystack, needle, [message])\n   *\n   * Asserts that 'haystack' includes 'needle'.\n   * Can be used to assert the absence of a subset of properties in an\n   * object while ignoring inherited properties and checking for deep equality.\n   *\n   *      assert.notDeepOwnInclude({a: {b: 2}}, {a: {c: 3}});\n   *\n   * @name notDeepOwnInclude\n   * @param {Object} haystack\n   * @param {Object} needle\n   * @param {String} message\n   * @namespace Assert\n   * @api public\n   */\n\n  assert.notDeepOwnInclude = function(exp, inc, msg) {\n    new Assertion(exp, msg, assert.notDeepOwnInclude, true)\n      .not.deep.own.include(inc);\n  };\n\n  /**\n   * ### .match(value, regexp, [message])\n   *\n   * Asserts that `value` matches the regular expression `regexp`.\n   *\n   *     assert.match('foobar', /^foo/, 'regexp matches');\n   *\n   * @name match\n   * @param {Mixed} value\n   * @param {RegExp} regexp\n   * @param {String} message\n   * @namespace Assert\n   * @api public\n   */\n\n  assert.match = function (exp, re, msg) {\n    new Assertion(exp, msg, assert.match, true).to.match(re);\n  };\n\n  /**\n   * ### .notMatch(value, regexp, [message])\n   *\n   * Asserts that `value` does not match the regular expression `regexp`.\n   *\n   *     assert.notMatch('foobar', /^foo/, 'regexp does not match');\n   *\n   * @name notMatch\n   * @param {Mixed} value\n   * @param {RegExp} regexp\n   * @param {String} message\n   * @namespace Assert\n   * @api public\n   */\n\n  assert.notMatch = function (exp, re, msg) {\n    new Assertion(exp, msg, assert.notMatch, true).to.not.match(re);\n  };\n\n  /**\n   * ### .property(object, property, [message])\n   *\n   * Asserts that `object` has a direct or inherited property named by\n   * `property`.\n   *\n   *     assert.property({ tea: { green: 'matcha' }}, 'tea');\n   *     assert.property({ tea: { green: 'matcha' }}, 'toString');\n   *\n   * @name property\n   * @param {Object} object\n   * @param {String} property\n   * @param {String} message\n   * @namespace Assert\n   * @api public\n   */\n\n  assert.property = function (obj, prop, msg) {\n    new Assertion(obj, msg, assert.property, true).to.have.property(prop);\n  };\n\n  /**\n   * ### .notProperty(object, property, [message])\n   *\n   * Asserts that `object` does _not_ have a direct or inherited property named\n   * by `property`.\n   *\n   *     assert.notProperty({ tea: { green: 'matcha' }}, 'coffee');\n   *\n   * @name notProperty\n   * @param {Object} object\n   * @param {String} property\n   * @param {String} message\n   * @namespace Assert\n   * @api public\n   */\n\n  assert.notProperty = function (obj, prop, msg) {\n    new Assertion(obj, msg, assert.notProperty, true)\n      .to.not.have.property(prop);\n  };\n\n  /**\n   * ### .propertyVal(object, property, value, [message])\n   *\n   * Asserts that `object` has a direct or inherited property named by\n   * `property` with a value given by `value`. Uses a strict equality check\n   * (===).\n   *\n   *     assert.propertyVal({ tea: 'is good' }, 'tea', 'is good');\n   *\n   * @name propertyVal\n   * @param {Object} object\n   * @param {String} property\n   * @param {Mixed} value\n   * @param {String} message\n   * @namespace Assert\n   * @api public\n   */\n\n  assert.propertyVal = function (obj, prop, val, msg) {\n    new Assertion(obj, msg, assert.propertyVal, true)\n      .to.have.property(prop, val);\n  };\n\n  /**\n   * ### .notPropertyVal(object, property, value, [message])\n   *\n   * Asserts that `object` does _not_ have a direct or inherited property named\n   * by `property` with value given by `value`. Uses a strict equality check\n   * (===).\n   *\n   *     assert.notPropertyVal({ tea: 'is good' }, 'tea', 'is bad');\n   *     assert.notPropertyVal({ tea: 'is good' }, 'coffee', 'is good');\n   *\n   * @name notPropertyVal\n   * @param {Object} object\n   * @param {String} property\n   * @param {Mixed} value\n   * @param {String} message\n   * @namespace Assert\n   * @api public\n   */\n\n  assert.notPropertyVal = function (obj, prop, val, msg) {\n    new Assertion(obj, msg, assert.notPropertyVal, true)\n      .to.not.have.property(prop, val);\n  };\n\n  /**\n   * ### .deepPropertyVal(object, property, value, [message])\n   *\n   * Asserts that `object` has a direct or inherited property named by\n   * `property` with a value given by `value`. Uses a deep equality check.\n   *\n   *     assert.deepPropertyVal({ tea: { green: 'matcha' } }, 'tea', { green: 'matcha' });\n   *\n   * @name deepPropertyVal\n   * @param {Object} object\n   * @param {String} property\n   * @param {Mixed} value\n   * @param {String} message\n   * @namespace Assert\n   * @api public\n   */\n\n  assert.deepPropertyVal = function (obj, prop, val, msg) {\n    new Assertion(obj, msg, assert.deepPropertyVal, true)\n      .to.have.deep.property(prop, val);\n  };\n\n  /**\n   * ### .notDeepPropertyVal(object, property, value, [message])\n   *\n   * Asserts that `object` does _not_ have a direct or inherited property named\n   * by `property` with value given by `value`. Uses a deep equality check.\n   *\n   *     assert.notDeepPropertyVal({ tea: { green: 'matcha' } }, 'tea', { black: 'matcha' });\n   *     assert.notDeepPropertyVal({ tea: { green: 'matcha' } }, 'tea', { green: 'oolong' });\n   *     assert.notDeepPropertyVal({ tea: { green: 'matcha' } }, 'coffee', { green: 'matcha' });\n   *\n   * @name notDeepPropertyVal\n   * @param {Object} object\n   * @param {String} property\n   * @param {Mixed} value\n   * @param {String} message\n   * @namespace Assert\n   * @api public\n   */\n\n  assert.notDeepPropertyVal = function (obj, prop, val, msg) {\n    new Assertion(obj, msg, assert.notDeepPropertyVal, true)\n      .to.not.have.deep.property(prop, val);\n  };\n\n  /**\n   * ### .ownProperty(object, property, [message])\n   *\n   * Asserts that `object` has a direct property named by `property`. Inherited\n   * properties aren't checked.\n   *\n   *     assert.ownProperty({ tea: { green: 'matcha' }}, 'tea');\n   *\n   * @name ownProperty\n   * @param {Object} object\n   * @param {String} property\n   * @param {String} message\n   * @api public\n   */\n\n  assert.ownProperty = function (obj, prop, msg) {\n    new Assertion(obj, msg, assert.ownProperty, true)\n      .to.have.own.property(prop);\n  };\n\n  /**\n   * ### .notOwnProperty(object, property, [message])\n   *\n   * Asserts that `object` does _not_ have a direct property named by\n   * `property`. Inherited properties aren't checked.\n   *\n   *     assert.notOwnProperty({ tea: { green: 'matcha' }}, 'coffee');\n   *     assert.notOwnProperty({}, 'toString');\n   *\n   * @name notOwnProperty\n   * @param {Object} object\n   * @param {String} property\n   * @param {String} message\n   * @api public\n   */\n\n  assert.notOwnProperty = function (obj, prop, msg) {\n    new Assertion(obj, msg, assert.notOwnProperty, true)\n      .to.not.have.own.property(prop);\n  };\n\n  /**\n   * ### .ownPropertyVal(object, property, value, [message])\n   *\n   * Asserts that `object` has a direct property named by `property` and a value\n   * equal to the provided `value`. Uses a strict equality check (===).\n   * Inherited properties aren't checked.\n   *\n   *     assert.ownPropertyVal({ coffee: 'is good'}, 'coffee', 'is good');\n   *\n   * @name ownPropertyVal\n   * @param {Object} object\n   * @param {String} property\n   * @param {Mixed} value\n   * @param {String} message\n   * @api public\n   */\n\n  assert.ownPropertyVal = function (obj, prop, value, msg) {\n    new Assertion(obj, msg, assert.ownPropertyVal, true)\n      .to.have.own.property(prop, value);\n  };\n\n  /**\n   * ### .notOwnPropertyVal(object, property, value, [message])\n   *\n   * Asserts that `object` does _not_ have a direct property named by `property`\n   * with a value equal to the provided `value`. Uses a strict equality check\n   * (===). Inherited properties aren't checked.\n   *\n   *     assert.notOwnPropertyVal({ tea: 'is better'}, 'tea', 'is worse');\n   *     assert.notOwnPropertyVal({}, 'toString', Object.prototype.toString);\n   *\n   * @name notOwnPropertyVal\n   * @param {Object} object\n   * @param {String} property\n   * @param {Mixed} value\n   * @param {String} message\n   * @api public\n   */\n\n  assert.notOwnPropertyVal = function (obj, prop, value, msg) {\n    new Assertion(obj, msg, assert.notOwnPropertyVal, true)\n      .to.not.have.own.property(prop, value);\n  };\n\n  /**\n   * ### .deepOwnPropertyVal(object, property, value, [message])\n   *\n   * Asserts that `object` has a direct property named by `property` and a value\n   * equal to the provided `value`. Uses a deep equality check. Inherited\n   * properties aren't checked.\n   *\n   *     assert.deepOwnPropertyVal({ tea: { green: 'matcha' } }, 'tea', { green: 'matcha' });\n   *\n   * @name deepOwnPropertyVal\n   * @param {Object} object\n   * @param {String} property\n   * @param {Mixed} value\n   * @param {String} message\n   * @api public\n   */\n\n  assert.deepOwnPropertyVal = function (obj, prop, value, msg) {\n    new Assertion(obj, msg, assert.deepOwnPropertyVal, true)\n      .to.have.deep.own.property(prop, value);\n  };\n\n  /**\n   * ### .notDeepOwnPropertyVal(object, property, value, [message])\n   *\n   * Asserts that `object` does _not_ have a direct property named by `property`\n   * with a value equal to the provided `value`. Uses a deep equality check.\n   * Inherited properties aren't checked.\n   *\n   *     assert.notDeepOwnPropertyVal({ tea: { green: 'matcha' } }, 'tea', { black: 'matcha' });\n   *     assert.notDeepOwnPropertyVal({ tea: { green: 'matcha' } }, 'tea', { green: 'oolong' });\n   *     assert.notDeepOwnPropertyVal({ tea: { green: 'matcha' } }, 'coffee', { green: 'matcha' });\n   *     assert.notDeepOwnPropertyVal({}, 'toString', Object.prototype.toString);\n   *\n   * @name notDeepOwnPropertyVal\n   * @param {Object} object\n   * @param {String} property\n   * @param {Mixed} value\n   * @param {String} message\n   * @api public\n   */\n\n  assert.notDeepOwnPropertyVal = function (obj, prop, value, msg) {\n    new Assertion(obj, msg, assert.notDeepOwnPropertyVal, true)\n      .to.not.have.deep.own.property(prop, value);\n  };\n\n  /**\n   * ### .nestedProperty(object, property, [message])\n   *\n   * Asserts that `object` has a direct or inherited property named by\n   * `property`, which can be a string using dot- and bracket-notation for\n   * nested reference.\n   *\n   *     assert.nestedProperty({ tea: { green: 'matcha' }}, 'tea.green');\n   *\n   * @name nestedProperty\n   * @param {Object} object\n   * @param {String} property\n   * @param {String} message\n   * @namespace Assert\n   * @api public\n   */\n\n  assert.nestedProperty = function (obj, prop, msg) {\n    new Assertion(obj, msg, assert.nestedProperty, true)\n      .to.have.nested.property(prop);\n  };\n\n  /**\n   * ### .notNestedProperty(object, property, [message])\n   *\n   * Asserts that `object` does _not_ have a property named by `property`, which\n   * can be a string using dot- and bracket-notation for nested reference. The\n   * property cannot exist on the object nor anywhere in its prototype chain.\n   *\n   *     assert.notNestedProperty({ tea: { green: 'matcha' }}, 'tea.oolong');\n   *\n   * @name notNestedProperty\n   * @param {Object} object\n   * @param {String} property\n   * @param {String} message\n   * @namespace Assert\n   * @api public\n   */\n\n  assert.notNestedProperty = function (obj, prop, msg) {\n    new Assertion(obj, msg, assert.notNestedProperty, true)\n      .to.not.have.nested.property(prop);\n  };\n\n  /**\n   * ### .nestedPropertyVal(object, property, value, [message])\n   *\n   * Asserts that `object` has a property named by `property` with value given\n   * by `value`. `property` can use dot- and bracket-notation for nested\n   * reference. Uses a strict equality check (===).\n   *\n   *     assert.nestedPropertyVal({ tea: { green: 'matcha' }}, 'tea.green', 'matcha');\n   *\n   * @name nestedPropertyVal\n   * @param {Object} object\n   * @param {String} property\n   * @param {Mixed} value\n   * @param {String} message\n   * @namespace Assert\n   * @api public\n   */\n\n  assert.nestedPropertyVal = function (obj, prop, val, msg) {\n    new Assertion(obj, msg, assert.nestedPropertyVal, true)\n      .to.have.nested.property(prop, val);\n  };\n\n  /**\n   * ### .notNestedPropertyVal(object, property, value, [message])\n   *\n   * Asserts that `object` does _not_ have a property named by `property` with\n   * value given by `value`. `property` can use dot- and bracket-notation for\n   * nested reference. Uses a strict equality check (===).\n   *\n   *     assert.notNestedPropertyVal({ tea: { green: 'matcha' }}, 'tea.green', 'konacha');\n   *     assert.notNestedPropertyVal({ tea: { green: 'matcha' }}, 'coffee.green', 'matcha');\n   *\n   * @name notNestedPropertyVal\n   * @param {Object} object\n   * @param {String} property\n   * @param {Mixed} value\n   * @param {String} message\n   * @namespace Assert\n   * @api public\n   */\n\n  assert.notNestedPropertyVal = function (obj, prop, val, msg) {\n    new Assertion(obj, msg, assert.notNestedPropertyVal, true)\n      .to.not.have.nested.property(prop, val);\n  };\n\n  /**\n   * ### .deepNestedPropertyVal(object, property, value, [message])\n   *\n   * Asserts that `object` has a property named by `property` with a value given\n   * by `value`. `property` can use dot- and bracket-notation for nested\n   * reference. Uses a deep equality check.\n   *\n   *     assert.deepNestedPropertyVal({ tea: { green: { matcha: 'yum' } } }, 'tea.green', { matcha: 'yum' });\n   *\n   * @name deepNestedPropertyVal\n   * @param {Object} object\n   * @param {String} property\n   * @param {Mixed} value\n   * @param {String} message\n   * @namespace Assert\n   * @api public\n   */\n\n  assert.deepNestedPropertyVal = function (obj, prop, val, msg) {\n    new Assertion(obj, msg, assert.deepNestedPropertyVal, true)\n      .to.have.deep.nested.property(prop, val);\n  };\n\n  /**\n   * ### .notDeepNestedPropertyVal(object, property, value, [message])\n   *\n   * Asserts that `object` does _not_ have a property named by `property` with\n   * value given by `value`. `property` can use dot- and bracket-notation for\n   * nested reference. Uses a deep equality check.\n   *\n   *     assert.notDeepNestedPropertyVal({ tea: { green: { matcha: 'yum' } } }, 'tea.green', { oolong: 'yum' });\n   *     assert.notDeepNestedPropertyVal({ tea: { green: { matcha: 'yum' } } }, 'tea.green', { matcha: 'yuck' });\n   *     assert.notDeepNestedPropertyVal({ tea: { green: { matcha: 'yum' } } }, 'tea.black', { matcha: 'yum' });\n   *\n   * @name notDeepNestedPropertyVal\n   * @param {Object} object\n   * @param {String} property\n   * @param {Mixed} value\n   * @param {String} message\n   * @namespace Assert\n   * @api public\n   */\n\n  assert.notDeepNestedPropertyVal = function (obj, prop, val, msg) {\n    new Assertion(obj, msg, assert.notDeepNestedPropertyVal, true)\n      .to.not.have.deep.nested.property(prop, val);\n  }\n\n  /**\n   * ### .lengthOf(object, length, [message])\n   *\n   * Asserts that `object` has a `length` or `size` with the expected value.\n   *\n   *     assert.lengthOf([1,2,3], 3, 'array has length of 3');\n   *     assert.lengthOf('foobar', 6, 'string has length of 6');\n   *     assert.lengthOf(new Set([1,2,3]), 3, 'set has size of 3');\n   *     assert.lengthOf(new Map([['a',1],['b',2],['c',3]]), 3, 'map has size of 3');\n   *\n   * @name lengthOf\n   * @param {Mixed} object\n   * @param {Number} length\n   * @param {String} message\n   * @namespace Assert\n   * @api public\n   */\n\n  assert.lengthOf = function (exp, len, msg) {\n    new Assertion(exp, msg, assert.lengthOf, true).to.have.lengthOf(len);\n  };\n\n  /**\n   * ### .hasAnyKeys(object, [keys], [message])\n   *\n   * Asserts that `object` has at least one of the `keys` provided.\n   * You can also provide a single object instead of a `keys` array and its keys\n   * will be used as the expected set of keys.\n   *\n   *     assert.hasAnyKeys({foo: 1, bar: 2, baz: 3}, ['foo', 'iDontExist', 'baz']);\n   *     assert.hasAnyKeys({foo: 1, bar: 2, baz: 3}, {foo: 30, iDontExist: 99, baz: 1337});\n   *     assert.hasAnyKeys(new Map([[{foo: 1}, 'bar'], ['key', 'value']]), [{foo: 1}, 'key']);\n   *     assert.hasAnyKeys(new Set([{foo: 'bar'}, 'anotherKey']), [{foo: 'bar'}, 'anotherKey']);\n   *\n   * @name hasAnyKeys\n   * @param {Mixed} object\n   * @param {Array|Object} keys\n   * @param {String} message\n   * @namespace Assert\n   * @api public\n   */\n\n  assert.hasAnyKeys = function (obj, keys, msg) {\n    new Assertion(obj, msg, assert.hasAnyKeys, true).to.have.any.keys(keys);\n  }\n\n  /**\n   * ### .hasAllKeys(object, [keys], [message])\n   *\n   * Asserts that `object` has all and only all of the `keys` provided.\n   * You can also provide a single object instead of a `keys` array and its keys\n   * will be used as the expected set of keys.\n   *\n   *     assert.hasAllKeys({foo: 1, bar: 2, baz: 3}, ['foo', 'bar', 'baz']);\n   *     assert.hasAllKeys({foo: 1, bar: 2, baz: 3}, {foo: 30, bar: 99, baz: 1337]);\n   *     assert.hasAllKeys(new Map([[{foo: 1}, 'bar'], ['key', 'value']]), [{foo: 1}, 'key']);\n   *     assert.hasAllKeys(new Set([{foo: 'bar'}, 'anotherKey'], [{foo: 'bar'}, 'anotherKey']);\n   *\n   * @name hasAllKeys\n   * @param {Mixed} object\n   * @param {String[]} keys\n   * @param {String} message\n   * @namespace Assert\n   * @api public\n   */\n\n  assert.hasAllKeys = function (obj, keys, msg) {\n    new Assertion(obj, msg, assert.hasAllKeys, true).to.have.all.keys(keys);\n  }\n\n  /**\n   * ### .containsAllKeys(object, [keys], [message])\n   *\n   * Asserts that `object` has all of the `keys` provided but may have more keys not listed.\n   * You can also provide a single object instead of a `keys` array and its keys\n   * will be used as the expected set of keys.\n   *\n   *     assert.containsAllKeys({foo: 1, bar: 2, baz: 3}, ['foo', 'baz']);\n   *     assert.containsAllKeys({foo: 1, bar: 2, baz: 3}, ['foo', 'bar', 'baz']);\n   *     assert.containsAllKeys({foo: 1, bar: 2, baz: 3}, {foo: 30, baz: 1337});\n   *     assert.containsAllKeys({foo: 1, bar: 2, baz: 3}, {foo: 30, bar: 99, baz: 1337});\n   *     assert.containsAllKeys(new Map([[{foo: 1}, 'bar'], ['key', 'value']]), [{foo: 1}]);\n   *     assert.containsAllKeys(new Map([[{foo: 1}, 'bar'], ['key', 'value']]), [{foo: 1}, 'key']);\n   *     assert.containsAllKeys(new Set([{foo: 'bar'}, 'anotherKey'], [{foo: 'bar'}]);\n   *     assert.containsAllKeys(new Set([{foo: 'bar'}, 'anotherKey'], [{foo: 'bar'}, 'anotherKey']);\n   *\n   * @name containsAllKeys\n   * @param {Mixed} object\n   * @param {String[]} keys\n   * @param {String} message\n   * @namespace Assert\n   * @api public\n   */\n\n  assert.containsAllKeys = function (obj, keys, msg) {\n    new Assertion(obj, msg, assert.containsAllKeys, true)\n      .to.contain.all.keys(keys);\n  }\n\n  /**\n   * ### .doesNotHaveAnyKeys(object, [keys], [message])\n   *\n   * Asserts that `object` has none of the `keys` provided.\n   * You can also provide a single object instead of a `keys` array and its keys\n   * will be used as the expected set of keys.\n   *\n   *     assert.doesNotHaveAnyKeys({foo: 1, bar: 2, baz: 3}, ['one', 'two', 'example']);\n   *     assert.doesNotHaveAnyKeys({foo: 1, bar: 2, baz: 3}, {one: 1, two: 2, example: 'foo'});\n   *     assert.doesNotHaveAnyKeys(new Map([[{foo: 1}, 'bar'], ['key', 'value']]), [{one: 'two'}, 'example']);\n   *     assert.doesNotHaveAnyKeys(new Set([{foo: 'bar'}, 'anotherKey'], [{one: 'two'}, 'example']);\n   *\n   * @name doesNotHaveAnyKeys\n   * @param {Mixed} object\n   * @param {String[]} keys\n   * @param {String} message\n   * @namespace Assert\n   * @api public\n   */\n\n  assert.doesNotHaveAnyKeys = function (obj, keys, msg) {\n    new Assertion(obj, msg, assert.doesNotHaveAnyKeys, true)\n      .to.not.have.any.keys(keys);\n  }\n\n  /**\n   * ### .doesNotHaveAllKeys(object, [keys], [message])\n   *\n   * Asserts that `object` does not have at least one of the `keys` provided.\n   * You can also provide a single object instead of a `keys` array and its keys\n   * will be used as the expected set of keys.\n   *\n   *     assert.doesNotHaveAllKeys({foo: 1, bar: 2, baz: 3}, ['one', 'two', 'example']);\n   *     assert.doesNotHaveAllKeys({foo: 1, bar: 2, baz: 3}, {one: 1, two: 2, example: 'foo'});\n   *     assert.doesNotHaveAllKeys(new Map([[{foo: 1}, 'bar'], ['key', 'value']]), [{one: 'two'}, 'example']);\n   *     assert.doesNotHaveAllKeys(new Set([{foo: 'bar'}, 'anotherKey'], [{one: 'two'}, 'example']);\n   *\n   * @name doesNotHaveAllKeys\n   * @param {Mixed} object\n   * @param {String[]} keys\n   * @param {String} message\n   * @namespace Assert\n   * @api public\n   */\n\n  assert.doesNotHaveAllKeys = function (obj, keys, msg) {\n    new Assertion(obj, msg, assert.doesNotHaveAllKeys, true)\n      .to.not.have.all.keys(keys);\n  }\n\n  /**\n   * ### .hasAnyDeepKeys(object, [keys], [message])\n   *\n   * Asserts that `object` has at least one of the `keys` provided.\n   * Since Sets and Maps can have objects as keys you can use this assertion to perform\n   * a deep comparison.\n   * You can also provide a single object instead of a `keys` array and its keys\n   * will be used as the expected set of keys.\n   *\n   *     assert.hasAnyDeepKeys(new Map([[{one: 'one'}, 'valueOne'], [1, 2]]), {one: 'one'});\n   *     assert.hasAnyDeepKeys(new Map([[{one: 'one'}, 'valueOne'], [1, 2]]), [{one: 'one'}, {two: 'two'}]);\n   *     assert.hasAnyDeepKeys(new Map([[{one: 'one'}, 'valueOne'], [{two: 'two'}, 'valueTwo']]), [{one: 'one'}, {two: 'two'}]);\n   *     assert.hasAnyDeepKeys(new Set([{one: 'one'}, {two: 'two'}]), {one: 'one'});\n   *     assert.hasAnyDeepKeys(new Set([{one: 'one'}, {two: 'two'}]), [{one: 'one'}, {three: 'three'}]);\n   *     assert.hasAnyDeepKeys(new Set([{one: 'one'}, {two: 'two'}]), [{one: 'one'}, {two: 'two'}]);\n   *\n   * @name hasAnyDeepKeys\n   * @param {Mixed} object\n   * @param {Array|Object} keys\n   * @param {String} message\n   * @namespace Assert\n   * @api public\n   */\n\n  assert.hasAnyDeepKeys = function (obj, keys, msg) {\n    new Assertion(obj, msg, assert.hasAnyDeepKeys, true)\n      .to.have.any.deep.keys(keys);\n  }\n\n /**\n   * ### .hasAllDeepKeys(object, [keys], [message])\n   *\n   * Asserts that `object` has all and only all of the `keys` provided.\n   * Since Sets and Maps can have objects as keys you can use this assertion to perform\n   * a deep comparison.\n   * You can also provide a single object instead of a `keys` array and its keys\n   * will be used as the expected set of keys.\n   *\n   *     assert.hasAllDeepKeys(new Map([[{one: 'one'}, 'valueOne']]), {one: 'one'});\n   *     assert.hasAllDeepKeys(new Map([[{one: 'one'}, 'valueOne'], [{two: 'two'}, 'valueTwo']]), [{one: 'one'}, {two: 'two'}]);\n   *     assert.hasAllDeepKeys(new Set([{one: 'one'}]), {one: 'one'});\n   *     assert.hasAllDeepKeys(new Set([{one: 'one'}, {two: 'two'}]), [{one: 'one'}, {two: 'two'}]);\n   *\n   * @name hasAllDeepKeys\n   * @param {Mixed} object\n   * @param {Array|Object} keys\n   * @param {String} message\n   * @namespace Assert\n   * @api public\n   */\n\n  assert.hasAllDeepKeys = function (obj, keys, msg) {\n    new Assertion(obj, msg, assert.hasAllDeepKeys, true)\n      .to.have.all.deep.keys(keys);\n  }\n\n /**\n   * ### .containsAllDeepKeys(object, [keys], [message])\n   *\n   * Asserts that `object` contains all of the `keys` provided.\n   * Since Sets and Maps can have objects as keys you can use this assertion to perform\n   * a deep comparison.\n   * You can also provide a single object instead of a `keys` array and its keys\n   * will be used as the expected set of keys.\n   *\n   *     assert.containsAllDeepKeys(new Map([[{one: 'one'}, 'valueOne'], [1, 2]]), {one: 'one'});\n   *     assert.containsAllDeepKeys(new Map([[{one: 'one'}, 'valueOne'], [{two: 'two'}, 'valueTwo']]), [{one: 'one'}, {two: 'two'}]);\n   *     assert.containsAllDeepKeys(new Set([{one: 'one'}, {two: 'two'}]), {one: 'one'});\n   *     assert.containsAllDeepKeys(new Set([{one: 'one'}, {two: 'two'}]), [{one: 'one'}, {two: 'two'}]);\n   *\n   * @name containsAllDeepKeys\n   * @param {Mixed} object\n   * @param {Array|Object} keys\n   * @param {String} message\n   * @namespace Assert\n   * @api public\n   */\n\n  assert.containsAllDeepKeys = function (obj, keys, msg) {\n    new Assertion(obj, msg, assert.containsAllDeepKeys, true)\n      .to.contain.all.deep.keys(keys);\n  }\n\n /**\n   * ### .doesNotHaveAnyDeepKeys(object, [keys], [message])\n   *\n   * Asserts that `object` has none of the `keys` provided.\n   * Since Sets and Maps can have objects as keys you can use this assertion to perform\n   * a deep comparison.\n   * You can also provide a single object instead of a `keys` array and its keys\n   * will be used as the expected set of keys.\n   *\n   *     assert.doesNotHaveAnyDeepKeys(new Map([[{one: 'one'}, 'valueOne'], [1, 2]]), {thisDoesNot: 'exist'});\n   *     assert.doesNotHaveAnyDeepKeys(new Map([[{one: 'one'}, 'valueOne'], [{two: 'two'}, 'valueTwo']]), [{twenty: 'twenty'}, {fifty: 'fifty'}]);\n   *     assert.doesNotHaveAnyDeepKeys(new Set([{one: 'one'}, {two: 'two'}]), {twenty: 'twenty'});\n   *     assert.doesNotHaveAnyDeepKeys(new Set([{one: 'one'}, {two: 'two'}]), [{twenty: 'twenty'}, {fifty: 'fifty'}]);\n   *\n   * @name doesNotHaveAnyDeepKeys\n   * @param {Mixed} object\n   * @param {Array|Object} keys\n   * @param {String} message\n   * @namespace Assert\n   * @api public\n   */\n\n  assert.doesNotHaveAnyDeepKeys = function (obj, keys, msg) {\n    new Assertion(obj, msg, assert.doesNotHaveAnyDeepKeys, true)\n      .to.not.have.any.deep.keys(keys);\n  }\n\n /**\n   * ### .doesNotHaveAllDeepKeys(object, [keys], [message])\n   *\n   * Asserts that `object` does not have at least one of the `keys` provided.\n   * Since Sets and Maps can have objects as keys you can use this assertion to perform\n   * a deep comparison.\n   * You can also provide a single object instead of a `keys` array and its keys\n   * will be used as the expected set of keys.\n   *\n   *     assert.doesNotHaveAllDeepKeys(new Map([[{one: 'one'}, 'valueOne'], [1, 2]]), {thisDoesNot: 'exist'});\n   *     assert.doesNotHaveAllDeepKeys(new Map([[{one: 'one'}, 'valueOne'], [{two: 'two'}, 'valueTwo']]), [{twenty: 'twenty'}, {one: 'one'}]);\n   *     assert.doesNotHaveAllDeepKeys(new Set([{one: 'one'}, {two: 'two'}]), {twenty: 'twenty'});\n   *     assert.doesNotHaveAllDeepKeys(new Set([{one: 'one'}, {two: 'two'}]), [{one: 'one'}, {fifty: 'fifty'}]);\n   *\n   * @name doesNotHaveAllDeepKeys\n   * @param {Mixed} object\n   * @param {Array|Object} keys\n   * @param {String} message\n   * @namespace Assert\n   * @api public\n   */\n\n  assert.doesNotHaveAllDeepKeys = function (obj, keys, msg) {\n    new Assertion(obj, msg, assert.doesNotHaveAllDeepKeys, true)\n      .to.not.have.all.deep.keys(keys);\n  }\n\n /**\n   * ### .throws(fn, [errorLike/string/regexp], [string/regexp], [message])\n   *\n   * If `errorLike` is an `Error` constructor, asserts that `fn` will throw an error that is an\n   * instance of `errorLike`.\n   * If `errorLike` is an `Error` instance, asserts that the error thrown is the same\n   * instance as `errorLike`.\n   * If `errMsgMatcher` is provided, it also asserts that the error thrown will have a\n   * message matching `errMsgMatcher`.\n   *\n   *     assert.throws(fn, 'Error thrown must have this msg');\n   *     assert.throws(fn, /Error thrown must have a msg that matches this/);\n   *     assert.throws(fn, ReferenceError);\n   *     assert.throws(fn, errorInstance);\n   *     assert.throws(fn, ReferenceError, 'Error thrown must be a ReferenceError and have this msg');\n   *     assert.throws(fn, errorInstance, 'Error thrown must be the same errorInstance and have this msg');\n   *     assert.throws(fn, ReferenceError, /Error thrown must be a ReferenceError and match this/);\n   *     assert.throws(fn, errorInstance, /Error thrown must be the same errorInstance and match this/);\n   *\n   * @name throws\n   * @alias throw\n   * @alias Throw\n   * @param {Function} fn\n   * @param {ErrorConstructor|Error} errorLike\n   * @param {RegExp|String} errMsgMatcher\n   * @param {String} message\n   * @see https://developer.mozilla.org/en/JavaScript/Reference/Global_Objects/Error#Error_types\n   * @namespace Assert\n   * @api public\n   */\n\n  assert.throws = function (fn, errorLike, errMsgMatcher, msg) {\n    if ('string' === typeof errorLike || errorLike instanceof RegExp) {\n      errMsgMatcher = errorLike;\n      errorLike = null;\n    }\n\n    var assertErr = new Assertion(fn, msg, assert.throws, true)\n      .to.throw(errorLike, errMsgMatcher);\n    return flag(assertErr, 'object');\n  };\n\n  /**\n   * ### .doesNotThrow(fn, [errorLike/string/regexp], [string/regexp], [message])\n   *\n   * If `errorLike` is an `Error` constructor, asserts that `fn` will _not_ throw an error that is an\n   * instance of `errorLike`.\n   * If `errorLike` is an `Error` instance, asserts that the error thrown is _not_ the same\n   * instance as `errorLike`.\n   * If `errMsgMatcher` is provided, it also asserts that the error thrown will _not_ have a\n   * message matching `errMsgMatcher`.\n   *\n   *     assert.doesNotThrow(fn, 'Any Error thrown must not have this message');\n   *     assert.doesNotThrow(fn, /Any Error thrown must not match this/);\n   *     assert.doesNotThrow(fn, Error);\n   *     assert.doesNotThrow(fn, errorInstance);\n   *     assert.doesNotThrow(fn, Error, 'Error must not have this message');\n   *     assert.doesNotThrow(fn, errorInstance, 'Error must not have this message');\n   *     assert.doesNotThrow(fn, Error, /Error must not match this/);\n   *     assert.doesNotThrow(fn, errorInstance, /Error must not match this/);\n   *\n   * @name doesNotThrow\n   * @param {Function} fn\n   * @param {ErrorConstructor} errorLike\n   * @param {RegExp|String} errMsgMatcher\n   * @param {String} message\n   * @see https://developer.mozilla.org/en/JavaScript/Reference/Global_Objects/Error#Error_types\n   * @namespace Assert\n   * @api public\n   */\n\n  assert.doesNotThrow = function (fn, errorLike, errMsgMatcher, msg) {\n    if ('string' === typeof errorLike || errorLike instanceof RegExp) {\n      errMsgMatcher = errorLike;\n      errorLike = null;\n    }\n\n    new Assertion(fn, msg, assert.doesNotThrow, true)\n      .to.not.throw(errorLike, errMsgMatcher);\n  };\n\n  /**\n   * ### .operator(val1, operator, val2, [message])\n   *\n   * Compares two values using `operator`.\n   *\n   *     assert.operator(1, '<', 2, 'everything is ok');\n   *     assert.operator(1, '>', 2, 'this will fail');\n   *\n   * @name operator\n   * @param {Mixed} val1\n   * @param {String} operator\n   * @param {Mixed} val2\n   * @param {String} message\n   * @namespace Assert\n   * @api public\n   */\n\n  assert.operator = function (val, operator, val2, msg) {\n    var ok;\n    switch(operator) {\n      case '==':\n        ok = val == val2;\n        break;\n      case '===':\n        ok = val === val2;\n        break;\n      case '>':\n        ok = val > val2;\n        break;\n      case '>=':\n        ok = val >= val2;\n        break;\n      case '<':\n        ok = val < val2;\n        break;\n      case '<=':\n        ok = val <= val2;\n        break;\n      case '!=':\n        ok = val != val2;\n        break;\n      case '!==':\n        ok = val !== val2;\n        break;\n      default:\n        msg = msg ? msg + ': ' : msg;\n        throw new chai.AssertionError(\n          msg + 'Invalid operator \"' + operator + '\"',\n          undefined,\n          assert.operator\n        );\n    }\n    var test = new Assertion(ok, msg, assert.operator, true);\n    test.assert(\n        true === flag(test, 'object')\n      , 'expected ' + util.inspect(val) + ' to be ' + operator + ' ' + util.inspect(val2)\n      , 'expected ' + util.inspect(val) + ' to not be ' + operator + ' ' + util.inspect(val2) );\n  };\n\n  /**\n   * ### .closeTo(actual, expected, delta, [message])\n   *\n   * Asserts that the target is equal `expected`, to within a +/- `delta` range.\n   *\n   *     assert.closeTo(1.5, 1, 0.5, 'numbers are close');\n   *\n   * @name closeTo\n   * @param {Number} actual\n   * @param {Number} expected\n   * @param {Number} delta\n   * @param {String} message\n   * @namespace Assert\n   * @api public\n   */\n\n  assert.closeTo = function (act, exp, delta, msg) {\n    new Assertion(act, msg, assert.closeTo, true).to.be.closeTo(exp, delta);\n  };\n\n  /**\n   * ### .approximately(actual, expected, delta, [message])\n   *\n   * Asserts that the target is equal `expected`, to within a +/- `delta` range.\n   *\n   *     assert.approximately(1.5, 1, 0.5, 'numbers are close');\n   *\n   * @name approximately\n   * @param {Number} actual\n   * @param {Number} expected\n   * @param {Number} delta\n   * @param {String} message\n   * @namespace Assert\n   * @api public\n   */\n\n  assert.approximately = function (act, exp, delta, msg) {\n    new Assertion(act, msg, assert.approximately, true)\n      .to.be.approximately(exp, delta);\n  };\n\n  /**\n   * ### .sameMembers(set1, set2, [message])\n   *\n   * Asserts that `set1` and `set2` have the same members in any order. Uses a\n   * strict equality check (===).\n   *\n   *     assert.sameMembers([ 1, 2, 3 ], [ 2, 1, 3 ], 'same members');\n   *\n   * @name sameMembers\n   * @param {Array} set1\n   * @param {Array} set2\n   * @param {String} message\n   * @namespace Assert\n   * @api public\n   */\n\n  assert.sameMembers = function (set1, set2, msg) {\n    new Assertion(set1, msg, assert.sameMembers, true)\n      .to.have.same.members(set2);\n  }\n\n  /**\n   * ### .notSameMembers(set1, set2, [message])\n   *\n   * Asserts that `set1` and `set2` don't have the same members in any order.\n   * Uses a strict equality check (===).\n   *\n   *     assert.notSameMembers([ 1, 2, 3 ], [ 5, 1, 3 ], 'not same members');\n   *\n   * @name notSameMembers\n   * @param {Array} set1\n   * @param {Array} set2\n   * @param {String} message\n   * @namespace Assert\n   * @api public\n   */\n\n  assert.notSameMembers = function (set1, set2, msg) {\n    new Assertion(set1, msg, assert.notSameMembers, true)\n      .to.not.have.same.members(set2);\n  }\n\n  /**\n   * ### .sameDeepMembers(set1, set2, [message])\n   *\n   * Asserts that `set1` and `set2` have the same members in any order. Uses a\n   * deep equality check.\n   *\n   *     assert.sameDeepMembers([ { a: 1 }, { b: 2 }, { c: 3 } ], [{ b: 2 }, { a: 1 }, { c: 3 }], 'same deep members');\n   *\n   * @name sameDeepMembers\n   * @param {Array} set1\n   * @param {Array} set2\n   * @param {String} message\n   * @namespace Assert\n   * @api public\n   */\n\n  assert.sameDeepMembers = function (set1, set2, msg) {\n    new Assertion(set1, msg, assert.sameDeepMembers, true)\n      .to.have.same.deep.members(set2);\n  }\n\n  /**\n   * ### .notSameDeepMembers(set1, set2, [message])\n   *\n   * Asserts that `set1` and `set2` don't have the same members in any order.\n   * Uses a deep equality check.\n   *\n   *     assert.notSameDeepMembers([ { a: 1 }, { b: 2 }, { c: 3 } ], [{ b: 2 }, { a: 1 }, { f: 5 }], 'not same deep members');\n   *\n   * @name notSameDeepMembers\n   * @param {Array} set1\n   * @param {Array} set2\n   * @param {String} message\n   * @namespace Assert\n   * @api public\n   */\n\n  assert.notSameDeepMembers = function (set1, set2, msg) {\n    new Assertion(set1, msg, assert.notSameDeepMembers, true)\n      .to.not.have.same.deep.members(set2);\n  }\n\n  /**\n   * ### .sameOrderedMembers(set1, set2, [message])\n   *\n   * Asserts that `set1` and `set2` have the same members in the same order.\n   * Uses a strict equality check (===).\n   *\n   *     assert.sameOrderedMembers([ 1, 2, 3 ], [ 1, 2, 3 ], 'same ordered members');\n   *\n   * @name sameOrderedMembers\n   * @param {Array} set1\n   * @param {Array} set2\n   * @param {String} message\n   * @namespace Assert\n   * @api public\n   */\n\n  assert.sameOrderedMembers = function (set1, set2, msg) {\n    new Assertion(set1, msg, assert.sameOrderedMembers, true)\n      .to.have.same.ordered.members(set2);\n  }\n\n  /**\n   * ### .notSameOrderedMembers(set1, set2, [message])\n   *\n   * Asserts that `set1` and `set2` don't have the same members in the same\n   * order. Uses a strict equality check (===).\n   *\n   *     assert.notSameOrderedMembers([ 1, 2, 3 ], [ 2, 1, 3 ], 'not same ordered members');\n   *\n   * @name notSameOrderedMembers\n   * @param {Array} set1\n   * @param {Array} set2\n   * @param {String} message\n   * @namespace Assert\n   * @api public\n   */\n\n  assert.notSameOrderedMembers = function (set1, set2, msg) {\n    new Assertion(set1, msg, assert.notSameOrderedMembers, true)\n      .to.not.have.same.ordered.members(set2);\n  }\n\n  /**\n   * ### .sameDeepOrderedMembers(set1, set2, [message])\n   *\n   * Asserts that `set1` and `set2` have the same members in the same order.\n   * Uses a deep equality check.\n   *\n   *     assert.sameDeepOrderedMembers([ { a: 1 }, { b: 2 }, { c: 3 } ], [ { a: 1 }, { b: 2 }, { c: 3 } ], 'same deep ordered members');\n   *\n   * @name sameDeepOrderedMembers\n   * @param {Array} set1\n   * @param {Array} set2\n   * @param {String} message\n   * @namespace Assert\n   * @api public\n   */\n\n  assert.sameDeepOrderedMembers = function (set1, set2, msg) {\n    new Assertion(set1, msg, assert.sameDeepOrderedMembers, true)\n      .to.have.same.deep.ordered.members(set2);\n  }\n\n  /**\n   * ### .notSameDeepOrderedMembers(set1, set2, [message])\n   *\n   * Asserts that `set1` and `set2` don't have the same members in the same\n   * order. Uses a deep equality check.\n   *\n   *     assert.notSameDeepOrderedMembers([ { a: 1 }, { b: 2 }, { c: 3 } ], [ { a: 1 }, { b: 2 }, { z: 5 } ], 'not same deep ordered members');\n   *     assert.notSameDeepOrderedMembers([ { a: 1 }, { b: 2 }, { c: 3 } ], [ { b: 2 }, { a: 1 }, { c: 3 } ], 'not same deep ordered members');\n   *\n   * @name notSameDeepOrderedMembers\n   * @param {Array} set1\n   * @param {Array} set2\n   * @param {String} message\n   * @namespace Assert\n   * @api public\n   */\n\n  assert.notSameDeepOrderedMembers = function (set1, set2, msg) {\n    new Assertion(set1, msg, assert.notSameDeepOrderedMembers, true)\n      .to.not.have.same.deep.ordered.members(set2);\n  }\n\n  /**\n   * ### .includeMembers(superset, subset, [message])\n   *\n   * Asserts that `subset` is included in `superset` in any order. Uses a\n   * strict equality check (===). Duplicates are ignored.\n   *\n   *     assert.includeMembers([ 1, 2, 3 ], [ 2, 1, 2 ], 'include members');\n   *\n   * @name includeMembers\n   * @param {Array} superset\n   * @param {Array} subset\n   * @param {String} message\n   * @namespace Assert\n   * @api public\n   */\n\n  assert.includeMembers = function (superset, subset, msg) {\n    new Assertion(superset, msg, assert.includeMembers, true)\n      .to.include.members(subset);\n  }\n\n  /**\n   * ### .notIncludeMembers(superset, subset, [message])\n   *\n   * Asserts that `subset` isn't included in `superset` in any order. Uses a\n   * strict equality check (===). Duplicates are ignored.\n   *\n   *     assert.notIncludeMembers([ 1, 2, 3 ], [ 5, 1 ], 'not include members');\n   *\n   * @name notIncludeMembers\n   * @param {Array} superset\n   * @param {Array} subset\n   * @param {String} message\n   * @namespace Assert\n   * @api public\n   */\n\n  assert.notIncludeMembers = function (superset, subset, msg) {\n    new Assertion(superset, msg, assert.notIncludeMembers, true)\n      .to.not.include.members(subset);\n  }\n\n  /**\n   * ### .includeDeepMembers(superset, subset, [message])\n   *\n   * Asserts that `subset` is included in `superset` in any order. Uses a deep\n   * equality check. Duplicates are ignored.\n   *\n   *     assert.includeDeepMembers([ { a: 1 }, { b: 2 }, { c: 3 } ], [ { b: 2 }, { a: 1 }, { b: 2 } ], 'include deep members');\n   *\n   * @name includeDeepMembers\n   * @param {Array} superset\n   * @param {Array} subset\n   * @param {String} message\n   * @namespace Assert\n   * @api public\n   */\n\n  assert.includeDeepMembers = function (superset, subset, msg) {\n    new Assertion(superset, msg, assert.includeDeepMembers, true)\n      .to.include.deep.members(subset);\n  }\n\n  /**\n   * ### .notIncludeDeepMembers(superset, subset, [message])\n   *\n   * Asserts that `subset` isn't included in `superset` in any order. Uses a\n   * deep equality check. Duplicates are ignored.\n   *\n   *     assert.notIncludeDeepMembers([ { a: 1 }, { b: 2 }, { c: 3 } ], [ { b: 2 }, { f: 5 } ], 'not include deep members');\n   *\n   * @name notIncludeDeepMembers\n   * @param {Array} superset\n   * @param {Array} subset\n   * @param {String} message\n   * @namespace Assert\n   * @api public\n   */\n\n  assert.notIncludeDeepMembers = function (superset, subset, msg) {\n    new Assertion(superset, msg, assert.notIncludeDeepMembers, true)\n      .to.not.include.deep.members(subset);\n  }\n\n  /**\n   * ### .includeOrderedMembers(superset, subset, [message])\n   *\n   * Asserts that `subset` is included in `superset` in the same order\n   * beginning with the first element in `superset`. Uses a strict equality\n   * check (===).\n   *\n   *     assert.includeOrderedMembers([ 1, 2, 3 ], [ 1, 2 ], 'include ordered members');\n   *\n   * @name includeOrderedMembers\n   * @param {Array} superset\n   * @param {Array} subset\n   * @param {String} message\n   * @namespace Assert\n   * @api public\n   */\n\n  assert.includeOrderedMembers = function (superset, subset, msg) {\n    new Assertion(superset, msg, assert.includeOrderedMembers, true)\n      .to.include.ordered.members(subset);\n  }\n\n  /**\n   * ### .notIncludeOrderedMembers(superset, subset, [message])\n   *\n   * Asserts that `subset` isn't included in `superset` in the same order\n   * beginning with the first element in `superset`. Uses a strict equality\n   * check (===).\n   *\n   *     assert.notIncludeOrderedMembers([ 1, 2, 3 ], [ 2, 1 ], 'not include ordered members');\n   *     assert.notIncludeOrderedMembers([ 1, 2, 3 ], [ 2, 3 ], 'not include ordered members');\n   *\n   * @name notIncludeOrderedMembers\n   * @param {Array} superset\n   * @param {Array} subset\n   * @param {String} message\n   * @namespace Assert\n   * @api public\n   */\n\n  assert.notIncludeOrderedMembers = function (superset, subset, msg) {\n    new Assertion(superset, msg, assert.notIncludeOrderedMembers, true)\n      .to.not.include.ordered.members(subset);\n  }\n\n  /**\n   * ### .includeDeepOrderedMembers(superset, subset, [message])\n   *\n   * Asserts that `subset` is included in `superset` in the same order\n   * beginning with the first element in `superset`. Uses a deep equality\n   * check.\n   *\n   *     assert.includeDeepOrderedMembers([ { a: 1 }, { b: 2 }, { c: 3 } ], [ { a: 1 }, { b: 2 } ], 'include deep ordered members');\n   *\n   * @name includeDeepOrderedMembers\n   * @param {Array} superset\n   * @param {Array} subset\n   * @param {String} message\n   * @namespace Assert\n   * @api public\n   */\n\n  assert.includeDeepOrderedMembers = function (superset, subset, msg) {\n    new Assertion(superset, msg, assert.includeDeepOrderedMembers, true)\n      .to.include.deep.ordered.members(subset);\n  }\n\n  /**\n   * ### .notIncludeDeepOrderedMembers(superset, subset, [message])\n   *\n   * Asserts that `subset` isn't included in `superset` in the same order\n   * beginning with the first element in `superset`. Uses a deep equality\n   * check.\n   *\n   *     assert.notIncludeDeepOrderedMembers([ { a: 1 }, { b: 2 }, { c: 3 } ], [ { a: 1 }, { f: 5 } ], 'not include deep ordered members');\n   *     assert.notIncludeDeepOrderedMembers([ { a: 1 }, { b: 2 }, { c: 3 } ], [ { b: 2 }, { a: 1 } ], 'not include deep ordered members');\n   *     assert.notIncludeDeepOrderedMembers([ { a: 1 }, { b: 2 }, { c: 3 } ], [ { b: 2 }, { c: 3 } ], 'not include deep ordered members');\n   *\n   * @name notIncludeDeepOrderedMembers\n   * @param {Array} superset\n   * @param {Array} subset\n   * @param {String} message\n   * @namespace Assert\n   * @api public\n   */\n\n  assert.notIncludeDeepOrderedMembers = function (superset, subset, msg) {\n    new Assertion(superset, msg, assert.notIncludeDeepOrderedMembers, true)\n      .to.not.include.deep.ordered.members(subset);\n  }\n\n  /**\n   * ### .oneOf(inList, list, [message])\n   *\n   * Asserts that non-object, non-array value `inList` appears in the flat array `list`.\n   *\n   *     assert.oneOf(1, [ 2, 1 ], 'Not found in list');\n   *\n   * @name oneOf\n   * @param {*} inList\n   * @param {Array<*>} list\n   * @param {String} message\n   * @namespace Assert\n   * @api public\n   */\n\n  assert.oneOf = function (inList, list, msg) {\n    new Assertion(inList, msg, assert.oneOf, true).to.be.oneOf(list);\n  }\n\n  /**\n   * ### .changes(function, object, property, [message])\n   *\n   * Asserts that a function changes the value of a property.\n   *\n   *     var obj = { val: 10 };\n   *     var fn = function() { obj.val = 22 };\n   *     assert.changes(fn, obj, 'val');\n   *\n   * @name changes\n   * @param {Function} modifier function\n   * @param {Object} object or getter function\n   * @param {String} property name _optional_\n   * @param {String} message _optional_\n   * @namespace Assert\n   * @api public\n   */\n\n  assert.changes = function (fn, obj, prop, msg) {\n    if (arguments.length === 3 && typeof obj === 'function') {\n      msg = prop;\n      prop = null;\n    }\n\n    new Assertion(fn, msg, assert.changes, true).to.change(obj, prop);\n  }\n\n   /**\n   * ### .changesBy(function, object, property, delta, [message])\n   *\n   * Asserts that a function changes the value of a property by an amount (delta).\n   *\n   *     var obj = { val: 10 };\n   *     var fn = function() { obj.val += 2 };\n   *     assert.changesBy(fn, obj, 'val', 2);\n   *\n   * @name changesBy\n   * @param {Function} modifier function\n   * @param {Object} object or getter function\n   * @param {String} property name _optional_\n   * @param {Number} change amount (delta)\n   * @param {String} message _optional_\n   * @namespace Assert\n   * @api public\n   */\n\n  assert.changesBy = function (fn, obj, prop, delta, msg) {\n    if (arguments.length === 4 && typeof obj === 'function') {\n      var tmpMsg = delta;\n      delta = prop;\n      msg = tmpMsg;\n    } else if (arguments.length === 3) {\n      delta = prop;\n      prop = null;\n    }\n\n    new Assertion(fn, msg, assert.changesBy, true)\n      .to.change(obj, prop).by(delta);\n  }\n\n   /**\n   * ### .doesNotChange(function, object, property, [message])\n   *\n   * Asserts that a function does not change the value of a property.\n   *\n   *     var obj = { val: 10 };\n   *     var fn = function() { console.log('foo'); };\n   *     assert.doesNotChange(fn, obj, 'val');\n   *\n   * @name doesNotChange\n   * @param {Function} modifier function\n   * @param {Object} object or getter function\n   * @param {String} property name _optional_\n   * @param {String} message _optional_\n   * @namespace Assert\n   * @api public\n   */\n\n  assert.doesNotChange = function (fn, obj, prop, msg) {\n    if (arguments.length === 3 && typeof obj === 'function') {\n      msg = prop;\n      prop = null;\n    }\n\n    return new Assertion(fn, msg, assert.doesNotChange, true)\n      .to.not.change(obj, prop);\n  }\n\n  /**\n   * ### .changesButNotBy(function, object, property, delta, [message])\n   *\n   * Asserts that a function does not change the value of a property or of a function's return value by an amount (delta)\n   *\n   *     var obj = { val: 10 };\n   *     var fn = function() { obj.val += 10 };\n   *     assert.changesButNotBy(fn, obj, 'val', 5);\n   *\n   * @name changesButNotBy\n   * @param {Function} modifier function\n   * @param {Object} object or getter function\n   * @param {String} property name _optional_\n   * @param {Number} change amount (delta)\n   * @param {String} message _optional_\n   * @namespace Assert\n   * @api public\n   */\n\n  assert.changesButNotBy = function (fn, obj, prop, delta, msg) {\n    if (arguments.length === 4 && typeof obj === 'function') {\n      var tmpMsg = delta;\n      delta = prop;\n      msg = tmpMsg;\n    } else if (arguments.length === 3) {\n      delta = prop;\n      prop = null;\n    }\n\n    new Assertion(fn, msg, assert.changesButNotBy, true)\n      .to.change(obj, prop).but.not.by(delta);\n  }\n\n  /**\n   * ### .increases(function, object, property, [message])\n   *\n   * Asserts that a function increases a numeric object property.\n   *\n   *     var obj = { val: 10 };\n   *     var fn = function() { obj.val = 13 };\n   *     assert.increases(fn, obj, 'val');\n   *\n   * @name increases\n   * @param {Function} modifier function\n   * @param {Object} object or getter function\n   * @param {String} property name _optional_\n   * @param {String} message _optional_\n   * @namespace Assert\n   * @api public\n   */\n\n  assert.increases = function (fn, obj, prop, msg) {\n    if (arguments.length === 3 && typeof obj === 'function') {\n      msg = prop;\n      prop = null;\n    }\n\n    return new Assertion(fn, msg, assert.increases, true)\n      .to.increase(obj, prop);\n  }\n\n  /**\n   * ### .increasesBy(function, object, property, delta, [message])\n   *\n   * Asserts that a function increases a numeric object property or a function's return value by an amount (delta).\n   *\n   *     var obj = { val: 10 };\n   *     var fn = function() { obj.val += 10 };\n   *     assert.increasesBy(fn, obj, 'val', 10);\n   *\n   * @name increasesBy\n   * @param {Function} modifier function\n   * @param {Object} object or getter function\n   * @param {String} property name _optional_\n   * @param {Number} change amount (delta)\n   * @param {String} message _optional_\n   * @namespace Assert\n   * @api public\n   */\n\n  assert.increasesBy = function (fn, obj, prop, delta, msg) {\n    if (arguments.length === 4 && typeof obj === 'function') {\n      var tmpMsg = delta;\n      delta = prop;\n      msg = tmpMsg;\n    } else if (arguments.length === 3) {\n      delta = prop;\n      prop = null;\n    }\n\n    new Assertion(fn, msg, assert.increasesBy, true)\n      .to.increase(obj, prop).by(delta);\n  }\n\n  /**\n   * ### .doesNotIncrease(function, object, property, [message])\n   *\n   * Asserts that a function does not increase a numeric object property.\n   *\n   *     var obj = { val: 10 };\n   *     var fn = function() { obj.val = 8 };\n   *     assert.doesNotIncrease(fn, obj, 'val');\n   *\n   * @name doesNotIncrease\n   * @param {Function} modifier function\n   * @param {Object} object or getter function\n   * @param {String} property name _optional_\n   * @param {String} message _optional_\n   * @namespace Assert\n   * @api public\n   */\n\n  assert.doesNotIncrease = function (fn, obj, prop, msg) {\n    if (arguments.length === 3 && typeof obj === 'function') {\n      msg = prop;\n      prop = null;\n    }\n\n    return new Assertion(fn, msg, assert.doesNotIncrease, true)\n      .to.not.increase(obj, prop);\n  }\n\n  /**\n   * ### .increasesButNotBy(function, object, property, delta, [message])\n   *\n   * Asserts that a function does not increase a numeric object property or function's return value by an amount (delta).\n   *\n   *     var obj = { val: 10 };\n   *     var fn = function() { obj.val = 15 };\n   *     assert.increasesButNotBy(fn, obj, 'val', 10);\n   *\n   * @name increasesButNotBy\n   * @param {Function} modifier function\n   * @param {Object} object or getter function\n   * @param {String} property name _optional_\n   * @param {Number} change amount (delta)\n   * @param {String} message _optional_\n   * @namespace Assert\n   * @api public\n   */\n\n  assert.increasesButNotBy = function (fn, obj, prop, delta, msg) {\n    if (arguments.length === 4 && typeof obj === 'function') {\n      var tmpMsg = delta;\n      delta = prop;\n      msg = tmpMsg;\n    } else if (arguments.length === 3) {\n      delta = prop;\n      prop = null;\n    }\n\n    new Assertion(fn, msg, assert.increasesButNotBy, true)\n      .to.increase(obj, prop).but.not.by(delta);\n  }\n\n  /**\n   * ### .decreases(function, object, property, [message])\n   *\n   * Asserts that a function decreases a numeric object property.\n   *\n   *     var obj = { val: 10 };\n   *     var fn = function() { obj.val = 5 };\n   *     assert.decreases(fn, obj, 'val');\n   *\n   * @name decreases\n   * @param {Function} modifier function\n   * @param {Object} object or getter function\n   * @param {String} property name _optional_\n   * @param {String} message _optional_\n   * @namespace Assert\n   * @api public\n   */\n\n  assert.decreases = function (fn, obj, prop, msg) {\n    if (arguments.length === 3 && typeof obj === 'function') {\n      msg = prop;\n      prop = null;\n    }\n\n    return new Assertion(fn, msg, assert.decreases, true)\n      .to.decrease(obj, prop);\n  }\n\n  /**\n   * ### .decreasesBy(function, object, property, delta, [message])\n   *\n   * Asserts that a function decreases a numeric object property or a function's return value by an amount (delta)\n   *\n   *     var obj = { val: 10 };\n   *     var fn = function() { obj.val -= 5 };\n   *     assert.decreasesBy(fn, obj, 'val', 5);\n   *\n   * @name decreasesBy\n   * @param {Function} modifier function\n   * @param {Object} object or getter function\n   * @param {String} property name _optional_\n   * @param {Number} change amount (delta)\n   * @param {String} message _optional_\n   * @namespace Assert\n   * @api public\n   */\n\n  assert.decreasesBy = function (fn, obj, prop, delta, msg) {\n    if (arguments.length === 4 && typeof obj === 'function') {\n      var tmpMsg = delta;\n      delta = prop;\n      msg = tmpMsg;\n    } else if (arguments.length === 3) {\n      delta = prop;\n      prop = null;\n    }\n\n    new Assertion(fn, msg, assert.decreasesBy, true)\n      .to.decrease(obj, prop).by(delta);\n  }\n\n  /**\n   * ### .doesNotDecrease(function, object, property, [message])\n   *\n   * Asserts that a function does not decreases a numeric object property.\n   *\n   *     var obj = { val: 10 };\n   *     var fn = function() { obj.val = 15 };\n   *     assert.doesNotDecrease(fn, obj, 'val');\n   *\n   * @name doesNotDecrease\n   * @param {Function} modifier function\n   * @param {Object} object or getter function\n   * @param {String} property name _optional_\n   * @param {String} message _optional_\n   * @namespace Assert\n   * @api public\n   */\n\n  assert.doesNotDecrease = function (fn, obj, prop, msg) {\n    if (arguments.length === 3 && typeof obj === 'function') {\n      msg = prop;\n      prop = null;\n    }\n\n    return new Assertion(fn, msg, assert.doesNotDecrease, true)\n      .to.not.decrease(obj, prop);\n  }\n\n  /**\n   * ### .doesNotDecreaseBy(function, object, property, delta, [message])\n   *\n   * Asserts that a function does not decreases a numeric object property or a function's return value by an amount (delta)\n   *\n   *     var obj = { val: 10 };\n   *     var fn = function() { obj.val = 5 };\n   *     assert.doesNotDecreaseBy(fn, obj, 'val', 1);\n   *\n   * @name doesNotDecreaseBy\n   * @param {Function} modifier function\n   * @param {Object} object or getter function\n   * @param {String} property name _optional_\n   * @param {Number} change amount (delta)\n   * @param {String} message _optional_\n   * @namespace Assert\n   * @api public\n   */\n\n  assert.doesNotDecreaseBy = function (fn, obj, prop, delta, msg) {\n    if (arguments.length === 4 && typeof obj === 'function') {\n      var tmpMsg = delta;\n      delta = prop;\n      msg = tmpMsg;\n    } else if (arguments.length === 3) {\n      delta = prop;\n      prop = null;\n    }\n\n    return new Assertion(fn, msg, assert.doesNotDecreaseBy, true)\n      .to.not.decrease(obj, prop).by(delta);\n  }\n\n  /**\n   * ### .decreasesButNotBy(function, object, property, delta, [message])\n   *\n   * Asserts that a function does not decreases a numeric object property or a function's return value by an amount (delta)\n   *\n   *     var obj = { val: 10 };\n   *     var fn = function() { obj.val = 5 };\n   *     assert.decreasesButNotBy(fn, obj, 'val', 1);\n   *\n   * @name decreasesButNotBy\n   * @param {Function} modifier function\n   * @param {Object} object or getter function\n   * @param {String} property name _optional_\n   * @param {Number} change amount (delta)\n   * @param {String} message _optional_\n   * @namespace Assert\n   * @api public\n   */\n\n  assert.decreasesButNotBy = function (fn, obj, prop, delta, msg) {\n    if (arguments.length === 4 && typeof obj === 'function') {\n      var tmpMsg = delta;\n      delta = prop;\n      msg = tmpMsg;\n    } else if (arguments.length === 3) {\n      delta = prop;\n      prop = null;\n    }\n\n    new Assertion(fn, msg, assert.decreasesButNotBy, true)\n      .to.decrease(obj, prop).but.not.by(delta);\n  }\n\n  /*!\n   * ### .ifError(object)\n   *\n   * Asserts if value is not a false value, and throws if it is a true value.\n   * This is added to allow for chai to be a drop-in replacement for Node's\n   * assert class.\n   *\n   *     var err = new Error('I am a custom error');\n   *     assert.ifError(err); // Rethrows err!\n   *\n   * @name ifError\n   * @param {Object} object\n   * @namespace Assert\n   * @api public\n   */\n\n  assert.ifError = function (val) {\n    if (val) {\n      throw(val);\n    }\n  };\n\n  /**\n   * ### .isExtensible(object)\n   *\n   * Asserts that `object` is extensible (can have new properties added to it).\n   *\n   *     assert.isExtensible({});\n   *\n   * @name isExtensible\n   * @alias extensible\n   * @param {Object} object\n   * @param {String} message _optional_\n   * @namespace Assert\n   * @api public\n   */\n\n  assert.isExtensible = function (obj, msg) {\n    new Assertion(obj, msg, assert.isExtensible, true).to.be.extensible;\n  };\n\n  /**\n   * ### .isNotExtensible(object)\n   *\n   * Asserts that `object` is _not_ extensible.\n   *\n   *     var nonExtensibleObject = Object.preventExtensions({});\n   *     var sealedObject = Object.seal({});\n   *     var frozenObject = Object.freeze({});\n   *\n   *     assert.isNotExtensible(nonExtensibleObject);\n   *     assert.isNotExtensible(sealedObject);\n   *     assert.isNotExtensible(frozenObject);\n   *\n   * @name isNotExtensible\n   * @alias notExtensible\n   * @param {Object} object\n   * @param {String} message _optional_\n   * @namespace Assert\n   * @api public\n   */\n\n  assert.isNotExtensible = function (obj, msg) {\n    new Assertion(obj, msg, assert.isNotExtensible, true).to.not.be.extensible;\n  };\n\n  /**\n   * ### .isSealed(object)\n   *\n   * Asserts that `object` is sealed (cannot have new properties added to it\n   * and its existing properties cannot be removed).\n   *\n   *     var sealedObject = Object.seal({});\n   *     var frozenObject = Object.seal({});\n   *\n   *     assert.isSealed(sealedObject);\n   *     assert.isSealed(frozenObject);\n   *\n   * @name isSealed\n   * @alias sealed\n   * @param {Object} object\n   * @param {String} message _optional_\n   * @namespace Assert\n   * @api public\n   */\n\n  assert.isSealed = function (obj, msg) {\n    new Assertion(obj, msg, assert.isSealed, true).to.be.sealed;\n  };\n\n  /**\n   * ### .isNotSealed(object)\n   *\n   * Asserts that `object` is _not_ sealed.\n   *\n   *     assert.isNotSealed({});\n   *\n   * @name isNotSealed\n   * @alias notSealed\n   * @param {Object} object\n   * @param {String} message _optional_\n   * @namespace Assert\n   * @api public\n   */\n\n  assert.isNotSealed = function (obj, msg) {\n    new Assertion(obj, msg, assert.isNotSealed, true).to.not.be.sealed;\n  };\n\n  /**\n   * ### .isFrozen(object)\n   *\n   * Asserts that `object` is frozen (cannot have new properties added to it\n   * and its existing properties cannot be modified).\n   *\n   *     var frozenObject = Object.freeze({});\n   *     assert.frozen(frozenObject);\n   *\n   * @name isFrozen\n   * @alias frozen\n   * @param {Object} object\n   * @param {String} message _optional_\n   * @namespace Assert\n   * @api public\n   */\n\n  assert.isFrozen = function (obj, msg) {\n    new Assertion(obj, msg, assert.isFrozen, true).to.be.frozen;\n  };\n\n  /**\n   * ### .isNotFrozen(object)\n   *\n   * Asserts that `object` is _not_ frozen.\n   *\n   *     assert.isNotFrozen({});\n   *\n   * @name isNotFrozen\n   * @alias notFrozen\n   * @param {Object} object\n   * @param {String} message _optional_\n   * @namespace Assert\n   * @api public\n   */\n\n  assert.isNotFrozen = function (obj, msg) {\n    new Assertion(obj, msg, assert.isNotFrozen, true).to.not.be.frozen;\n  };\n\n  /**\n   * ### .isEmpty(target)\n   *\n   * Asserts that the target does not contain any values.\n   * For arrays and strings, it checks the `length` property.\n   * For `Map` and `Set` instances, it checks the `size` property.\n   * For non-function objects, it gets the count of own\n   * enumerable string keys.\n   *\n   *     assert.isEmpty([]);\n   *     assert.isEmpty('');\n   *     assert.isEmpty(new Map);\n   *     assert.isEmpty({});\n   *\n   * @name isEmpty\n   * @alias empty\n   * @param {Object|Array|String|Map|Set} target\n   * @param {String} message _optional_\n   * @namespace Assert\n   * @api public\n   */\n\n  assert.isEmpty = function(val, msg) {\n    new Assertion(val, msg, assert.isEmpty, true).to.be.empty;\n  };\n\n  /**\n   * ### .isNotEmpty(target)\n   *\n   * Asserts that the target contains values.\n   * For arrays and strings, it checks the `length` property.\n   * For `Map` and `Set` instances, it checks the `size` property.\n   * For non-function objects, it gets the count of own\n   * enumerable string keys.\n   *\n   *     assert.isNotEmpty([1, 2]);\n   *     assert.isNotEmpty('34');\n   *     assert.isNotEmpty(new Set([5, 6]));\n   *     assert.isNotEmpty({ key: 7 });\n   *\n   * @name isNotEmpty\n   * @alias notEmpty\n   * @param {Object|Array|String|Map|Set} target\n   * @param {String} message _optional_\n   * @namespace Assert\n   * @api public\n   */\n\n  assert.isNotEmpty = function(val, msg) {\n    new Assertion(val, msg, assert.isNotEmpty, true).to.not.be.empty;\n  };\n\n  /*!\n   * Aliases.\n   */\n\n  (function alias(name, as){\n    assert[as] = assert[name];\n    return alias;\n  })\n  ('isOk', 'ok')\n  ('isNotOk', 'notOk')\n  ('throws', 'throw')\n  ('throws', 'Throw')\n  ('isExtensible', 'extensible')\n  ('isNotExtensible', 'notExtensible')\n  ('isSealed', 'sealed')\n  ('isNotSealed', 'notSealed')\n  ('isFrozen', 'frozen')\n  ('isNotFrozen', 'notFrozen')\n  ('isEmpty', 'empty')\n  ('isNotEmpty', 'notEmpty');\n};\n","const optsArg = require('./lib/opts-arg.js')\nconst pathArg = require('./lib/path-arg.js')\n\nconst {mkdirpNative, mkdirpNativeSync} = require('./lib/mkdirp-native.js')\nconst {mkdirpManual, mkdirpManualSync} = require('./lib/mkdirp-manual.js')\nconst {useNative, useNativeSync} = require('./lib/use-native.js')\n\n\nconst mkdirp = (path, opts) => {\n  path = pathArg(path)\n  opts = optsArg(opts)\n  return useNative(opts)\n    ? mkdirpNative(path, opts)\n    : mkdirpManual(path, opts)\n}\n\nconst mkdirpSync = (path, opts) => {\n  path = pathArg(path)\n  opts = optsArg(opts)\n  return useNativeSync(opts)\n    ? mkdirpNativeSync(path, opts)\n    : mkdirpManualSync(path, opts)\n}\n\nmkdirp.sync = mkdirpSync\nmkdirp.native = (path, opts) => mkdirpNative(pathArg(path), optsArg(opts))\nmkdirp.manual = (path, opts) => mkdirpManual(pathArg(path), optsArg(opts))\nmkdirp.nativeSync = (path, opts) => mkdirpNativeSync(pathArg(path), optsArg(opts))\nmkdirp.manualSync = (path, opts) => mkdirpManualSync(pathArg(path), optsArg(opts))\n\nmodule.exports = mkdirp\n","const { promisify } = require('util')\nconst fs = require('fs')\nconst optsArg = opts => {\n  if (!opts)\n    opts = { mode: 0o777, fs }\n  else if (typeof opts === 'object')\n    opts = { mode: 0o777, fs, ...opts }\n  else if (typeof opts === 'number')\n    opts = { mode: opts, fs }\n  else if (typeof opts === 'string')\n    opts = { mode: parseInt(opts, 8), fs }\n  else\n    throw new TypeError('invalid options argument')\n\n  opts.mkdir = opts.mkdir || opts.fs.mkdir || fs.mkdir\n  opts.mkdirAsync = promisify(opts.mkdir)\n  opts.stat = opts.stat || opts.fs.stat || fs.stat\n  opts.statAsync = promisify(opts.stat)\n  opts.statSync = opts.statSync || opts.fs.statSync || fs.statSync\n  opts.mkdirSync = opts.mkdirSync || opts.fs.mkdirSync || fs.mkdirSync\n  return opts\n}\nmodule.exports = optsArg\n","module.exports = require(\"util\");","const platform = process.env.__TESTING_MKDIRP_PLATFORM__ || process.platform\nconst { resolve, parse } = require('path')\nconst pathArg = path => {\n  if (/\\0/.test(path)) {\n    // simulate same failure that node raises\n    throw Object.assign(\n      new TypeError('path must be a string without null bytes'),\n      {\n        path,\n        code: 'ERR_INVALID_ARG_VALUE',\n      }\n    )\n  }\n\n  path = resolve(path)\n  if (platform === 'win32') {\n    const badWinChars = /[*|\"<>?:]/\n    const {root} = parse(path)\n    if (badWinChars.test(path.substr(root.length))) {\n      throw Object.assign(new Error('Illegal characters in path.'), {\n        path,\n        code: 'EINVAL',\n      })\n    }\n  }\n\n  return path\n}\nmodule.exports = pathArg\n","const {dirname} = require('path')\nconst {findMade, findMadeSync} = require('./find-made.js')\nconst {mkdirpManual, mkdirpManualSync} = require('./mkdirp-manual.js')\n\nconst mkdirpNative = (path, opts) => {\n  opts.recursive = true\n  const parent = dirname(path)\n  if (parent === path)\n    return opts.mkdirAsync(path, opts)\n\n  return findMade(opts, path).then(made =>\n    opts.mkdirAsync(path, opts).then(() => made)\n    .catch(er => {\n      if (er.code === 'ENOENT')\n        return mkdirpManual(path, opts)\n      else\n        throw er\n    }))\n}\n\nconst mkdirpNativeSync = (path, opts) => {\n  opts.recursive = true\n  const parent = dirname(path)\n  if (parent === path)\n    return opts.mkdirSync(path, opts)\n\n  const made = findMadeSync(opts, path)\n  try {\n    opts.mkdirSync(path, opts)\n    return made\n  } catch (er) {\n    if (er.code === 'ENOENT')\n      return mkdirpManualSync(path, opts)\n    else\n      throw er\n  }\n}\n\nmodule.exports = {mkdirpNative, mkdirpNativeSync}\n","const {dirname} = require('path')\n\nconst findMade = (opts, parent, path = undefined) => {\n  // we never want the 'made' return value to be a root directory\n  if (path === parent)\n    return Promise.resolve()\n\n  return opts.statAsync(parent).then(\n    st => st.isDirectory() ? path : undefined, // will fail later\n    er => er.code === 'ENOENT'\n      ? findMade(opts, dirname(parent), parent)\n      : undefined\n  )\n}\n\nconst findMadeSync = (opts, parent, path = undefined) => {\n  if (path === parent)\n    return undefined\n\n  try {\n    return opts.statSync(parent).isDirectory() ? path : undefined\n  } catch (er) {\n    return er.code === 'ENOENT'\n      ? findMadeSync(opts, dirname(parent), parent)\n      : undefined\n  }\n}\n\nmodule.exports = {findMade, findMadeSync}\n","const fs = require('fs')\n\nconst version = process.env.__TESTING_MKDIRP_NODE_VERSION__ || process.version\nconst versArr = version.replace(/^v/, '').split('.')\nconst hasNative = +versArr[0] > 10 || +versArr[0] === 10 && +versArr[1] >= 12\n\nconst useNative = !hasNative ? () => false : opts => opts.mkdir === fs.mkdir\nconst useNativeSync = !hasNative ? () => false : opts => opts.mkdirSync === fs.mkdirSync\n\nmodule.exports = {useNative, useNativeSync}\n","module.exports = require(\"os\");","export type SendRequestCallback<TResponse> = (requestId: string) => Promise<TResponse>;\n\nexport interface InsomniaOptions<TResponse> {\n  sendRequest: SendRequestCallback<TResponse>;\n  bail?: boolean;\n  keepFile?: boolean;\n  testFilter?: string;\n}\n\n/**\n * An instance of Insomnia will be exposed as a global variable during\n * tests, and will provide a bunch of utility functions for sending\n * requests, etc.\n */\nexport class Insomnia<TResponse = {}> {\n  activeRequestId: string | null;\n  activeEnvironmentId: string | null = null;\n  sendRequest: SendRequestCallback<TResponse>;\n\n  constructor(options: InsomniaOptions<TResponse>) {\n    this.sendRequest = options.sendRequest; // Things that are set per test\n\n    this.activeRequestId = null;\n  }\n\n  setActiveRequestId(id: string) {\n    this.activeRequestId = id;\n  }\n\n  clearActiveRequest() {\n    this.activeRequestId = null;\n  }\n\n  /**\n   *\n   * @param reqId - request ID to send. Specifying nothing will send the active request\n   */\n  async send(reqId: string | null = null) {\n    // Default to active request if nothing is specified\n    const requestId = reqId || this.activeRequestId;\n\n    if (!requestId) {\n      throw new Error('No selected request');\n    }\n\n    const result = await this.sendRequest(requestId);\n    return result;\n  }\n}\n","/**\n * NOTE: This is a straight copy of the default Mocha JSON reporter, except stdout logging is removed.\n *\n * https://github.com/mochajs/mocha/blob/9d4a8ec2d22ee154aecb1f8eeb25af8e6309faa8/lib/reporters/json.js\n */\nimport Mocha, { MochaOptions, reporters, Runnable, Runner, Test } from 'mocha';\n\nimport { TestResult, TestResults } from './entities';\n\nexport class JavaScriptReporter extends reporters.Base {\n  description = 'single JS object';\n\n  constructor(runner: Runner & { testResults?: TestResults }, options: MochaOptions) {\n    super(runner, options);\n\n    Mocha.reporters.Base.call(this, runner, options);\n    // eslint-disable-next-line @typescript-eslint/no-this-alias\n    const self = this;\n    const tests: Test[] = [];\n    const pending: Test[] = [];\n    const failures: Test[] = [];\n    const passes: Test[] = [];\n\n    runner.on(Mocha.Runner.constants.EVENT_TEST_END, test => {\n      tests.push(test);\n    });\n\n    runner.on(Mocha.Runner.constants.EVENT_TEST_PASS, test => {\n      passes.push(test);\n    });\n\n    runner.on(Mocha.Runner.constants.EVENT_TEST_FAIL, test => {\n      failures.push(test);\n    });\n\n    runner.on(Mocha.Runner.constants.EVENT_TEST_PENDING, test => {\n      pending.push(test);\n    });\n\n    runner.once(Mocha.Runner.constants.EVENT_RUN_END, () => {\n      runner.testResults = {\n        stats: self.stats,\n        tests: tests.map(clean),\n        pending: pending.map(clean),\n        failures: failures.map(clean),\n        passes: passes.map(clean),\n      };\n      // This is the main change from the original JSONReporter\n      // process.stdout.write(JSON.stringify(obj, null, 2));\n    });\n  }\n}\n\n/**\n * Return a plain-object representation of `test` free of cyclic properties etc.\n */\nconst clean = (runnable: Runnable): TestResult => {\n  // @ts-expect-error this is what the source code originally had in mocha so I am not changing it\n  let err = runnable.err || {};\n  if (err instanceof Error) {\n    err = errorJSON(err);\n  }\n\n  return {\n    title: runnable.title,\n    fullTitle: runnable.fullTitle(),\n    file: runnable.file,\n    duration: runnable.duration,\n    // @ts-expect-error this is what the source code originally had in mocha so I am not changing it\n    currentRetry: runnable.currentRetry(),\n    err: cleanCycles(err),\n  };\n};\n\n/**\n * Replaces any circular references inside `obj` with '[object Object]'\n */\nconst cleanCycles = (obj: Error) => {\n  const cache: JSON[] = [];\n  return JSON.parse(\n    JSON.stringify(obj, (_, value) => {\n      if (typeof value === 'object' && value !== null) {\n        if (cache.indexOf(value) !== -1) {\n          // Instead of going in a circle, we'll print [object Object]\n          return '' + value;\n        }\n\n        cache.push(value);\n      }\n\n      return value;\n    }),\n  );\n};\n\n/**\n * Transform an Error object into a JSON object.\n */\nconst errorJSON = (error: Error) => {\n  return (Object.getOwnPropertyNames(error) as (keyof Error)[]).reduce((accumulator, key) => {\n    return {\n      ...accumulator,\n      [key]: error[key],\n    };\n  }, {});\n};\n"],"sourceRoot":""}