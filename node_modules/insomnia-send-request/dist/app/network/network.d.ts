/// <reference types="node" />
import type { ExtraRenderInfo, RenderedRequest } from '../common/render';
import type { Environment } from '../models/environment';
import type { RequestHeader } from '../models/request';
import type { ResponseHeader } from '../models/response';
import type { Settings } from '../models/settings';
import { Workspace } from '../models/workspace';
export interface ResponsePatch {
    bodyCompression?: 'zip' | null;
    bodyPath?: string;
    bytesContent?: number;
    bytesRead?: number;
    contentType?: string;
    elapsedTime: number;
    environmentId?: string | null;
    error?: string;
    headers?: ResponseHeader[];
    httpVersion?: string;
    message?: string;
    parentId?: string;
    settingSendCookies?: boolean;
    settingStoreCookies?: boolean;
    statusCode?: number;
    statusMessage?: string;
    timelinePath?: string;
    url?: string;
}
export declare function cancelRequestById(requestId: any): Promise<any>;
export declare function hasCancelFunctionForId(requestId: any): boolean;
export declare function _actuallySend(renderedRequest: RenderedRequest, renderContext: Record<string, any>, workspace: Workspace, settings: Omit<Settings, 'validateSSL' | 'validateAuthSSL'>, environment?: Environment | null, validateSSL?: boolean): Promise<ResponsePatch>;
export declare function sendWithSettings(requestId: string, requestPatch: Record<string, any>): Promise<ResponsePatch>;
export declare function send(requestId: string, environmentId?: string, extraInfo?: ExtraRenderInfo): Promise<ResponsePatch>;
interface HeaderResult {
    headers: ResponseHeader[];
    version: string;
    code: number;
    reason: string;
}
export declare function _parseHeaders(buffer: Buffer): HeaderResult[];
export declare function _getAwsAuthHeaders(credentials: {
    accessKeyId: string;
    secretAccessKey: string;
    sessionToken: string;
}, headers: RequestHeader[], body: string, url: string, method: string, region?: string, service?: string): {
    name: string;
    value: string;
    description?: string;
    disabled?: boolean;
}[];
export {};
//# sourceMappingURL=network.d.ts.map