import type { BaseModel } from './index';
export declare const name = "Request";
export declare const type = "Request";
export declare const prefix = "req";
export declare const canDuplicate = true;
export declare const canSync = true;
export declare type RequestAuthentication = Record<string, any>;
export interface RequestHeader {
    name: string;
    value: string;
    description?: string;
    disabled?: boolean;
}
export interface RequestParameter {
    name: string;
    value: string;
    disabled?: boolean;
    id?: string;
    fileName?: string;
}
export interface RequestBodyParameter {
    name: string;
    value: string;
    description?: string;
    disabled?: boolean;
    multiline?: string;
    id?: string;
    fileName?: string;
    type?: string;
}
export interface RequestBody {
    mimeType?: string | null;
    text?: string;
    fileName?: string;
    params?: RequestBodyParameter[];
}
export interface BaseRequest {
    url: string;
    name: string;
    description: string;
    method: string;
    body: RequestBody;
    parameters: RequestParameter[];
    headers: RequestHeader[];
    authentication: RequestAuthentication;
    metaSortKey: number;
    isPrivate: boolean;
    settingStoreCookies: boolean;
    settingSendCookies: boolean;
    settingDisableRenderRequestBody: boolean;
    settingEncodeUrl: boolean;
    settingRebuildPath: boolean;
    settingFollowRedirects: string;
}
export declare type Request = BaseModel & BaseRequest;
export declare const isRequest: (model: Pick<BaseModel, 'type'>) => model is Request;
export declare function init(): BaseRequest;
export declare function newAuth(type: string, oldAuth?: RequestAuthentication): RequestAuthentication;
export declare function newBodyNone(): RequestBody;
export declare function newBodyRaw(rawBody: string, contentType?: string): RequestBody;
export declare function newBodyGraphQL(rawBody: string): RequestBody;
export declare function newBodyFormUrlEncoded(parameters: RequestBodyParameter[] | null): RequestBody;
export declare function newBodyFile(path: string): RequestBody;
export declare function newBodyForm(parameters: RequestBodyParameter[]): RequestBody;
export declare function migrate(doc: Request): Request;
export declare function create(patch?: Partial<Request>): Promise<Request>;
export declare function getById(id: string): Promise<Request | null>;
export declare function findByParentId(parentId: string): Promise<Request[]>;
export declare function update(request: Request, patch: Partial<Request>): Promise<Request>;
export declare function updateMimeType(request: Request, mimeType: string, doCreate?: boolean, savedBody?: RequestBody): Promise<Request>;
export declare function duplicate(request: Request, patch?: Partial<Request>): Promise<Request>;
export declare function remove(request: Request): Promise<void>;
export declare function all(): Promise<Request[]>;
//# sourceMappingURL=request.d.ts.map