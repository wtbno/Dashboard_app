import type { BaseModel } from './index';
export declare const name = "Environment";
export declare const type = "Environment";
export declare const prefix = "env";
export declare const canDuplicate = true;
export declare const canSync = true;
interface BaseEnvironment {
    name: string;
    data: Record<string, any>;
    dataPropertyOrder: Record<string, any> | null;
    color: string | null;
    metaSortKey: number;
    isPrivate: boolean;
}
export declare type Environment = BaseModel & BaseEnvironment;
export declare const isEnvironment: (model: Pick<BaseModel, 'type'>) => model is Environment;
export declare function init(): {
    name: string;
    data: {};
    dataPropertyOrder: null;
    color: null;
    isPrivate: boolean;
    metaSortKey: number;
};
export declare function migrate(doc: Environment): Environment;
export declare function create(patch?: Partial<Environment>): Promise<Environment>;
export declare function update(environment: Environment, patch: Partial<Environment>): Promise<Environment>;
export declare function findByParentId(parentId: string): Promise<Environment[]>;
export declare function getOrCreateForParentId(parentId: string): Promise<Environment>;
export declare function getById(id: string): Promise<Environment | null>;
export declare function getByParentId(parentId: string): Promise<Environment | null>;
export declare function duplicate(environment: Environment): Promise<Environment>;
export declare function remove(environment: Environment): Promise<void>;
export declare function all(): Promise<Environment[]>;
export {};
//# sourceMappingURL=environment.d.ts.map