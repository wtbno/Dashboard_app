import type { BaseModel } from './index';
export declare const name = "Proto Directory";
export declare const type = "ProtoDirectory";
export declare const prefix = "pd";
export declare const canDuplicate = true;
export declare const canSync = true;
interface BaseProtoDirectory {
    name: string;
}
export declare type ProtoDirectory = BaseModel & BaseProtoDirectory;
export declare const isProtoDirectory: (model: Pick<BaseModel, 'type'>) => model is ProtoDirectory;
export declare function init(): BaseProtoDirectory;
export declare function migrate(doc: ProtoDirectory): ProtoDirectory;
export declare function createId(): string;
export declare function create(patch?: Partial<ProtoDirectory>): Promise<ProtoDirectory>;
export declare function getById(_id: string): Promise<ProtoDirectory | null>;
export declare function getByParentId(parentId: string): Promise<ProtoDirectory | null>;
export declare function remove(obj: ProtoDirectory): Promise<void>;
export declare function batchRemoveIds(ids: string[]): Promise<void>;
export declare function all(): Promise<ProtoDirectory[]>;
export {};
//# sourceMappingURL=proto-directory.d.ts.map