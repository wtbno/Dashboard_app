import type { BaseModel } from './index';
export declare const name = "Proto File";
export declare const type = "ProtoFile";
export declare const prefix = "pf";
export declare const canDuplicate = true;
export declare const canSync = true;
interface BaseProtoFile {
    name: string;
    protoText: string;
}
export declare type ProtoFile = BaseModel & BaseProtoFile;
export declare const isProtoFile: (model: Pick<BaseModel, 'type'>) => model is ProtoFile;
export declare function init(): BaseProtoFile;
export declare function migrate(doc: ProtoFile): ProtoFile;
export declare function create(patch?: Partial<ProtoFile>): Promise<ProtoFile>;
export declare function remove(protoFile: ProtoFile): Promise<void>;
export declare function batchRemoveIds(ids: string[]): Promise<void>;
export declare function update(protoFile: ProtoFile, patch?: Partial<ProtoFile>): Promise<ProtoFile>;
export declare function getById(_id: string): Promise<ProtoFile | null>;
export declare function getByParentId(parentId: string): Promise<ProtoFile | null>;
export declare function findByParentId(parentId: string): Promise<ProtoFile[]>;
export declare function all(): Promise<ProtoFile[]>;
export {};
//# sourceMappingURL=proto-file.d.ts.map