import type { BaseModel } from './index';
export declare const name = "Cookie Jar";
export declare const type = "CookieJar";
export declare const prefix = "jar";
export declare const canDuplicate = true;
export declare const canSync = false;
export interface Cookie {
    id: string;
    key: string;
    value: string;
    expires: Date | string | number | null;
    domain: string;
    path: string;
    secure: boolean;
    httpOnly: boolean;
    extensions?: any[];
    creation?: Date;
    creationIndex?: number;
    hostOnly?: boolean;
    pathIsDefault?: boolean;
    lastAccessed?: Date;
}
interface BaseCookieJar {
    name: string;
    cookies: Cookie[];
}
export declare type CookieJar = BaseModel & BaseCookieJar;
export declare const isCookieJar: (model: Pick<BaseModel, 'type'>) => model is CookieJar;
export declare function init(): {
    name: string;
    cookies: never[];
};
export declare function migrate(doc: CookieJar): CookieJar;
export declare function create(patch: Partial<CookieJar>): Promise<CookieJar>;
export declare function getOrCreateForParentId(parentId: string): Promise<CookieJar>;
export declare function all(): Promise<BaseModel[]>;
export declare function getById(id: string): Promise<BaseModel | null>;
export declare function update(cookieJar: CookieJar, patch?: Partial<CookieJar>): Promise<CookieJar>;
export {};
//# sourceMappingURL=cookie-jar.d.ts.map