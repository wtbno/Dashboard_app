import type { BaseModel } from './index';
export declare const name = "gRPC Request";
export declare const type = "GrpcRequest";
export declare const prefix = "greq";
export declare const canDuplicate = true;
export declare const canSync = true;
export interface GrpcRequestBody {
    text?: string;
}
interface BaseGrpcRequest {
    name: string;
    url: string;
    description: string;
    protoFileId?: string;
    protoMethodName?: string;
    body: GrpcRequestBody;
    metaSortKey: number;
    isPrivate: boolean;
}
export declare type GrpcRequest = BaseModel & BaseGrpcRequest;
export declare const isGrpcRequest: (model: Pick<BaseModel, 'type'>) => model is GrpcRequest;
export declare const isGrpcRequestId: (id: string | null) => boolean | undefined;
export declare function init(): BaseGrpcRequest;
export declare function migrate(doc: GrpcRequest): GrpcRequest;
export declare function create(patch?: Partial<GrpcRequest>): Promise<GrpcRequest>;
export declare function remove(obj: GrpcRequest): Promise<void>;
export declare function update(obj: GrpcRequest, patch?: Partial<GrpcRequest>): Promise<GrpcRequest>;
export declare function getById(_id: string): Promise<GrpcRequest | null>;
export declare function findByProtoFileId(protoFileId: string): Promise<GrpcRequest[]>;
export declare function findByParentId(parentId: string): Promise<GrpcRequest[]>;
export declare function duplicate(request: GrpcRequest, patch?: Partial<GrpcRequest>): Promise<GrpcRequest>;
export declare function all(): Promise<GrpcRequest[]>;
export {};
//# sourceMappingURL=grpc-request.d.ts.map