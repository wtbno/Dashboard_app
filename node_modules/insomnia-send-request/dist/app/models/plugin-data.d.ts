import type { BaseModel } from './index';
export declare const name = "PluginData";
export declare const type = "PluginData";
export declare const prefix = "plg";
export declare const canDuplicate = false;
export declare const canSync = false;
interface BasePluginData {
    plugin: string;
    key: string;
    value: string;
}
export declare type PluginData = BaseModel & BasePluginData;
export declare const isPluginData: (model: Pick<BaseModel, 'type'>) => model is PluginData;
export declare function init(): BasePluginData;
export declare function migrate(doc: PluginData): PluginData;
export declare function create(patch?: Partial<PluginData>): Promise<PluginData>;
export declare function update(doc: PluginData, patch: Partial<PluginData>): Promise<PluginData>;
export declare function upsertByKey(plugin: string, key: string, value: string): Promise<PluginData>;
export declare function removeByKey(plugin: string, key: string): Promise<void>;
export declare function all(plugin: string): Promise<PluginData[]>;
export declare function removeAll(plugin: string): Promise<void>;
export declare function getByKey(plugin: string, key: string): Promise<PluginData | null>;
export {};
//# sourceMappingURL=plugin-data.d.ts.map