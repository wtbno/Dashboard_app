import type { BaseModel } from './index';
import { Request } from './request';
export declare const name = "Request Version";
export declare const type = "RequestVersion";
export declare const prefix = "rvr";
export declare const canDuplicate = false;
export declare const canSync = false;
interface BaseRequestVersion {
    compressedRequest: string | null;
}
export declare type RequestVersion = BaseModel & BaseRequestVersion;
export declare const isRequestVersion: (model: Pick<BaseModel, 'type'>) => model is RequestVersion;
export declare function init(): {
    compressedRequest: null;
};
export declare function migrate(doc: RequestVersion): RequestVersion;
export declare function getById(id: string): Promise<RequestVersion | null>;
export declare function create(request: Request): Promise<RequestVersion>;
export declare function getLatestByParentId(parentId: string): Promise<RequestVersion | null>;
export declare function restore(requestVersionId: string): Promise<Request | null>;
export declare function all(): Promise<RequestVersion[]>;
export {};
//# sourceMappingURL=request-version.d.ts.map