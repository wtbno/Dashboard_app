import type { BaseModel } from './index';
export declare const name = "Workspace";
export declare const type = "Workspace";
export declare const prefix = "wrk";
export declare const canDuplicate = true;
export declare const canSync = true;
interface GenericWorkspace<Scope extends 'design' | 'collection'> {
    name: string;
    description: string;
    certificates?: any;
    scope: Scope;
}
export declare type DesignWorkspace = GenericWorkspace<'design'>;
export declare type CollectionWorkspace = GenericWorkspace<'collection'>;
export declare type BaseWorkspace = DesignWorkspace | CollectionWorkspace;
export declare type WorkspaceScope = BaseWorkspace['scope'];
export declare const WorkspaceScopeKeys: {
    readonly design: "design";
    readonly collection: "collection";
};
export declare type Workspace = BaseModel & BaseWorkspace;
export declare const isWorkspace: (model: Pick<BaseModel, 'type'>) => model is Workspace;
export declare const isDesign: (workspace: Pick<Workspace, 'scope'>) => workspace is DesignWorkspace;
export declare const isCollection: (workspace: Pick<Workspace, 'scope'>) => workspace is CollectionWorkspace;
export declare const init: () => BaseWorkspace;
export declare function migrate(doc: Workspace): Promise<Workspace>;
export declare function getById(id?: string): Promise<Workspace | null>;
export declare function findByParentId(parentId: string): Promise<Workspace[]>;
export declare function create(patch?: Partial<Workspace>): Promise<Workspace>;
export declare function all(): Promise<Workspace[]>;
export declare function count(): Promise<number>;
export declare function update(workspace: Workspace, patch: Partial<Workspace>): Promise<Workspace>;
export declare function remove(workspace: Workspace): Promise<void>;
export declare function ensureChildren({ _id }: Workspace): Promise<void>;
export {};
//# sourceMappingURL=workspace.d.ts.map