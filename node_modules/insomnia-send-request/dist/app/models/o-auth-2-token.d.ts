import type { BaseModel } from './index';
export declare type OAuth2Token = BaseModel & BaseOAuth2Token;
export declare const name = "OAuth 2.0 Token";
export declare const type = "OAuth2Token";
export declare const prefix = "oa2";
export declare const canDuplicate = false;
export declare const canSync = false;
interface BaseOAuth2Token {
    refreshToken: string;
    accessToken: string;
    identityToken: string;
    expiresAt: number | null;
    xResponseId: string | null;
    xError: string | null;
    error: string;
    errorDescription: string;
    errorUri: string;
}
export declare const isOAuth2Token: (model: Pick<BaseModel, 'type'>) => model is OAuth2Token;
export declare function init(): BaseOAuth2Token;
export declare function migrate(doc: OAuth2Token): OAuth2Token;
export declare function create(patch?: Partial<OAuth2Token>): Promise<OAuth2Token>;
export declare function update(token: OAuth2Token, patch: Partial<OAuth2Token>): Promise<OAuth2Token>;
export declare function remove(token: OAuth2Token): Promise<void>;
export declare function getByParentId(parentId: string): Promise<OAuth2Token | null>;
export declare function getOrCreateByParentId(parentId: string): Promise<OAuth2Token>;
export declare function all(): Promise<OAuth2Token[]>;
export {};
//# sourceMappingURL=o-auth-2-token.d.ts.map