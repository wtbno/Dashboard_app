import type { BaseModel } from './index';
export declare const name = "Workspace Meta";
export declare const type = "WorkspaceMeta";
export declare const prefix = "wrkm";
export declare const canDuplicate = false;
export declare const canSync = false;
interface BaseWorkspaceMeta {
    activeActivity: string | null;
    activeEnvironmentId: string | null;
    activeRequestId: string | null;
    activeUnitTestSuiteId: string | null;
    cachedGitLastAuthor: string | null;
    cachedGitLastCommitTime: number | null;
    cachedGitRepositoryBranch: string | null;
    gitRepositoryId: string | null;
    hasSeen: boolean;
    paneHeight: number;
    paneWidth: number;
    parentId: string | null;
    previewHidden: boolean;
    sidebarFilter: string;
    sidebarHidden: boolean;
    sidebarWidth: number;
    pushSnapshotOnInitialize: boolean;
}
export declare type WorkspaceMeta = BaseWorkspaceMeta & BaseModel;
export declare const isWorkspaceMeta: (model: Pick<BaseModel, 'type'>) => model is WorkspaceMeta;
export declare function init(): BaseWorkspaceMeta;
export declare function migrate(doc: WorkspaceMeta): WorkspaceMeta;
export declare function create(patch?: Partial<WorkspaceMeta>): Promise<WorkspaceMeta>;
export declare function update(workspaceMeta: WorkspaceMeta, patch?: Partial<WorkspaceMeta>): Promise<WorkspaceMeta>;
export declare function updateByParentId(parentId: string, patch?: Partial<WorkspaceMeta>): Promise<WorkspaceMeta>;
export declare function getByParentId(parentId: string): Promise<WorkspaceMeta | null>;
export declare function getByGitRepositoryId(gitRepositoryId: string): Promise<WorkspaceMeta | null>;
export declare function getOrCreateByParentId(parentId: string): Promise<WorkspaceMeta>;
export declare function all(): Promise<WorkspaceMeta[]>;
export {};
//# sourceMappingURL=workspace-meta.d.ts.map