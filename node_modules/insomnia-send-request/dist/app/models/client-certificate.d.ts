import type { BaseModel } from './index';
export declare const name = "Client Certificate";
export declare const type = "ClientCertificate";
export declare const prefix = "crt";
export declare const canDuplicate = true;
export declare const canSync = false;
interface BaseClientCertificate {
    parentId: string;
    host: string;
    passphrase: string | null;
    cert: string | null;
    key: string | null;
    pfx: string | null;
    disabled: boolean;
    isPrivate: boolean;
}
export declare type ClientCertificate = BaseModel & BaseClientCertificate;
export declare function init(): BaseClientCertificate;
export declare const isClientCertificate: (model: Pick<BaseModel, 'type'>) => model is ClientCertificate;
export declare function migrate(doc: ClientCertificate): Promise<ClientCertificate>;
export declare function create(patch?: Partial<ClientCertificate>): Promise<ClientCertificate>;
export declare function update(cert: ClientCertificate, patch?: Partial<ClientCertificate>): Promise<ClientCertificate>;
export declare function getById(id: string): Promise<ClientCertificate | null>;
export declare function findByParentId(parentId: string): Promise<ClientCertificate[]>;
export declare function remove(cert: ClientCertificate): Promise<void>;
export declare function all(): Promise<ClientCertificate[]>;
export {};
//# sourceMappingURL=client-certificate.d.ts.map