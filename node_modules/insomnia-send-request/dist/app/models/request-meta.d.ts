import type { BaseModel } from './index';
export declare const name = "Request Meta";
export declare const type = "RequestMeta";
export declare const prefix = "reqm";
export declare const canDuplicate = false;
export declare const canSync = false;
interface BaseRequestMeta {
    parentId: string;
    previewMode: string;
    responseFilter: string;
    responseFilterHistory: string[];
    activeResponseId: string | null;
    savedRequestBody: Record<string, any>;
    pinned: boolean;
    lastActive: number;
    downloadPath: string | null;
}
export declare type RequestMeta = BaseModel & BaseRequestMeta;
export declare const isRequestMeta: (model: Pick<BaseModel, 'type'>) => model is RequestMeta;
export declare function init(): {
    parentId: null;
    previewMode: string;
    responseFilter: string;
    responseFilterHistory: never[];
    activeResponseId: null;
    savedRequestBody: {};
    pinned: boolean;
    lastActive: number;
    downloadPath: null;
};
export declare function migrate(doc: RequestMeta): RequestMeta;
export declare function create(patch?: Partial<RequestMeta>): Promise<RequestMeta>;
export declare function update(requestMeta: RequestMeta, patch: Partial<RequestMeta>): Promise<RequestMeta>;
export declare function getByParentId(parentId: string): Promise<RequestMeta | null>;
export declare function getOrCreateByParentId(parentId: string): Promise<RequestMeta>;
export declare function updateOrCreateByParentId(parentId: string, patch: Partial<RequestMeta>): Promise<RequestMeta>;
export declare function all(): Promise<RequestMeta[]>;
export {};
//# sourceMappingURL=request-meta.d.ts.map