/// <reference types="node" />
import { Readable } from 'stream';
import type { BaseModel } from './index';
export declare const name = "Response";
export declare const type = "Response";
export declare const prefix = "res";
export declare const canDuplicate = false;
export declare const canSync = false;
export interface ResponseHeader {
    name: string;
    value: string;
}
export interface ResponseTimelineEntry {
    name: string;
    timestamp: number;
    value: string;
}
declare type Compression = 'zip' | null | '__NEEDS_MIGRATION__' | undefined;
interface BaseResponse {
    environmentId: string | null;
    statusCode: number;
    statusMessage: string;
    httpVersion: string;
    contentType: string;
    url: string;
    bytesRead: number;
    bytesContent: number;
    elapsedTime: number;
    headers: ResponseHeader[];
    bodyPath: string;
    timelinePath: string;
    bodyCompression: Compression;
    error: string;
    requestVersionId: string | null;
    settingStoreCookies: boolean | null;
    settingSendCookies: boolean | null;
}
export declare type Response = BaseModel & BaseResponse;
export declare const isResponse: (model: Pick<BaseModel, 'type'>) => model is Response;
export declare function init(): BaseResponse;
export declare function migrate(doc: Response): Promise<Response>;
export declare function hookDatabaseInit(consoleLog?: typeof console.log): void;
export declare function hookRemove(doc: Response, consoleLog?: typeof console.log): void;
export declare function getById(id: string): Promise<Response | null>;
export declare function all(): Promise<Response[]>;
export declare function removeForRequest(parentId: string, environmentId?: string | null): Promise<void>;
export declare function remove(response: Response): Promise<void>;
export declare function getLatestForRequest(requestId: string, environmentId: string | null): Promise<Response | null>;
export declare function create(patch?: Record<string, any>, maxResponses?: number): Promise<BaseModel>;
export declare function getLatestByParentId(parentId: string): Promise<Response | null>;
export declare function getBodyStream<T extends Response, TFail extends Readable>(response: T, readFailureValue?: TFail | null): Readable | TFail | null;
export declare const getBodyBuffer: <TFail = null>(response?: {
    bodyPath?: string | undefined;
    bodyCompression?: Compression;
} | undefined, readFailureValue?: TFail | null | undefined) => Buffer | TFail | null;
export declare function getTimeline(response: Response): ResponseTimelineEntry[];
export declare function cleanDeletedResponses(): Promise<void>;
export {};
//# sourceMappingURL=response.d.ts.map