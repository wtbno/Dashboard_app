import type { BaseModel } from './index';
export declare const name = "Project";
export declare const type = "Project";
export declare const prefix = "proj";
export declare const canDuplicate = false;
export declare const canSync = false;
export declare const DEFAULT_PROJECT_ID: string;
export declare const isDefaultProject: (project: Pick<Project, '_id'>) => boolean;
export declare const isNotDefaultProject: (project: Pick<Project, '_id'>) => boolean;
export declare const isLocalProject: (project: Pick<Project, 'remoteId'>) => project is LocalProject;
export declare const isRemoteProject: (project: Pick<Project, 'remoteId'>) => project is RemoteProject;
export declare const projectHasSettings: (project: Pick<Project, '_id'>) => boolean;
interface CommonProject {
    name: string;
}
export interface RemoteProject extends BaseModel, CommonProject {
    remoteId: string;
}
export interface LocalProject extends BaseModel, CommonProject {
    remoteId: null;
}
export declare type Project = LocalProject | RemoteProject;
export declare const isProject: (model: Pick<BaseModel, 'type'>) => model is Project;
export declare const isProjectId: (id: string | null) => boolean | undefined;
export declare function init(): Partial<Project>;
export declare function migrate(project: Project): Project;
export declare function createId(): string;
export declare function create(patch?: Partial<Project>): Promise<Project>;
export declare function getById(_id: string): Promise<Project | null>;
export declare function getByRemoteId(remoteId: string): Promise<Project | null>;
export declare function remove(project: Project): Promise<void>;
export declare function update(project: Project, patch: Partial<Project>): Promise<Project>;
export declare function all(): Promise<Project[]>;
export {};
//# sourceMappingURL=project.d.ts.map