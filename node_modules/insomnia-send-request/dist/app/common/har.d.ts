import type { Request } from '../models/request';
import type { Response } from '../models/response';
import type { RenderedRequest } from './render';
export interface HarCookie {
    name: string;
    value: string;
    path?: string;
    domain?: string;
    expires?: string;
    httpOnly?: boolean;
    secure?: boolean;
    comment?: string;
}
export interface HarHeader {
    name: string;
    value: string;
    comment?: string;
}
export interface HarQueryString {
    name: string;
    value: string;
    comment?: string;
}
export interface HarPostParam {
    name: string;
    value?: string;
    fileName?: string;
    contentType?: string;
    comment?: string;
}
export interface HarPostData {
    mimeType: string;
    params: HarPostParam[];
    text: string;
    comment?: string;
}
export interface HarRequest {
    method: string;
    url: string;
    httpVersion: string;
    cookies: HarCookie[];
    headers: HarHeader[];
    queryString: HarQueryString[];
    postData?: HarPostData;
    headersSize: number;
    bodySize: number;
    comment?: string;
    settingEncodeUrl: boolean;
}
export interface HarContent {
    size: number;
    compression?: number;
    mimeType: string;
    text?: string;
    encoding?: string;
    comment?: string;
}
export interface HarResponse {
    status: number;
    statusText: string;
    httpVersion: string;
    cookies: HarCookie[];
    headers: HarHeader[];
    content: HarContent;
    redirectURL: string;
    headersSize: number;
    bodySize: number;
    comment?: string;
}
export interface HarRequestCache {
    expires?: string;
    lastAccess: string;
    eTag: string;
    hitCount: number;
    comment?: string;
}
export interface HarCache {
    beforeRequest?: HarRequestCache;
    afterRequest?: HarRequestCache;
    comment?: string;
}
export interface HarEntryTimings {
    blocked?: number;
    dns?: number;
    connect?: number;
    send: number;
    wait: number;
    receive: number;
    ssl?: number;
    comment?: string;
}
export interface HarEntry {
    pageref?: string;
    startedDateTime: string;
    time: number;
    request: HarRequest;
    response: HarResponse;
    cache: HarCache;
    timings: HarEntryTimings;
    serverIPAddress?: string;
    connection?: string;
    comment?: string;
}
export interface HarPageTimings {
    onContentLoad?: number;
    onLoad?: number;
    comment?: string;
}
export interface HarPage {
    startedDateTime: string;
    id: string;
    title: string;
    pageTimings: HarPageTimings;
    comment?: string;
}
export interface HarCreator {
    name: string;
    version: string;
    comment?: string;
}
export interface HarBrowser {
    name: string;
    version: string;
    comment?: string;
}
export interface HarLog {
    version: string;
    creator: HarCreator;
    browser?: HarBrowser;
    pages?: HarPage[];
    entries: HarEntry[];
    comment?: string;
}
export interface Har {
    log: HarLog;
}
export interface ExportRequest {
    requestId: string;
    environmentId: string | null;
    responseId?: string;
}
export declare function exportHarCurrentRequest(request: Request, response: Response): Promise<Har>;
export declare function exportHar(exportRequests: ExportRequest[]): Promise<Har>;
export declare function exportHarResponse(response: Response | null): Promise<HarResponse>;
export declare function exportHarRequest(requestId: string, environmentId: string, addContentLength?: boolean): Promise<HarRequest | null>;
export declare function exportHarWithRequest(request: Request, environmentId?: string, addContentLength?: boolean): Promise<HarRequest>;
export declare function exportHarWithRenderedRequest(renderedRequest: RenderedRequest, addContentLength?: boolean): Promise<HarRequest>;
//# sourceMappingURL=har.d.ts.map