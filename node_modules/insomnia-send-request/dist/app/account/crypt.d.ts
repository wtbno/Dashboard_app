/// <reference types="node" />
/**
 * Generate hex signing key used for AES encryption
 *
 * @param pass
 * @param email
 * @param salt
 */
export declare function deriveKey(pass: any, email: any, salt: any): Promise<string>;
/**
 * Encrypt with RSA256 public key
 *
 * @param publicKeyJWK
 * @param plaintext
 * @return String
 */
export declare function encryptRSAWithJWK(publicKeyJWK: any, plaintext: any): string;
export declare function decryptRSAWithJWK(privateJWK: any, encryptedBlob: any): string;
/**
 * Encrypt data using symmetric key
 *
 * @param jwkOrKey JWK or string representing symmetric key
 * @param buff data to encrypt
 * @param additionalData any additional public data to attach
 * @returns {{iv, t, d, ad}}
 */
export declare function encryptAESBuffer(jwkOrKey: any, buff: any, additionalData?: string): {
    iv: string;
    t: string;
    ad: string;
    d: string;
};
/**
 * Encrypt data using symmetric key
 *
 * @param jwkOrKey JWK or string representing symmetric key
 * @param plaintext string of data to encrypt
 * @param additionalData any additional public data to attach
 * @returns {{iv, t, d, ad}}
 */
export declare function encryptAES(jwkOrKey: any, plaintext: any, additionalData?: string): {
    iv: string;
    t: string;
    ad: string;
    d: string;
};
/**
 * Decrypt AES using a key
 *
 * @param jwkOrKey JWK or string representing symmetric key
 * @param encryptedResult encryption data
 * @returns String
 */
export declare function decryptAES(jwkOrKey: any, encryptedResult: any): string;
/**
 * Decrypts AES using a key to buffer
 * @param jwkOrKey
 * @param encryptedResult
 * @returns {string}
 */
export declare function decryptAESToBuffer(jwkOrKey: any, encryptedResult: any): Buffer;
/**
 * Generate a random key
 *
 * @returns {Promise}
 */
export declare function srpGenKey(): Promise<unknown>;
/**
 * Generate a random AES256 key for use with symmetric encryption
 */
export declare function generateAES256Key(): Promise<JsonWebKey>;
/**
 * Generate RSA keypair JWK with 2048 bits and exponent 0x10001
 *
 * @returns Object
 */
export declare function generateKeyPairJWK(): Promise<{
    publicKey: JsonWebKey;
    privateKey: JsonWebKey;
} | {
    privateKey: {
        alg: string;
        kty: string;
        key_ops: string[];
        ext: boolean;
        d: string;
        dp: string;
        dq: string;
        e: string;
        n: string;
        p: string;
        q: string;
        qi: string;
    };
    publicKey: {
        alg: string;
        kty: string;
        key_ops: string[];
        e: string;
        n: string;
    };
}>;
//# sourceMappingURL=crypt.d.ts.map