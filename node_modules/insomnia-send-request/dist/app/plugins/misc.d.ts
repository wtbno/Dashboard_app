import { ThemeSettings } from '../models/settings';
import { ColorScheme } from './index';
interface ThemeBlock {
    background?: {
        default: string;
        success?: string;
        notice?: string;
        warning?: string;
        danger?: string;
        surprise?: string;
        info?: string;
    };
    foreground?: {
        default: string;
        success?: string;
        notice?: string;
        warning?: string;
        danger?: string;
        surprise?: string;
        info?: string;
    };
    highlight?: {
        default: string;
        xxs?: string;
        xs?: string;
        sm?: string;
        md?: string;
        lg?: string;
        xl?: string;
    };
}
declare type ThemeInner = ThemeBlock & {
    rawCss?: string;
    styles?: {
        dialog?: ThemeBlock;
        dialogFooter?: ThemeBlock;
        dialogHeader?: ThemeBlock;
        dropdown?: ThemeBlock;
        editor?: ThemeBlock;
        link?: ThemeBlock;
        overlay?: ThemeBlock;
        pane?: ThemeBlock;
        paneHeader?: ThemeBlock;
        sidebar?: ThemeBlock;
        sidebarHeader?: ThemeBlock;
        sidebarList?: ThemeBlock;
        tooltip?: ThemeBlock;
        transparentOverlay?: ThemeBlock;
    } | null;
};
export interface PluginTheme {
    name: string;
    displayName: string;
    theme: ThemeInner;
}
export declare function generateThemeCSS(theme: PluginTheme): Promise<string>;
export declare function getColorScheme({ autoDetectColorScheme }: ThemeSettings): ColorScheme;
export declare function applyColorScheme(settings: ThemeSettings): Promise<void>;
export declare function setTheme(themeName: string): Promise<void>;
export declare function setFont(settings: Record<string, any>): Promise<void>;
export {};
//# sourceMappingURL=misc.d.ts.map