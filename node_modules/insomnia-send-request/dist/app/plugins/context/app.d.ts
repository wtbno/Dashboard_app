/// <reference types="node" />
import * as analytics from '../../../app/common/analytics';
import { axiosRequest as axios } from '../../../app/network/axios-request';
import type { RenderPurpose } from '../../common/render';
import { showAlert } from '../../ui/components/modals';
import { PromptModalOptions } from '../../ui/components/modals/prompt-modal';
interface DialogOptions {
    onHide?: () => void;
    tall?: boolean;
    skinny?: boolean;
    wide?: boolean;
}
interface AppInfo {
    version: string;
    platform: NodeJS.Platform;
}
interface ShowDialogOptions {
    defaultPath?: string;
}
interface AppClipboard {
    readText(): string;
    writeText(text: string): void;
    clear(): void;
}
interface ShowGenericModalDialogOptions {
    html?: string;
}
export interface AppContext {
    alert: (title: string, message?: string) => Promise<undefined> | ReturnType<typeof showAlert>;
    dialog: (title: string, body: HTMLElement, options?: DialogOptions) => void;
    prompt: (title: string, options?: Pick<PromptModalOptions, 'label' | 'defaultValue' | 'submitName' | 'cancelable'>) => Promise<string>;
    getPath: (name: string) => string;
    getInfo: () => AppInfo;
    showSaveDialog: (options?: ShowDialogOptions) => Promise<string | null>;
    clipboard: AppClipboard;
    /**
     * @deprecated as it was never officially supported
     */
    showGenericModalDialog: (title: string, options?: ShowGenericModalDialogOptions) => void;
}
export interface PrivateProperties {
    axios: typeof axios;
    analytics: typeof analytics;
}
export declare function init(renderPurpose?: RenderPurpose): {
    app: AppContext;
    __private: PrivateProperties;
};
export {};
//# sourceMappingURL=app.d.ts.map