import type { PluginConfig } from 'insomnia-common';
import { GrpcRequest } from '../models/grpc-request';
import type { Request } from '../models/request';
import type { RequestGroup } from '../models/request-group';
import type { Workspace } from '../models/workspace';
import type { PluginTemplateTag } from '../templating/extensions/index';
import type { PluginTheme } from './misc';
export interface Module {
    templateTags?: PluginTemplateTag[];
    requestHooks?: ((requstContext: any) => void)[];
    responseHooks?: ((responseContext: any) => void)[];
    themes?: PluginTheme[];
    requestGroupActions?: OmitInternal<RequestGroupAction>[];
    requestActions?: OmitInternal<RequestAction>[];
    workspaceActions?: OmitInternal<WorkspaceAction>[];
    documentActions?: OmitInternal<DocumentAction>[];
    configGenerators?: OmitInternal<ConfigGenerator>[];
}
export interface Plugin {
    name: string;
    description: string;
    version: string;
    directory: string;
    config: PluginConfig;
    module: Module;
}
interface InternalProperties {
    plugin: Plugin;
}
declare type OmitInternal<T> = Omit<T, keyof InternalProperties>;
export interface TemplateTag extends InternalProperties {
    templateTag: PluginTemplateTag;
}
export interface RequestGroupAction extends InternalProperties {
    action: (context: Record<string, any>, models: {
        requestGroup: RequestGroup;
        requests: (Request | GrpcRequest)[];
    }) => void | Promise<void>;
    label: string;
    icon?: string;
}
export interface RequestAction extends InternalProperties {
    action: (context: Record<string, any>, models: {
        requestGroup?: RequestGroup;
        request: Request | GrpcRequest;
    }) => void | Promise<void>;
    label: string;
    icon?: string;
}
export interface WorkspaceAction extends InternalProperties {
    action: (context: Record<string, any>, models: {
        workspace: Workspace;
        requestGroups: RequestGroup[];
        requests: Request[];
    }) => void | Promise<void>;
    label: string;
    icon?: string;
}
export interface SpecInfo {
    contents: Record<string, any>;
    rawContents: string;
    format: string;
    formatVersion: string;
}
export interface ConfigGenerator extends InternalProperties {
    label: string;
    generate: (info: SpecInfo) => Promise<{
        document?: string;
        error?: string;
    }>;
}
export interface DocumentAction extends InternalProperties {
    action: (context: Record<string, any>, documents: SpecInfo) => void | Promise<void>;
    label: string;
    hideAfterClick?: boolean;
}
declare type RequestHookCallback = (context: any) => void;
export interface RequestHook extends InternalProperties {
    hook: RequestHookCallback;
}
declare type ResponseHookCallback = (context: any) => void;
export interface ResponseHook extends InternalProperties {
    hook: ResponseHookCallback;
}
export interface Theme extends InternalProperties {
    theme: PluginTheme;
}
export declare type ColorScheme = 'default' | 'light' | 'dark';
export declare function init(): Promise<void>;
export declare function ignorePlugin(name: string): void;
export declare function clearIgnores(): void;
export declare function getPlugins(force?: boolean): Promise<Plugin[]>;
export declare function reloadPlugins(): Promise<void>;
export declare function getRequestGroupActions(): Promise<RequestGroupAction[]>;
export declare function getRequestActions(): Promise<RequestAction[]>;
export declare function getWorkspaceActions(): Promise<WorkspaceAction[]>;
export declare function getDocumentActions(): Promise<DocumentAction[]>;
export declare function getTemplateTags(): Promise<TemplateTag[]>;
export declare function getRequestHooks(): Promise<RequestHook[]>;
export declare function getResponseHooks(): Promise<ResponseHook[]>;
export declare function getThemes(): Promise<Theme[]>;
export declare function getConfigGenerators(): Promise<ConfigGenerator[]>;
export {};
//# sourceMappingURL=index.d.ts.map