/// <reference types="node" />
import type { Request } from '../../models/request';
import type { Response } from '../../models/response';
import type { PluginStore } from '../../plugins/context';
import type { NunjucksParsedTagArg } from '../utils';
export declare type PluginArgumentValue = string | number | boolean;
declare type DisplayName = string | ((args: NunjucksParsedTagArg[]) => string);
interface PluginArgumentBase {
    displayName: DisplayName;
    description?: string;
    help?: string;
    hide?: (args: NunjucksParsedTagArg[]) => boolean;
}
export interface PluginArgumentEnumOption {
    displayName: DisplayName;
    value: PluginArgumentValue;
    description?: string;
    placeholder?: string;
}
export declare type PluginArgumentEnum = PluginArgumentBase & {
    type: 'enum';
    options: PluginArgumentEnumOption[];
    defaultValue?: PluginArgumentValue;
};
export declare type PluginArgumentModel = PluginArgumentBase & {
    type: 'model';
    model: string;
    defaultValue?: string;
};
export declare type PluginArgumentString = PluginArgumentBase & {
    type: 'string';
    placeholder?: string;
    defaultValue?: string;
};
export declare type PluginArgumentBoolean = PluginArgumentBase & {
    type: 'boolean';
    defaultValue?: boolean;
};
export declare type PluginArgumentFile = PluginArgumentBase & {
    type: 'file';
};
export declare type PluginArgumentNumber = PluginArgumentBase & {
    type: 'number';
    placeholder?: string;
    defaultValue?: number;
};
export declare type PluginArgument = PluginArgumentEnum | PluginArgumentModel | PluginArgumentString | PluginArgumentBoolean | PluginArgumentFile | PluginArgumentNumber;
export interface PluginTemplateTagContext {
    util: {
        models: {
            request: {
                getById: (id: string) => Promise<Request | null>;
            };
            response: {
                getLatestForRequestId: (id: string) => Promise<Response | null>;
                getBodyBuffer: (response: Response, fallback?: any) => Promise<Buffer | null>;
            };
        };
    };
}
export interface PluginTemplateTagActionContext {
    store: PluginStore;
}
export interface PluginTemplateTagAction {
    name: string;
    icon?: string;
    run: (context: PluginTemplateTagActionContext) => Promise<void>;
}
export interface PluginTemplateTag {
    args: PluginArgument[];
    name: string;
    displayName: DisplayName;
    disablePreview: () => boolean;
    description: string;
    actions: PluginTemplateTagAction[];
    run: (context: PluginTemplateTagContext, ...arg: any[]) => Promise<any> | any;
    deprecated?: boolean;
    validate?: (value: any) => string | null;
    priority?: number;
}
export {};
//# sourceMappingURL=index.d.ts.map