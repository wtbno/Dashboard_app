import { DCPlugin } from '../types/declarative-config';
import { RequestValidatorPlugin, XKongPluginRequestValidator } from '../types/kong';
import { OA3Operation, OpenApi3Spec } from '../types/openapi3';
export declare const isRequestValidatorPluginKey: (property: string) => property is "x-kong-plugin-request-validator";
declare type PluginItem = Record<string, any>;
export declare function generatePlugins(item: PluginItem, tags: string[]): import("../types/kong").Plugin[];
/**
 * This is valid config to allow all content to pass
 * See: https://github.com/Kong/kong-plugin-enterprise-request-validator/pull/34/files#diff-1a1d2d5ce801cc1cfb2aa91ae15686d81ef900af1dbef00f004677bc727bfd3cR284
 */
export declare const ALLOW_ALL_SCHEMA = "{}";
export declare function generateRequestValidatorPlugin({ plugin, tags, operation, }: {
    plugin?: Partial<RequestValidatorPlugin>;
    tags: string[];
    operation?: OA3Operation;
}): RequestValidatorPlugin;
export declare function generateGlobalPlugins(api: OpenApi3Spec, tags: string[]): {
    plugins: import("../types/kong").Plugin[];
    requestValidatorPlugin: RequestValidatorPlugin | undefined;
};
export declare const generateOperationPlugins: ({ operation, pathPlugins, parentValidatorPlugin, tags }: {
    operation: OA3Operation;
    pathPlugins: DCPlugin[];
    parentValidatorPlugin?: RequestValidatorPlugin | null | undefined;
    tags: string[];
}) => import("../types/kong").Plugin[];
/** This function accepts any OpenAPI3 document segment that can have the request validator plugin and returns it if found */
export declare const getRequestValidatorPluginDirective: (segment: XKongPluginRequestValidator) => RequestValidatorPlugin | undefined;
export {};
//# sourceMappingURL=plugins.d.ts.map