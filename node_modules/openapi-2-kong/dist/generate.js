"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.generate = exports.generateFromString = exports.generateFromSpec = exports.parseSpec = exports.conversionTypes = void 0;
const fs_1 = __importDefault(require("fs"));
const path_1 = __importDefault(require("path"));
const swagger_parser_1 = __importDefault(require("swagger-parser"));
const yaml_1 = __importDefault(require("yaml"));
const generate_1 = require("./declarative-config/generate");
const generate_2 = require("./kubernetes/generate");
const defaultTags = ['OAS3_import'];
exports.conversionTypes = [
    'kong-declarative-config',
    'kong-for-kubernetes',
];
const parseSpec = (spec) => {
    let api;
    if (typeof spec === 'string') {
        try {
            api = JSON.parse(spec);
        }
        catch (err) {
            api = yaml_1.default.parse(spec);
        }
    }
    else {
        api = JSON.parse(JSON.stringify(spec));
    }
    // Ensure it has some required properties to make parsing a bit less strict
    if (!api.info) {
        api.info = {};
    }
    if (api.openapi === '3.0') {
        api.openapi = '3.0.0';
    }
    // @ts-expect-error until we make our OpenAPI type extend from the canonical one (i.e. from `openapi-types`, we'll need to shim this here)
    return swagger_parser_1.default.dereference(api);
};
exports.parseSpec = parseSpec;
const generateFromSpec = (api, type, tags = []) => {
    const allTags = [...defaultTags, ...tags];
    switch (type) {
        case 'kong-declarative-config':
            return generate_1.generateDeclarativeConfigFromSpec(api, allTags);
        case 'kong-for-kubernetes':
            return generate_2.generateKongForKubernetesConfigFromSpec(api);
        default:
            throw new Error(`Unsupported output type "${type}"`);
    }
};
exports.generateFromSpec = generateFromSpec;
const generateFromString = async (specStr, type, tags = []) => {
    const api = await exports.parseSpec(specStr);
    return exports.generateFromSpec(api, type, tags);
};
exports.generateFromString = generateFromString;
const generate = (filePath, type, tags = []) => new Promise((resolve, reject) => {
    fs_1.default.readFile(path_1.default.resolve(filePath), 'utf8', (err, contents) => {
        if (err != null) {
            reject(err);
            return;
        }
        const fileSlug = path_1.default.basename(filePath);
        const allTags = [`OAS3file_${fileSlug}`, ...tags];
        resolve(exports.generateFromString(contents, type, allTags));
    });
});
exports.generate = generate;
//# sourceMappingURL=generate.js.map