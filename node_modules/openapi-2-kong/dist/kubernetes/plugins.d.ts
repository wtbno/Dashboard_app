import { ValueOf } from 'type-fest';
import { DCPlugin } from '../types/declarative-config';
import { IndexIncrement, OperationPlugin, PathPlugin, Plugins, ServerPlugin } from '../types/k8s-plugins';
import { PluginBase } from '../types/kong';
import { K8sKongPlugin, K8sKongPluginBase } from '../types/kubernetes-config';
import { OA3PathItem, OA3Paths, OA3Server, OpenApi3Spec } from '../types/openapi3';
export declare function flattenPluginDocuments(plugins: Plugins): K8sKongPlugin[];
export declare function getPlugins(api: OpenApi3Spec): Plugins;
export declare function mapDcPluginsToK8sPlugins(dcPlugins: DCPlugin[], suffix: string, increment: IndexIncrement): K8sKongPlugin[];
export declare function getGlobalPlugins(api: OpenApi3Spec, increment: IndexIncrement): K8sKongPlugin[];
export declare function getServerPlugins(servers: OA3Server[], increment: IndexIncrement): ServerPlugin[];
export declare function getPathPlugins(paths: OA3Paths, increment: IndexIncrement, api: OpenApi3Spec): PathPlugin[];
export declare function getOperationPlugins(pathItem: OA3PathItem, increment: IndexIncrement, api: OpenApi3Spec): OperationPlugin[];
declare const PluginNameSuffix: {
    readonly global: "g";
    readonly server: "s";
    readonly path: "p";
    readonly operation: "m";
};
declare type PluginNameSuffixKeys = ValueOf<typeof PluginNameSuffix>;
export declare function generateK8sPluginConfig(obj: Record<string, any>, pluginNameSuffix: PluginNameSuffixKeys, increment: IndexIncrement): K8sKongPlugin[];
export declare function normalizePathPlugins(pathPlugins: PathPlugin[]): PathPlugin[];
export declare const normalizeOperationPlugins: (operationPlugins: OperationPlugin[]) => OperationPlugin[];
export declare function prioritizePlugins<T extends K8sKongPluginBase<PluginBase<string>>>(global: T[], server: T[], path: T[], operation: T[]): T[];
export {};
//# sourceMappingURL=plugins.d.ts.map