import { K8sIngressRule } from '../types/kubernetes-config';
import { OA3Server, OpenApi3Spec } from '../types/openapi3';
import { KongForKubernetesResult } from '../types/outputs';
interface CustomAnnotations {
    pluginNames: string[];
    overrideName?: string;
}
export declare const generateKongForKubernetesConfigFromSpec: (api: OpenApi3Spec) => KongForKubernetesResult;
export declare const getSpecName: (api: OpenApi3Spec) => string;
export declare const generateMetadataAnnotations: (api: OpenApi3Spec, { pluginNames, overrideName }: CustomAnnotations) => {
    [x: string]: any;
    'kubernetes.io/ingress.class'?: "kong" | undefined;
    'konghq.com/override'?: string | undefined;
    'konghq.com/plugins'?: string | undefined;
};
export declare const generateIngressRule: (index: number, server: OA3Server, specName: string, paths?: string[] | undefined) => K8sIngressRule;
export declare const generateServiceName: (server: OA3Server, specName: string, index: number) => string;
export declare const generateTLS: (server?: OA3Server | undefined) => import("../types/kubernetes-config").K8sIngressTLS[] | null;
export declare const generateServicePort: (server: OA3Server) => number;
export declare const generateServicePath: (serverBasePath: string, specificPath?: string) => string | undefined;
export {};
//# sourceMappingURL=generate.d.ts.map