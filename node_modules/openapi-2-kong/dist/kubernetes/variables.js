"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.pathVariablesToWildcard = exports.resolveVariables = exports.resolveUrlVariables = void 0;
const protocolSearchValue = /{([^}]+)}(?=:\/\/)/g; // positive lookahead for ://
const pathSearchValue = /{([^}]+)}(?!:\/\/)/g; // negative lookahead for ://
function resolveUrlVariables(url, variables) {
    const protocolResolved = resolveVariables(url, protocolSearchValue, 'http', variables);
    const pathResolved = resolveVariables(protocolResolved, pathSearchValue, '.*', variables);
    return pathResolved;
}
exports.resolveUrlVariables = resolveUrlVariables;
function resolveVariables(str, regExp, fallback, variables) {
    var _a;
    let resolved = str;
    let shouldContinue = true;
    do {
        // Regexp contain the global flag (g), meaning we must execute our regex on the original string.
        // https://stackoverflow.com/a/27753327
        const [replace, name] = regExp.exec(str) || [];
        const value = ((_a = variables === null || variables === void 0 ? void 0 : variables[name]) === null || _a === void 0 ? void 0 : _a.default) || fallback;
        shouldContinue = !!name;
        resolved = replace ? resolved.replace(replace, value) : resolved;
    } while (shouldContinue);
    return resolved;
}
exports.resolveVariables = resolveVariables;
function pathVariablesToWildcard(p) {
    return p.replace(pathSearchValue, '.*');
}
exports.pathVariablesToWildcard = pathVariablesToWildcard;
//# sourceMappingURL=variables.js.map