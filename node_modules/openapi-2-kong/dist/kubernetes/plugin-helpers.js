"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.ingressDocWithOverride = exports.ingressDoc = exports.keyAuthName = exports.methodDoc = exports.keyAuthPluginDoc = exports.pluginDocWithName = exports.pluginKeyAuth = void 0;
const kong_1 = require("../types/kong");
exports.pluginKeyAuth = {
    [kong_1.xKongPluginKeyAuth]: {
        name: 'key-auth',
        config: {
            key_names: ['api_key', 'apikey'],
            key_in_body: false,
            hide_credentials: true,
        },
    },
};
const pluginDocWithName = (name, plugin) => ({
    apiVersion: 'configuration.konghq.com/v1',
    kind: 'KongPlugin',
    metadata: {
        name,
    },
    plugin,
});
exports.pluginDocWithName = pluginDocWithName;
const keyAuthPluginDoc = (suffix) => ({
    apiVersion: 'configuration.konghq.com/v1',
    config: {
        hide_credentials: true,
        key_in_body: false,
        key_names: ['api_key', 'apikey'],
    },
    kind: 'KongPlugin',
    metadata: {
        name: exports.keyAuthName(suffix),
    },
    plugin: 'key-auth',
});
exports.keyAuthPluginDoc = keyAuthPluginDoc;
const methodDoc = (method) => ({
    apiVersion: 'configuration.konghq.com/v1',
    kind: 'KongIngress',
    metadata: {
        name: `${method}-method`,
    },
    route: {
        methods: [method.toUpperCase()],
    },
});
exports.methodDoc = methodDoc;
const keyAuthName = (suffix) => `add-key-auth-${suffix}`;
exports.keyAuthName = keyAuthName;
const ingressDoc = (index, plugins, host, serviceName, path) => ({
    apiVersion: 'extensions/v1beta1',
    kind: 'Ingress',
    metadata: {
        annotations: {
            'kubernetes.io/ingress.class': 'kong',
            'konghq.com/plugins': plugins.join(', '),
        },
        name: `my-api-${index}`,
    },
    spec: {
        rules: [
            {
                host,
                http: {
                    paths: [
                        {
                            backend: {
                                serviceName,
                                servicePort: 80,
                            },
                            ...(path ? { path } : {}),
                        },
                    ],
                },
            },
        ],
    },
});
exports.ingressDoc = ingressDoc;
const ingressDocWithOverride = (index, plugins, override, host, serviceName, path) => ({
    apiVersion: 'extensions/v1beta1',
    kind: 'Ingress',
    metadata: {
        annotations: {
            'kubernetes.io/ingress.class': 'kong',
            'konghq.com/plugins': plugins.join(', '),
            'konghq.com/override': override,
        },
        name: `my-api-${index}`,
    },
    spec: {
        rules: [
            {
                host,
                http: {
                    paths: [
                        {
                            backend: {
                                serviceName,
                                servicePort: 80,
                            },
                            ...(path ? { path } : {}),
                        },
                    ],
                },
            },
        ],
    },
});
exports.ingressDocWithOverride = ingressDocWithOverride;
//# sourceMappingURL=plugin-helpers.js.map