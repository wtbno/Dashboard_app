/// <reference types="node" />
import url from 'url';
import { OA3Operation, OA3PathItem, OA3Server, OpenApi3Spec } from './types/openapi3';
export declare const getServers: (obj: OpenApi3Spec | OA3PathItem) => OA3Server[];
export declare const getPaths: (obj: OpenApi3Spec) => import("./types/openapi3").OA3Paths;
export declare function getAllServers(api: OpenApi3Spec): OA3Server[];
export declare const getSecurity: (obj: OpenApi3Spec | OA3Operation | null) => import("./types/openapi3").OA3SecurityRequirement[];
interface SlugifyOptions {
    replacement?: string;
    lower?: boolean;
}
export declare function getName(api: OpenApi3Spec, defaultValue?: string, slugifyOptions?: SlugifyOptions, isKubernetes?: boolean): string;
export declare function generateSlug(str: string, options?: SlugifyOptions): string;
export declare function pathVariablesToRegex(p: string): string;
export declare function getPluginNameFromKey(key: string): string;
export declare function isPluginKey(key: string): boolean;
export declare const HttpMethod: {
    readonly get: "GET";
    readonly put: "PUT";
    readonly post: "POST";
    readonly delete: "DELETE";
    readonly options: "OPTIONS";
    readonly head: "HEAD";
    readonly patch: "PATCH";
    readonly trace: "TRACE";
};
export declare type HttpMethodType = typeof HttpMethod[keyof typeof HttpMethod];
export declare function isHttpMethodKey(key: string): key is HttpMethodType;
export declare function getMethodAnnotationName(method: HttpMethodType): string;
export declare function parseUrl(urlStr: string): url.UrlWithStringQuery;
export declare function fillServerVariables(server: OA3Server): string;
export declare function joinPath(p1: string, p2: string): string;
export declare function distinctByProperty<T>(arr: T[], propertySelector: (item: T) => any): T[];
export {};
//# sourceMappingURL=common.d.ts.map