"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.validate = exports.isErrorResult = exports.isValidResult = exports.ingest = void 0;
const better_ajv_errors_1 = require("@apideck/better-ajv-errors");
const ajv_1 = __importDefault(require("ajv"));
const insomnia_schema_json_1 = __importDefault(require("./generated/schemas/insomnia.schema.json"));
const ajv = new ajv_1.default({
    allErrors: true,
    verbose: true,
});
const ingest = (input) => {
    if (typeof input === 'string') {
        try {
            return JSON.parse(input);
        }
        catch (error) {
            throw error;
        }
    }
    return input;
};
exports.ingest = ingest;
const isValidResult = (result) => result.valid === true;
exports.isValidResult = isValidResult;
const isErrorResult = (result) => result.valid === false;
exports.isErrorResult = isErrorResult;
const validate = (input) => {
    const data = exports.ingest(input);
    const validator = ajv.compile(insomnia_schema_json_1.default);
    const valid = validator(data);
    if (valid) {
        const validResult = {
            valid: true,
            errors: null,
            humanReadableErrors: null,
        };
        return validResult;
    }
    const { errors } = validator;
    if (!errors) {
        throw new Error('unable to validate json schema');
    }
    const errorResult = {
        valid: false,
        errors,
        humanReadableErrors: better_ajv_errors_1.betterAjvErrors({
            basePath: '',
            data,
            errors,
            schema: insomnia_schema_json_1.default,
        }),
    };
    return errorResult;
};
exports.validate = validate;
//# sourceMappingURL=validate.js.map