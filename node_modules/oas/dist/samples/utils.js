/**
 * Portions of this file have been extracted and modified from Swagger UI.
 *
 * @license Apache 2.0
 * @see {@link https://github.com/swagger-api/swagger-ui/blob/master/src/core/utils.js}
 */
var __assign = (this && this.__assign) || function () {
    __assign = Object.assign || function(t) {
        for (var s, i = 1, n = arguments.length; i < n; i++) {
            s = arguments[i];
            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
                t[p] = s[p];
        }
        return t;
    };
    return __assign.apply(this, arguments);
};
function isObject(obj) {
    return !!obj && typeof obj === 'object';
}
module.exports.usesPolymorphism = function (schema) {
    var polymorphism;
    if (schema.oneOf) {
        polymorphism = 'oneOf';
    }
    else if (schema.anyOf) {
        polymorphism = 'anyOf';
    }
    else if (schema.allOf) {
        polymorphism = 'allOf';
    }
    return polymorphism;
};
module.exports.objectify = function (thing) {
    if (!isObject(thing)) {
        return {};
    }
    return thing;
};
module.exports.normalizeArray = function (arr) {
    if (Array.isArray(arr)) {
        return arr;
    }
    return [arr];
};
module.exports.isFunc = function (thing) {
    return typeof thing === 'function';
};
// Deeply strips a specific key from an object.
//
// `predicate` can be used to discriminate the stripping further,
// by preserving the key's place in the object based on its value.
var deeplyStripKey = function (input, keyToStrip, predicate) {
    if (predicate === void 0) { predicate = function () { return true; }; }
    if (typeof input !== 'object' || Array.isArray(input) || input === null || !keyToStrip) {
        return input;
    }
    var obj = __assign({}, input);
    Object.keys(obj).forEach(function (k) {
        if (k === keyToStrip && predicate(obj[k], k)) {
            delete obj[k];
            return;
        }
        obj[k] = deeplyStripKey(obj[k], keyToStrip, predicate);
    });
    return obj;
};
module.exports.deeplyStripKey = deeplyStripKey;
