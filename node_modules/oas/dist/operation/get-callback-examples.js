var __read = (this && this.__read) || function (o, n) {
    var m = typeof Symbol === "function" && o[Symbol.iterator];
    if (!m) return o;
    var i = m.call(o), r, ar = [], e;
    try {
        while ((n === void 0 || n-- > 0) && !(r = i.next()).done) ar.push(r.value);
    }
    catch (error) { e = { error: error }; }
    finally {
        try {
            if (r && !r.done && (m = i["return"])) m.call(i);
        }
        finally { if (e) throw e.error; }
    }
    return ar;
};
var __spreadArray = (this && this.__spreadArray) || function (to, from, pack) {
    if (pack || arguments.length === 2) for (var i = 0, l = from.length, ar; i < l; i++) {
        if (ar || !(i in from)) {
            if (!ar) ar = Array.prototype.slice.call(from, 0, i);
            ar[i] = from[i];
        }
    }
    return to.concat(ar || Array.prototype.slice.call(from));
};
var getResponseExamples = require('./get-response-examples');
/**
 * @param {object} operation
 */
module.exports = function (operation) {
    // spreads the contents of the map for each callback so there's not nested arrays returned
    return [].concat.apply([], __spreadArray([], __read(Object.keys(operation.callbacks || {}).map(function (identifier) {
        // spreads the contents again so there's not nested arrays returned
        return []
            .concat.apply([], __spreadArray([], __read(Object.keys(operation.callbacks[identifier]).map(function (expression) {
            return Object.keys(operation.callbacks[identifier][expression]).map(function (method) {
                var example = getResponseExamples(operation.callbacks[identifier][expression][method]);
                if (example.length === 0)
                    return false;
                return {
                    identifier: identifier,
                    expression: expression,
                    method: method,
                    example: example
                };
            });
        })), false)).filter(Boolean);
    })), false));
};
